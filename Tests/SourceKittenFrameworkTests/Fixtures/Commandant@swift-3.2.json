[{
  "Sources\/Commandant\/Argument.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 2864,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Argument&lt;T&gt;<\/Declaration>",
        "key.bodylength" : 704,
        "key.bodyoffset" : 246,
        "key.doc.column" : 15,
        "key.doc.comment" : "Describes an argument that can be provided on the command line.",
        "key.doc.declaration" : "public struct Argument<T>",
        "key.doc.file" : "Sources\/Commandant\/Argument.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Argument.swift\" line=\"12\" column=\"15\"><Name>Argument<\/Name><USR>s:10Commandant8ArgumentV<\/USR><Declaration>public struct Argument&lt;T&gt;<\/Declaration><CommentParts><Abstract><Para>Describes an argument that can be provided on the command line.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 12,
        "key.doc.name" : "Argument",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Argument.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Argument<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant8ArgumentV1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 725,
        "key.name" : "Argument",
        "key.namelength" : 8,
        "key.nameoffset" : 233,
        "key.offset" : 226,
        "key.parsed_declaration" : "public struct Argument<T>",
        "key.parsed_scope.end" : 32,
        "key.parsed_scope.start" : 12,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let defaultValue: <Type usr=\"s:10Commandant8ArgumentV1Txmfp\">T<\/Type>?<\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "The default value for this argument. This is the value that will be used\nif the argument is never explicitly specified on the command line.\n\nIf this is nil, this argument is always required.",
            "key.doc.declaration" : "public let defaultValue: T?",
            "key.doc.discussion" : [
              {
                "Para" : "If this is nil, this argument is always required."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Argument.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Argument.swift\" line=\"17\" column=\"13\"><Name>defaultValue<\/Name><USR>s:10Commandant8ArgumentV12defaultValuexSgv<\/USR><Declaration>public let defaultValue: T?<\/Declaration><CommentParts><Abstract><Para>The default value for this argument. This is the value that will be used if the argument is never explicitly specified on the command line.<\/Para><\/Abstract><Discussion><Para>If this is nil, this argument is always required.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 17,
            "key.doc.name" : "defaultValue",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Argument.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>defaultValue<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:10Commandant8ArgumentV1Txmfp\">T<\/ref.generic_type_param>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 20,
            "key.name" : "defaultValue",
            "key.namelength" : 12,
            "key.nameoffset" : 469,
            "key.offset" : 465,
            "key.parsed_declaration" : "public let defaultValue: T?",
            "key.parsed_scope.end" : 17,
            "key.parsed_scope.start" : 17,
            "key.typename" : "T?",
            "key.typeusr" : "_T0xSgD",
            "key.usr" : "s:10Commandant8ArgumentV12defaultValuexSgv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let usage: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "A human-readable string describing the purpose of this argument. This will\nbe shown in help messages.",
            "key.doc.declaration" : "public let usage: String",
            "key.doc.file" : "Sources\/Commandant\/Argument.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Argument.swift\" line=\"21\" column=\"13\"><Name>usage<\/Name><USR>s:10Commandant8ArgumentV5usageSSv<\/USR><Declaration>public let usage: String<\/Declaration><CommentParts><Abstract><Para>A human-readable string describing the purpose of this argument. This will be shown in help messages.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 21,
            "key.doc.name" : "usage",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Argument.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>usage<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 17,
            "key.name" : "usage",
            "key.namelength" : 5,
            "key.nameoffset" : 611,
            "key.offset" : 607,
            "key.parsed_declaration" : "public let usage: String",
            "key.parsed_scope.end" : 21,
            "key.parsed_scope.start" : 21,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant8ArgumentV5usageSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(defaultValue: <Type usr=\"s:10Commandant8ArgumentV1Txmfp\">T<\/Type>? = default, usage: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
            "key.bodylength" : 58,
            "key.bodyoffset" : 679,
            "key.filepath" : "Sources\/Commandant\/Argument.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>defaultValue<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant8ArgumentV1Txmfp\">T<\/ref.generic_type_param>?<\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>usage<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 104,
            "key.name" : "init(defaultValue:usage:)",
            "key.namelength" : 43,
            "key.nameoffset" : 634,
            "key.offset" : 634,
            "key.parsed_declaration" : "public init(defaultValue: T? = nil, usage: String)",
            "key.parsed_scope.end" : 26,
            "key.parsed_scope.start" : 23,
            "key.substructure" : [

            ],
            "key.typename" : "<T> (Argument<T>.Type) -> (T?, String) -> Argument<T>",
            "key.typeusr" : "_T010Commandant8ArgumentVyxGxSg12defaultValue_SS5usagetcD",
            "key.usr" : "s:10Commandant8ArgumentVACyxGxSg12defaultValue_SS5usagetcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate func invalidUsageError&lt;ClientError&gt;(_ value: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant8ArgumentV17invalidUsageError33_8CAE711C2CD19D07FEBBE5F857AB09FDLLAA0aE0Oyqd__GSSlF06ClientE0L_qd__mfp\">ClientError<\/Type>&gt;<\/Declaration>",
            "key.bodylength" : 109,
            "key.bodyoffset" : 839,
            "key.filepath" : "Sources\/Commandant\/Argument.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>invalidUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant8ArgumentV17invalidUsageError33_8CAE711C2CD19D07FEBBE5F857AB09FDLLAA0aE0Oyqd__GSSlF06ClientE0L_qd__mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant8ArgumentV17invalidUsageError33_8CAE711C2CD19D07FEBBE5F857AB09FDLLAA0aE0Oyqd__GSSlF06ClientE0L_qd__mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 196,
            "key.name" : "invalidUsageError(_:)",
            "key.namelength" : 47,
            "key.nameoffset" : 758,
            "key.offset" : 753,
            "key.parsed_declaration" : "fileprivate func invalidUsageError<ClientError>(_ value: String) -> CommandantError<ClientError>",
            "key.parsed_scope.end" : 31,
            "key.parsed_scope.start" : 28,
            "key.substructure" : [

            ],
            "key.typename" : "<T, ClientError> (Argument<T>) -> (String) -> CommandantError<ClientError>",
            "key.typeusr" : "_T010Commandant0A5ErrorOyqd__GSScluD",
            "key.usr" : "s:10Commandant8ArgumentV17invalidUsageError33_8CAE711C2CD19D07FEBBE5F857AB09FDLLAA0aE0Oyqd__GSSlF"
          }
        ],
        "key.typename" : "Argument<T>.Type",
        "key.typeusr" : "_T010Commandant8ArgumentVyxGmD",
        "key.usr" : "s:10Commandant8ArgumentV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, argument: <Type usr=\"s:10Commandant8ArgumentV\">Argument<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/Type>&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 500,
        "key.bodyoffset" : 1275,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given argument in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, the argument's `defaultValue` is used.",
        "key.doc.declaration" : "public func <|<T, ClientError>(mode: CommandMode, argument: Argument<T>) -> Result<T, CommandantError<ClientError>> where T : ArgumentProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, the argument’s `defaultValue` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Argument.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Argument.swift\" line=\"38\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF<\/USR><Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: CommandMode, argument: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Evaluates the given argument in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, the argument’s <codeVoice>defaultValue<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 38,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Argument.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>argument<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant8ArgumentV\">Argument<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 630,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 79,
        "key.nameoffset" : 1151,
        "key.offset" : 1146,
        "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, argument: Argument<T>) -> Result<T, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 58,
        "key.parsed_scope.start" : 38,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Argument.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 1155,
            "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, argument: Argument<T>) -> Result<T, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 38,
            "key.parsed_scope.start" : 38,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (CommandMode, Argument<T>) -> Result<T, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOyx10Commandant0B5ErrorOyq_GGAC11CommandModeO_AC8ArgumentVyxGtcAC0F8ProtocolRzr0_luD",
        "key.usr" : "s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, argument: <Type usr=\"s:10Commandant8ArgumentV\">Argument<\/Type>&lt;[<Type usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/Type>]&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;[<Type usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/Type>], <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 753,
        "key.bodyoffset" : 2109,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given argument list in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, the argument's `defaultValue` is used.",
        "key.doc.declaration" : "public func <|<T, ClientError>(mode: CommandMode, argument: Argument<[T]>) -> Result<[T], CommandantError<ClientError>> where T : ArgumentProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, the argument’s `defaultValue` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Argument.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Argument.swift\" line=\"64\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF<\/USR><Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: CommandMode, argument: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Evaluates the given argument list in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, the argument’s <codeVoice>defaultValue<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 64,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Argument.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>argument<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant8ArgumentV\">Argument<\/ref.struct>&lt;[<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;[<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>], <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 887,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 81,
        "key.nameoffset" : 1981,
        "key.offset" : 1976,
        "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, argument: Argument<[T]>) -> Result<[T], CommandantError<ClientError>>",
        "key.parsed_scope.end" : 96,
        "key.parsed_scope.start" : 64,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Argument.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 1985,
            "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, argument: Argument<[T]>) -> Result<[T], CommandantError<ClientError>>",
            "key.parsed_scope.end" : 64,
            "key.parsed_scope.start" : 64,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (CommandMode, Argument<[T]>) -> Result<[T], CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOySayxG10Commandant0B5ErrorOyq_GGAD11CommandModeO_AD8ArgumentVyACGtcAD0F8ProtocolRzr0_luD",
        "key.usr" : "s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF"
      }
    ]
  }
}, {
  "Sources\/Commandant\/HelpCommand.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 2179,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct HelpCommand&lt;ClientError&gt; : <Type usr=\"s:10Commandant15CommandProtocolP\">CommandProtocol<\/Type> where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 1088,
        "key.bodyoffset" : 615,
        "key.doc.column" : 15,
        "key.doc.comment" : "A basic implementation of a `help` command, using information available in a\n`CommandRegistry`.\n\nIf you want to use this command, initialize it with the registry, then add\nit to that same registry:\n\n\tlet commands: CommandRegistry<MyErrorType> = …\n\tlet helpCommand = HelpCommand(registry: commands)\n\tcommands.register(helpCommand)",
        "key.doc.declaration" : "public struct HelpCommand<ClientError> : CommandProtocol where ClientError : Error",
        "key.doc.discussion" : [
          {
            "Para" : "If you want to use this command, initialize it with the registry, then add it to that same registry:"
          },
          {
            "CodeListing" : ""
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/HelpCommand.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/HelpCommand.swift\" line=\"21\" column=\"15\"><Name>HelpCommand<\/Name><USR>s:10Commandant11HelpCommandV<\/USR><Declaration>public struct HelpCommand&lt;ClientError&gt; : CommandProtocol where ClientError : Error<\/Declaration><CommentParts><Abstract><Para>A basic implementation of a <codeVoice>help<\/codeVoice> command, using information available in a <codeVoice>CommandRegistry<\/codeVoice>.<\/Para><\/Abstract><Discussion><Para>If you want to use this command, initialize it with the registry, then add it to that same registry:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let commands: CommandRegistry<MyErrorType> = …]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let helpCommand = HelpCommand(registry: commands)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[commands.register(helpCommand)]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 21,
        "key.doc.name" : "HelpCommand",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 15,
            "key.offset" : 598
          }
        ],
        "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>HelpCommand<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:10Commandant15CommandProtocolP\">CommandProtocol<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CommandProtocol"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 1146,
        "key.name" : "HelpCommand",
        "key.namelength" : 11,
        "key.nameoffset" : 565,
        "key.offset" : 558,
        "key.parsed_declaration" : "public struct HelpCommand<ClientError: Error>: CommandProtocol",
        "key.parsed_scope.end" : 59,
        "key.parsed_scope.start" : 21,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let verb: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 6,
            "key.doc.declaration" : "var verb: String { get }",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"22\" column=\"6\"><Name>verb<\/Name><USR>s:10Commandant15CommandProtocolP4verbSSv<\/USR><Declaration>var verb: String { get }<\/Declaration><CommentParts><Abstract><Para>The action that users should specify to use this subcommand (e.g., <codeVoice>help<\/codeVoice>).<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 22,
            "key.doc.name" : "verb",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>verb<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 17,
            "key.name" : "verb",
            "key.namelength" : 4,
            "key.nameoffset" : 682,
            "key.offset" : 678,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant15CommandProtocolP4verbSSv"
              }
            ],
            "key.parsed_declaration" : "public let verb = \"help\"",
            "key.parsed_scope.end" : 24,
            "key.parsed_scope.start" : 24,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant15CommandProtocolP4verbSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let function: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 6,
            "key.doc.declaration" : "var function: String { get }",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"26\" column=\"6\"><Name>function<\/Name><USR>s:10Commandant15CommandProtocolP8functionSSv<\/USR><Declaration>var function: String { get }<\/Declaration><CommentParts><Abstract><Para>A human-readable, high-level description of what this command is used for.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 26,
            "key.doc.name" : "function",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>function<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 57,
            "key.name" : "function",
            "key.namelength" : 8,
            "key.nameoffset" : 708,
            "key.offset" : 704,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant15CommandProtocolP8functionSSv"
              }
            ],
            "key.parsed_declaration" : "public let function = \"Display general or command-specific help\"",
            "key.parsed_scope.end" : 25,
            "key.parsed_scope.start" : 25,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant15CommandProtocolP8functionSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private let registry: <Type usr=\"s:10Commandant15CommandRegistryC\">CommandRegistry<\/Type>&lt;<Type usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\">ClientError<\/Type>&gt;<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>registry<\/decl.name>: <decl.var.type><ref.class usr=\"s:10Commandant15CommandRegistryC\">CommandRegistry<\/ref.class>&lt;<ref.generic_type_param usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 42,
            "key.name" : "registry",
            "key.namelength" : 8,
            "key.nameoffset" : 776,
            "key.offset" : 772,
            "key.parsed_declaration" : "private let registry: CommandRegistry<ClientError>",
            "key.parsed_scope.end" : 27,
            "key.parsed_scope.start" : 27,
            "key.typename" : "CommandRegistry<ClientError>",
            "key.typeusr" : "_T010Commandant15CommandRegistryCyxGD",
            "key.usr" : "s:10Commandant11HelpCommandV8registry33_38F61CE0DF9D73793CEDF5D1C3140331LLAA0C8RegistryCyxGv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(registry: <Type usr=\"s:10Commandant15CommandRegistryC\">CommandRegistry<\/Type>&lt;<Type usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\">ClientError<\/Type>&gt;)<\/Declaration>",
            "key.bodylength" : 29,
            "key.bodyoffset" : 957,
            "key.doc.column" : 9,
            "key.doc.comment" : "Initializes the command to provide help from the given registry of\ncommands.",
            "key.doc.declaration" : "public init(registry: CommandRegistry<ClientError>)",
            "key.doc.file" : "Sources\/Commandant\/HelpCommand.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/HelpCommand.swift\" line=\"31\" column=\"9\"><Name>init(registry:)<\/Name><USR>s:10Commandant11HelpCommandVACyxGAA0C8RegistryCyxG8registry_tcfc<\/USR><Declaration>public init(registry: CommandRegistry&lt;ClientError&gt;)<\/Declaration><CommentParts><Abstract><Para>Initializes the command to provide help from the given registry of commands.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 31,
            "key.doc.name" : "init(registry:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>registry<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:10Commandant15CommandRegistryC\">CommandRegistry<\/ref.class>&lt;<ref.generic_type_param usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 76,
            "key.name" : "init(registry:)",
            "key.namelength" : 44,
            "key.nameoffset" : 911,
            "key.offset" : 911,
            "key.parsed_declaration" : "public init(registry: CommandRegistry<ClientError>)",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 31,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (HelpCommand<ClientError>.Type) -> (CommandRegistry<ClientError>) -> HelpCommand<ClientError>",
            "key.typeusr" : "_T010Commandant11HelpCommandVyxGAA0C8RegistryCyxG8registry_tcD",
            "key.usr" : "s:10Commandant11HelpCommandVACyxGAA0C8RegistryCyxG8registry_tcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func run(_ options: <Type usr=\"s:10Commandant11HelpCommandV7Optionsa\">Options<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;(), <Type usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\">ClientError<\/Type>&gt;<\/Declaration>",
            "key.bodylength" : 647,
            "key.bodyoffset" : 1054,
            "key.doc.column" : 7,
            "key.doc.declaration" : "func run(_ options: Options) -> Result<(), ClientError>",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"29\" column=\"7\"><Name>run(_:)<\/Name><USR>s:10Commandant15CommandProtocolP3run6ResultAEOyyt11ClientErrorQzG7OptionsQzF<\/USR><Declaration>func run(_ options: Options) -&gt; Result&lt;(), ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Runs this subcommand with the given options.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 29,
            "key.doc.name" : "run(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>run<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:10Commandant11HelpCommandV7Optionsa\">Options<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<tuple>()<\/tuple>, <ref.generic_type_param usr=\"s:10Commandant11HelpCommandV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 705,
            "key.name" : "run(_:)",
            "key.namelength" : 23,
            "key.nameoffset" : 1002,
            "key.offset" : 997,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant15CommandProtocolP3run6ResultAEOyyt11ClientErrorQzG7OptionsQzF"
              }
            ],
            "key.parsed_declaration" : "public func run(_ options: Options) -> Result<(), ClientError>",
            "key.parsed_scope.end" : 58,
            "key.parsed_scope.start" : 35,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (HelpCommand<ClientError>) -> (HelpOptions<ClientError>) -> Result<(), ClientError>",
            "key.typeusr" : "_T06ResultAAOyytxG10Commandant11HelpOptionsVyxGcD",
            "key.usr" : "s:10Commandant15CommandProtocolP3run6ResultAEOyyt11ClientErrorQzG7OptionsQzF"
          }
        ],
        "key.typename" : "HelpCommand<ClientError>.Type",
        "key.typeusr" : "_T010Commandant11HelpCommandVyxGmD",
        "key.usr" : "s:10Commandant11HelpCommandV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct HelpOptions&lt;ClientError&gt; : <Type usr=\"s:10Commandant15OptionsProtocolP\">OptionsProtocol<\/Type> where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 407,
        "key.bodyoffset" : 1770,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 15,
            "key.offset" : 1753
          }
        ],
        "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>HelpOptions<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant11HelpOptionsV11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:10Commandant15OptionsProtocolP\">OptionsProtocol<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "OptionsProtocol"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 465,
        "key.name" : "HelpOptions",
        "key.namelength" : 11,
        "key.nameoffset" : 1720,
        "key.offset" : 1713,
        "key.parsed_declaration" : "public struct HelpOptions<ClientError: Error>: OptionsProtocol",
        "key.parsed_scope.end" : 76,
        "key.parsed_scope.start" : 61,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let verb: <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>verb<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 17,
            "key.name" : "verb",
            "key.namelength" : 4,
            "key.nameoffset" : 1788,
            "key.offset" : 1784,
            "key.parsed_declaration" : "fileprivate let verb: String?",
            "key.parsed_scope.end" : 62,
            "key.parsed_scope.start" : 62,
            "key.typename" : "String?",
            "key.typeusr" : "_T0SSSgD",
            "key.usr" : "s:10Commandant11HelpOptionsV4verb33_38F61CE0DF9D73793CEDF5D1C3140331LLSSSgv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private init(verb: <Type usr=\"s:SS\">String<\/Type>?)<\/Declaration>",
            "key.bodylength" : 21,
            "key.bodyoffset" : 1834,
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>verb<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 43,
            "key.name" : "init(verb:)",
            "key.namelength" : 19,
            "key.nameoffset" : 1813,
            "key.offset" : 1813,
            "key.parsed_declaration" : "private init(verb: String?)",
            "key.parsed_scope.end" : 66,
            "key.parsed_scope.start" : 64,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (HelpOptions<ClientError>.Type) -> (String?) -> HelpOptions<ClientError>",
            "key.typeusr" : "_T010Commandant11HelpOptionsVyxGSSSg4verb_tcD",
            "key.usr" : "s:10Commandant11HelpOptionsVACyxGSSSg4verb_tc33_38F61CE0DF9D73793CEDF5D1C3140331Llfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private static func create(_ verb: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:10Commandant11HelpOptionsV\">HelpOptions<\/Type><\/Declaration>",
            "key.bodylength" : 54,
            "key.bodyoffset" : 1918,
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>create<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>verb<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:10Commandant11HelpOptionsV\">HelpOptions<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 106,
            "key.name" : "create(_:)",
            "key.namelength" : 22,
            "key.nameoffset" : 1879,
            "key.offset" : 1867,
            "key.parsed_declaration" : "private static func create(_ verb: String) -> HelpOptions",
            "key.parsed_scope.end" : 70,
            "key.parsed_scope.start" : 68,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (HelpOptions<ClientError>.Type) -> (String) -> HelpOptions<ClientError>",
            "key.typeusr" : "_T010Commandant11HelpOptionsVyxGSScD",
            "key.usr" : "s:10Commandant11HelpOptionsV6create33_38F61CE0DF9D73793CEDF5D1C3140331LLACyxGSSFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func evaluate(_ m: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant11HelpOptionsV\">HelpOptions<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant11HelpOptionsV11ClientErrorxmfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
            "key.bodylength" : 99,
            "key.bodyoffset" : 2076,
            "key.doc.column" : 14,
            "key.doc.declaration" : "static func evaluate(_ m: CommandMode) -> Result<Self, CommandantError<ClientError>>",
            "key.doc.discussion" : [
              {
                "Para" : "Returns the parsed options or a `UsageError`."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Option.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"44\" column=\"14\"><Name>evaluate(_:)<\/Name><USR>s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ<\/USR><Declaration>static func evaluate(_ m: CommandMode) -&gt; Result&lt;Self, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Evaluates this set of options in the given mode.<\/Para><\/Abstract><Discussion><Para>Returns the parsed options or a <codeVoice>UsageError<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 44,
            "key.doc.name" : "evaluate(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/HelpCommand.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>evaluate<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>m<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.struct usr=\"s:10Commandant11HelpOptionsV\">HelpOptions<\/ref.struct>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant11HelpOptionsV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 193,
            "key.name" : "evaluate(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 1995,
            "key.offset" : 1983,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ"
              }
            ],
            "key.parsed_declaration" : "public static func evaluate(_ m: CommandMode) -> Result<HelpOptions, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 75,
            "key.parsed_scope.start" : 72,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (HelpOptions<ClientError>.Type) -> (CommandMode) -> Result<HelpOptions<ClientError>, CommandantError<ClientError>>",
            "key.typeusr" : "_T06ResultAAOy10Commandant11HelpOptionsVyxGAC0B5ErrorOyxGGAC11CommandModeOcD",
            "key.usr" : "s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ"
          }
        ],
        "key.typename" : "HelpOptions<ClientError>.Type",
        "key.typeusr" : "_T010Commandant11HelpOptionsVyxGmD",
        "key.usr" : "s:10Commandant11HelpOptionsV"
      }
    ]
  }
}, {
  "Sources\/Commandant\/LinuxSupport.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 350,
    "key.offset" : 0,
    "key.substructure" : [

    ]
  }
}, {
  "Sources\/Commandant\/ArgumentProtocol.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1029,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol ArgumentProtocol<\/Declaration>",
        "key.bodylength" : 189,
        "key.bodyoffset" : 253,
        "key.doc.column" : 17,
        "key.doc.comment" : "Represents a value that can be converted from a command-line argument.",
        "key.doc.declaration" : "public protocol ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"10\" column=\"17\"><Name>ArgumentProtocol<\/Name><USR>s:10Commandant16ArgumentProtocolP<\/USR><Declaration>public protocol ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Represents a value that can be converted from a command-line argument.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 10,
        "key.doc.name" : "ArgumentProtocol",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>ArgumentProtocol<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 217,
        "key.name" : "ArgumentProtocol",
        "key.namelength" : 16,
        "key.nameoffset" : 235,
        "key.offset" : 226,
        "key.parsed_declaration" : "public protocol ArgumentProtocol",
        "key.parsed_scope.end" : 16,
        "key.parsed_scope.start" : 10,
        "key.runtime_name" : "_TtP8__main__16ArgumentProtocol_",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>static var name: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 322,
            "key.doc.column" : 13,
            "key.doc.comment" : "A human-readable name for this type.",
            "key.doc.declaration" : "static var name: String { get }",
            "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"12\" column=\"13\"><Name>name<\/Name><USR>s:10Commandant16ArgumentProtocolP4nameSSvZ<\/USR><Declaration>static var name: String { get }<\/Declaration><CommentParts><Abstract><Para>A human-readable name for this type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 12,
            "key.doc.name" : "name",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>name<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 31,
            "key.name" : "name",
            "key.namelength" : 4,
            "key.nameoffset" : 308,
            "key.offset" : 297,
            "key.parsed_declaration" : "static var name: String",
            "key.parsed_scope.end" : 12,
            "key.parsed_scope.start" : 12,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant16ArgumentProtocolP4nameSSvZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>static func from(string: <Type usr=\"s:SS\">String<\/Type>) -&gt; `Self`?<\/Declaration>",
            "key.doc.column" : 14,
            "key.doc.comment" : "Attempts to parse a value from the given command-line argument.",
            "key.doc.declaration" : "static func from(string: String) -> `Self`?",
            "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"15\" column=\"14\"><Name>from(string:)<\/Name><USR>s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ<\/USR><Declaration>static func from(string: String) -&gt; `Self`?<\/Declaration><CommentParts><Abstract><Para>Attempts to parse a value from the given command-line argument.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 15,
            "key.doc.name" : "from(string:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>string<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>`Self`?<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 41,
            "key.name" : "from(string:)",
            "key.namelength" : 20,
            "key.nameoffset" : 412,
            "key.offset" : 400,
            "key.parsed_declaration" : "static func from(string: String) -> Self?",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 15,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : ArgumentProtocol> (Self.Type) -> (String) -> Self?",
            "key.typeusr" : "_T0xSgSS6string_tcD",
            "key.usr" : "s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ"
          }
        ],
        "key.typename" : "ArgumentProtocol.Protocol",
        "key.typeusr" : "_T010Commandant16ArgumentProtocol_pmD",
        "key.usr" : "s:10Commandant16ArgumentProtocolP"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Int : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:s13SignedIntegerP\">SignedInteger<\/Type><\/Declaration>",
        "key.bodylength" : 113,
        "key.bodyoffset" : 478,
        "key.doc.declaration" : "struct Int : FixedWidthInteger, SignedInteger",
        "key.doc.discussion" : [
          {
            "Para" : "On 32-bit platforms, `Int` is the same size as `Int32`, and on 64-bit platforms, `Int` is the same size as `Int64`."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Int<\/Name><USR>s:Si<\/USR><Declaration>struct Int : FixedWidthInteger, SignedInteger<\/Declaration><CommentParts><Abstract><Para>A signed integer value type.<\/Para><\/Abstract><Discussion><Para>On 32-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int32<\/codeVoice>, and on 64-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int64<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Int",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 16,
            "key.offset" : 460
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedIntegerP\">SignedInteger<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "ArgumentProtocol"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 147,
        "key.modulename" : "Swift",
        "key.name" : "Int",
        "key.namelength" : 3,
        "key.nameoffset" : 455,
        "key.offset" : 445,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static let name: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.declaration" : "static var name: String { get }",
            "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"12\" column=\"13\"><Name>name<\/Name><USR>s:10Commandant16ArgumentProtocolP4nameSSvZ<\/USR><Declaration>static var name: String { get }<\/Declaration><CommentParts><Abstract><Para>A human-readable name for this type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 12,
            "key.doc.name" : "name",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>name<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.static>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 27,
            "key.name" : "name",
            "key.namelength" : 4,
            "key.nameoffset" : 498,
            "key.offset" : 487,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant16ArgumentProtocolP4nameSSvZ"
              }
            ],
            "key.parsed_declaration" : "public static let name = \"integer\"",
            "key.parsed_scope.end" : 19,
            "key.parsed_scope.start" : 19,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant16ArgumentProtocolP4nameSSvZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func from(string: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
            "key.bodylength" : 23,
            "key.bodyoffset" : 566,
            "key.doc.column" : 14,
            "key.doc.declaration" : "static func from(string: String) -> `Self`?",
            "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"15\" column=\"14\"><Name>from(string:)<\/Name><USR>s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ<\/USR><Declaration>static func from(string: String) -&gt; `Self`?<\/Declaration><CommentParts><Abstract><Para>Attempts to parse a value from the given command-line argument.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 15,
            "key.doc.name" : "from(string:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>string<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.static>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 66,
            "key.name" : "from(string:)",
            "key.namelength" : 20,
            "key.nameoffset" : 536,
            "key.offset" : 524,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ"
              }
            ],
            "key.parsed_declaration" : "public static func from(string: String) -> Int?",
            "key.parsed_scope.end" : 23,
            "key.parsed_scope.start" : 21,
            "key.substructure" : [

            ],
            "key.typename" : "(Int.Type) -> (String) -> Int?",
            "key.typeusr" : "_T0SiSgSS6string_tcD",
            "key.usr" : "s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ"
          }
        ],
        "key.typename" : "Int.Type",
        "key.typeusr" : "_T0SimD",
        "key.usr" : "s:Si"
      },
      {
        "key.annotated_decl" : "<Declaration>struct String<\/Declaration>",
        "key.bodylength" : 110,
        "key.bodyoffset" : 630,
        "key.doc.declaration" : "struct String",
        "key.doc.discussion" : [
          {
            "Para" : "A string is a series of characters, such as `\"Swift\"`, that forms a collection. Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient. The `String` type bridges with the Objective-C class `NSString` and offers interoperability with C functions that works with strings."
          },
          {
            "Para" : "You can create new strings using string literals or string interpolations. A  is a series of characters enclosed in quotes."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : " are string literals that evaluate any included expressions and convert the results to string form. String interpolations give you an easy way to build a string from multiple pieces. Wrap each expression in a string interpolation in parentheses, prefixed by a backslash."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Combine strings using the concatenation operator (`+`)."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Multiline string literals are enclosed in three double quotation marks (`\"\"\"`), with each delimiter on its own line. Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Strings always have value semantics. Modifying a copy of a string leaves the original unaffected."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Comparing strings for equality using the equal-to operator (`==`) or a relational operator (like `<` or `>=`) is always performed using Unicode canonical representation. As a result, different representations of a string compare as being equal."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The Unicode code point `\"\\u{301}\"` modifies the preceding character to include an accent, so `\"e\\u{301}\"` has the same canonical representation as the single Unicode code point `\"é\"`."
          },
          {
            "Para" : "Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in `Dictionary` instances and for other purposes."
          },
          {
            "Para" : "A string is a collection of , which approximate human-readable characters. Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode code points. These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift `Character` type. Each element of a string is represented by a `Character` instance."
          },
          {
            "Para" : "For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstName` constant is an instance of the `Substring` type—a type that represents substrings of a string while sharing the original string’s storage. Substrings present the same interface as strings."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s `unicodeScalars`, `utf16`, or `utf8` properties. Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding."
          },
          {
            "Para" : "To demonstrate the different views available for every string, the following examples use this `String` instance:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `cafe` string is a collection of the nine characters that are visible when the string is displayed."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A string’s `unicodeScalars` property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode. Each scalar value is represented by a `Unicode.Scalar` instance and is equivalent to a UTF-32 code unit."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `unicodeScalars` view’s elements comprise each Unicode scalar value in the `cafe` string. In particular, because `cafe` was declared using the decomposed form of the `\"é\"` character, `unicodeScalars` contains the code points for both the letter `\"e\"` (101) and the accent character `\"´\"` (769)."
          },
          {
            "Para" : "A string’s `utf16` property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a `UInt16` instance."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The elements of the `utf16` view are the code units for the string when encoded in UTF-16. These elements match those accessed through indexed `NSString` APIs."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A string’s `utf8` property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a `UInt8` instance."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The elements of the `utf8` view are the code units for the string when encoded in UTF-8. This representation matches the one used when `String` instances are passed to C APIs."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you need to know the length of a string, you must first consider what you’ll use the length for. Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding? A single string can have greatly differing lengths when measured by its different views."
          },
          {
            "Para" : "For example, an ASCII character like the capital letter  is represented by a single element in each of its four views. The Unicode scalar value of  is `65`, which is small enough to fit in a single code unit in both UTF-16 and UTF-8."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like `\"\\u{1F1F5}\"` and `\"\\u{1F1F7}\"`. Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit. As a result, each view of the string `\"🇵🇷\"` reports a different length."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To check whether a string is empty, use its `isEmpty` property instead of comparing the length of one of the views to `0`. Unlike with `isEmpty`, calculating a view’s `count` property requires iterating through the elements of the string."
          },
          {
            "Para" : "To find individual elements of a string, use the appropriate view for your task. For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Strings and their views share indices, so you can access the UTF-8 view of the `name` string using the same `firstSpace` index."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Note that an index into one view may not have an exact corresponding position in another view. For example, the `flag` string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8. The following code creates constants for the first and second positions in the `flag.utf8` view. Accessing the `utf8` view with these indices yields the first and second code UTF-8 units."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When used to access the elements of the `flag` string itself, however, the `secondCodeUnit` index does not correspond to the position of a specific character. Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset. In the case of `secondCodeUnit`, that character is still the flag itself."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s `samePosition(in:)` method or the `init(_:within:)` initializer."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer. This buffer can then be shared by different copies of a string. A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer. Therefore, the first in any sequence of mutating operations may cost O() time and space."
          },
          {
            "Para" : "When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage. String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations."
          },
          {
            "Para" : "Any `String` instance can be bridged to `NSString` using the type-cast operator (`as`), and any `String` instance that originates in Objective-C may use an `NSString` instance as its storage. Because any arbitrary subclass of `NSString` can become a `String` instance, there are no guarantees about representation or efficiency when a `String` instance is backed by `NSString` storage. Because `NSString` is immutable, it is just as though the storage was shared by a copy. The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O() time and space, where  is the length of the string’s encoded representation (or more, if the underlying `NSString` has unusual performance characteristics)."
          },
          {
            "Para" : "For more information about the Unicode terms used in this discussion, see the . In particular, this discussion mentions , , and ."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>String<\/Name><USR>s:SS<\/USR><Declaration>struct String<\/Declaration><CommentParts><Abstract><Para>A Unicode string value that is a collection of characters.<\/Para><\/Abstract><Discussion><Para>A string is a series of characters, such as <codeVoice>&quot;Swift&quot;<\/codeVoice>, that forms a collection. Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient. The <codeVoice>String<\/codeVoice> type bridges with the Objective-C class <codeVoice>NSString<\/codeVoice> and offers interoperability with C functions that works with strings.<\/Para><Para>You can create new strings using string literals or string interpolations. A <emphasis>string literal<\/emphasis> is a series of characters enclosed in quotes.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let greeting = \"Welcome!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para><emphasis>String interpolations<\/emphasis> are string literals that evaluate any included expressions and convert the results to string form. String interpolations give you an easy way to build a string from multiple pieces. Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let name = \"Rosa\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let personalizedGreeting = \"Welcome, \\(name)!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ personalizedGreeting == \"Welcome, Rosa!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let price = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let number = 3]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let cookiePrice = \"\\(number) cookies: $\\(price * number).\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ cookiePrice == \"3 cookies: $6.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Combine strings using the concatenation operator (<codeVoice>+<\/codeVoice>).<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let longerGreeting = greeting + \" We're glad you're here!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ longerGreeting == \"Welcome! We're glad you're here!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Multiline string literals are enclosed in three double quotation marks (<codeVoice>&quot;&quot;&quot;<\/codeVoice>), with each delimiter on its own line. Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let banner = \"\"\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[          __,]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[         (          o   \/) _\/_]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[          `.  , , , ,  \/\/  \/]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        (___)(_(_\/_(_ \/\/_ (__]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                     \/)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                    (\/]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        \"\"\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Modifying and Comparing Strings<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Strings always have value semantics. Modifying a copy of a string leaves the original unaffected.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var otherGreeting = greeting]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[otherGreeting += \" Have a nice time!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ otherGreeting == \"Welcome! Have a nice time!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(greeting)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Welcome!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Comparing strings for equality using the equal-to operator (<codeVoice>==<\/codeVoice>) or a relational operator (like <codeVoice>&lt;<\/codeVoice> or <codeVoice>&gt;=<\/codeVoice>) is always performed using Unicode canonical representation. As a result, different representations of a string compare as being equal.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let cafe1 = \"Cafe\\u{301}\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let cafe2 = \"Café\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cafe1 == cafe2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"true\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The Unicode code point <codeVoice>&quot;\\u{301}&quot;<\/codeVoice> modifies the preceding character to include an accent, so <codeVoice>&quot;e\\u{301}&quot;<\/codeVoice> has the same canonical representation as the single Unicode code point <codeVoice>&quot;é&quot;<\/codeVoice>.<\/Para><Para>Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in <codeVoice>Dictionary<\/codeVoice> instances and for other purposes.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing String Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>A string is a collection of <emphasis>extended grapheme clusters<\/emphasis>, which approximate human-readable characters. Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode code points. These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift <codeVoice>Character<\/codeVoice> type. Each element of a string is represented by a <codeVoice>Character<\/codeVoice> instance.<\/Para><Para>For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let name = \"Marie Curie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstSpace = name.index(of: \" \") ?? name.endIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstName = name[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ firstName == \"Marie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstName<\/codeVoice> constant is an instance of the <codeVoice>Substring<\/codeVoice> type—a type that represents substrings of a string while sharing the original string’s storage. Substrings present the same interface as strings.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(\"\\(name)'s first name has \\(firstName.count) letters.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Marie Curie's name has 5 letters.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing a String’s Unicode Representation<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s <codeVoice>unicodeScalars<\/codeVoice>, <codeVoice>utf16<\/codeVoice>, or <codeVoice>utf8<\/codeVoice> properties. Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding.<\/Para><Para>To demonstrate the different views available for every string, the following examples use this <codeVoice>String<\/codeVoice> instance:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let cafe = \"Cafe\\u{301} du 🌍\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cafe)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Café du 🌍\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>cafe<\/codeVoice> string is a collection of the nine characters that are visible when the string is displayed.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"9\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"C\", \"a\", \"f\", \"é\", \" \", \"d\", \"u\", \" \", \"🌍\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Unicode Scalar View<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A string’s <codeVoice>unicodeScalars<\/codeVoice> property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode. Each scalar value is represented by a <codeVoice>Unicode.Scalar<\/codeVoice> instance and is equivalent to a UTF-32 code unit.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.unicodeScalars.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"10\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe.unicodeScalars))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"C\", \"a\", \"f\", \"e\", \"\\u{0301}\", \" \", \"d\", \"u\", \" \", \"\\u{0001F30D}\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cafe.unicodeScalars.map { $0.value })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[67, 97, 102, 101, 769, 32, 100, 117, 32, 127757]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>unicodeScalars<\/codeVoice> view’s elements comprise each Unicode scalar value in the <codeVoice>cafe<\/codeVoice> string. In particular, because <codeVoice>cafe<\/codeVoice> was declared using the decomposed form of the <codeVoice>&quot;é&quot;<\/codeVoice> character, <codeVoice>unicodeScalars<\/codeVoice> contains the code points for both the letter <codeVoice>&quot;e&quot;<\/codeVoice> (101) and the accent character <codeVoice>&quot;´&quot;<\/codeVoice> (769).<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>UTF-16 View<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A string’s <codeVoice>utf16<\/codeVoice> property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a <codeVoice>UInt16<\/codeVoice> instance.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.utf16.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"11\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe.utf16))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[67, 97, 102, 101, 769, 32, 100, 117, 32, 55356, 57101]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The elements of the <codeVoice>utf16<\/codeVoice> view are the code units for the string when encoded in UTF-16. These elements match those accessed through indexed <codeVoice>NSString<\/codeVoice> APIs.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let nscafe = cafe as NSString]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(nscafe.length)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"11\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(nscafe.character(at: 3))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"101\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>UTF-8 View<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A string’s <codeVoice>utf8<\/codeVoice> property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a <codeVoice>UInt8<\/codeVoice> instance.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.utf8.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"14\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe.utf8))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[67, 97, 102, 101, 204, 129, 32, 100, 117, 32, 240, 159, 140, 141]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The elements of the <codeVoice>utf8<\/codeVoice> view are the code units for the string when encoded in UTF-8. This representation matches the one used when <codeVoice>String<\/codeVoice> instances are passed to C APIs.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let cLength = strlen(cafe)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cLength)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"14\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Measuring the Length of a String<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to know the length of a string, you must first consider what you’ll use the length for. Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding? A single string can have greatly differing lengths when measured by its different views.<\/Para><Para>For example, an ASCII character like the capital letter <emphasis>A<\/emphasis> is represented by a single element in each of its four views. The Unicode scalar value of <emphasis>A<\/emphasis> is <codeVoice>65<\/codeVoice>, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let capitalA = \"A\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.unicodeScalars.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.utf16.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.utf8.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like <codeVoice>&quot;\\u{1F1F5}&quot;<\/codeVoice> and <codeVoice>&quot;\\u{1F1F7}&quot;<\/codeVoice>. Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit. As a result, each view of the string <codeVoice>&quot;🇵🇷&quot;<\/codeVoice> reports a different length.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let flag = \"🇵🇷\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.unicodeScalars.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.utf16.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"4\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.utf8.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"8\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To check whether a string is empty, use its <codeVoice>isEmpty<\/codeVoice> property instead of comparing the length of one of the views to <codeVoice>0<\/codeVoice>. Unlike with <codeVoice>isEmpty<\/codeVoice>, calculating a view’s <codeVoice>count<\/codeVoice> property requires iterating through the elements of the string.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing String View Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>To find individual elements of a string, use the appropriate view for your task. For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let name = \"Marie Curie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstSpace = name.index(of: \" \") ?? name.endIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstName = name[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstName)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Marie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Strings and their views share indices, so you can access the UTF-8 view of the <codeVoice>name<\/codeVoice> string using the same <codeVoice>firstSpace<\/codeVoice> index.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(Array(name.utf8[..<firstSpace]))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[77, 97, 114, 105, 101]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Note that an index into one view may not have an exact corresponding position in another view. For example, the <codeVoice>flag<\/codeVoice> string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8. The following code creates constants for the first and second positions in the <codeVoice>flag.utf8<\/codeVoice> view. Accessing the <codeVoice>utf8<\/codeVoice> view with these indices yields the first and second code UTF-8 units.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstCodeUnit = flag.startIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let secondCodeUnit = flag.utf8.index(after: firstCodeUnit)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ flag.utf8[firstCodeUnit] == 240]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ flag.utf8[secondCodeUnit] == 159]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>When used to access the elements of the <codeVoice>flag<\/codeVoice> string itself, however, the <codeVoice>secondCodeUnit<\/codeVoice> index does not correspond to the position of a specific character. Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset. In the case of <codeVoice>secondCodeUnit<\/codeVoice>, that character is still the flag itself.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ flag[firstCodeUnit] == \"🇵🇷\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ flag[secondCodeUnit] == \"🇵🇷\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s <codeVoice>samePosition(in:)<\/codeVoice> method or the <codeVoice>init(_:within:)<\/codeVoice> initializer.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let exactIndex = secondCodeUnit.samePosition(in: flag) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(flag[exactIndex])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"No exact match for this position.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"No exact match for this position.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Performance Optimizations<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer. This buffer can then be shared by different copies of a string. A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer. Therefore, the first in any sequence of mutating operations may cost O(<emphasis>n<\/emphasis>) time and space.<\/Para><Para>When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage. String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Bridging Between String and NSString<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Any <codeVoice>String<\/codeVoice> instance can be bridged to <codeVoice>NSString<\/codeVoice> using the type-cast operator (<codeVoice>as<\/codeVoice>), and any <codeVoice>String<\/codeVoice> instance that originates in Objective-C may use an <codeVoice>NSString<\/codeVoice> instance as its storage. Because any arbitrary subclass of <codeVoice>NSString<\/codeVoice> can become a <codeVoice>String<\/codeVoice> instance, there are no guarantees about representation or efficiency when a <codeVoice>String<\/codeVoice> instance is backed by <codeVoice>NSString<\/codeVoice> storage. Because <codeVoice>NSString<\/codeVoice> is immutable, it is just as though the storage was shared by a copy. The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(<emphasis>n<\/emphasis>) time and space, where <emphasis>n<\/emphasis> is the length of the string’s encoded representation (or more, if the underlying <codeVoice>NSString<\/codeVoice> has unusual performance characteristics).<\/Para><Para>For more information about the Unicode terms used in this discussion, see the <Link href=\"http:\/\/www.unicode.org\/glossary\/\">Unicode.org glossary<\/Link>. In particular, this discussion mentions <Link href=\"http:\/\/www.unicode.org\/glossary\/#extended_grapheme_cluster\">extended grapheme clusters<\/Link>, <Link href=\"http:\/\/www.unicode.org\/glossary\/#unicode_scalar_value\">Unicode scalar values<\/Link>, and <Link href=\"http:\/\/www.unicode.org\/glossary\/#canonical_equivalent\">canonical equivalence<\/Link>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "String",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 16,
            "key.offset" : 612
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>String<\/decl.name><\/decl.struct>",
        "key.groupname" : "String",
        "key.inheritedtypes" : [
          {
            "key.name" : "ArgumentProtocol"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 147,
        "key.modulename" : "Swift",
        "key.name" : "String",
        "key.namelength" : 6,
        "key.nameoffset" : 604,
        "key.offset" : 594,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static let name: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.declaration" : "static var name: String { get }",
            "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"12\" column=\"13\"><Name>name<\/Name><USR>s:10Commandant16ArgumentProtocolP4nameSSvZ<\/USR><Declaration>static var name: String { get }<\/Declaration><CommentParts><Abstract><Para>A human-readable name for this type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 12,
            "key.doc.name" : "name",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>name<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.static>",
            "key.groupname" : "String",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 26,
            "key.name" : "name",
            "key.namelength" : 4,
            "key.nameoffset" : 650,
            "key.offset" : 639,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant16ArgumentProtocolP4nameSSvZ"
              }
            ],
            "key.parsed_declaration" : "public static let name = \"string\"",
            "key.parsed_scope.end" : 27,
            "key.parsed_scope.start" : 27,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant16ArgumentProtocolP4nameSSvZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func from(string: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
            "key.bodylength" : 18,
            "key.bodyoffset" : 720,
            "key.doc.column" : 14,
            "key.doc.declaration" : "static func from(string: String) -> `Self`?",
            "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"15\" column=\"14\"><Name>from(string:)<\/Name><USR>s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ<\/USR><Declaration>static func from(string: String) -&gt; `Self`?<\/Declaration><CommentParts><Abstract><Para>Attempts to parse a value from the given command-line argument.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 15,
            "key.doc.name" : "from(string:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>string<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.static>",
            "key.groupname" : "String",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 64,
            "key.name" : "from(string:)",
            "key.namelength" : 20,
            "key.nameoffset" : 687,
            "key.offset" : 675,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ"
              }
            ],
            "key.parsed_declaration" : "public static func from(string: String) -> String?",
            "key.parsed_scope.end" : 31,
            "key.parsed_scope.start" : 29,
            "key.substructure" : [

            ],
            "key.typename" : "(String.Type) -> (String) -> String?",
            "key.typeusr" : "_T0SSSgSS6string_tcD",
            "key.usr" : "s:10Commandant16ArgumentProtocolP4fromxSgSS6string_tFZ"
          }
        ],
        "key.typename" : "String.Type",
        "key.typeusr" : "_T0SSmD",
        "key.usr" : "s:SS"
      },
      {
        "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
        "key.length" : 25,
        "key.name" : "MARK: - migration support",
        "key.namelength" : 0,
        "key.nameoffset" : 0,
        "key.offset" : 746
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol ArgumentProtocol<\/Declaration>",
        "key.bodylength" : 121,
        "key.bodyoffset" : 906,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/ArgumentProtocol.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/ArgumentProtocol.swift\" line=\"10\" column=\"17\"><Name>ArgumentProtocol<\/Name><USR>s:10Commandant16ArgumentProtocolP<\/USR><Declaration>public protocol ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Represents a value that can be converted from a command-line argument.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 10,
        "key.doc.name" : "ArgumentProtocol",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/ArgumentProtocol.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>ArgumentProtocol<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 150,
        "key.name" : "ArgumentProtocol",
        "key.namelength" : 16,
        "key.nameoffset" : 888,
        "key.offset" : 878,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.available"
              }
            ],
            "key.bodylength" : 12,
            "key.bodyoffset" : 1013,
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 64,
            "key.name" : "fromString(_:)",
            "key.namelength" : 28,
            "key.nameoffset" : 974,
            "key.offset" : 962,
            "key.substructure" : [

            ]
          }
        ],
        "key.typename" : "ArgumentProtocol.Protocol",
        "key.typeusr" : "_T010Commandant16ArgumentProtocol_pmD",
        "key.usr" : "s:10Commandant16ArgumentProtocolP"
      }
    ]
  }
}, {
  "Sources\/Commandant\/Option.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 9533,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol OptionsProtocol<\/Declaration>",
        "key.bodylength" : 233,
        "key.bodyoffset" : 1435,
        "key.doc.column" : 17,
        "key.doc.comment" : "Represents a record of options for a command, which can be parsed from\na list of command-line arguments.\n\nThis is most helpful when used in conjunction with the `Option` and `Switch`\ntypes, and `<*>` and `<|` combinators.\n\nExample:\n\n\tstruct LogOptions: OptionsProtocol {\n\t\tlet verbosity: Int\n\t\tlet outputFilename: String\n\t\tlet shouldDelete: Bool\n\t\tlet logName: String\n\n\t\tstatic func create(_ verbosity: Int) -> (String) -> (Bool) -> (String) -> LogOptions {\n\t\t\treturn { outputFilename in { shouldDelete in { logName in LogOptions(verbosity: verbosity, outputFilename: outputFilename, shouldDelete: shouldDelete, logName: logName) } } }\n\t\t}\n\n\t\tstatic func evaluate(_ m: CommandMode) -> Result<LogOptions, CommandantError<YourErrorType>> {\n\t\t\treturn create\n\t\t\t\t<*> m <| Option(key: \"verbose\", defaultValue: 0, usage: \"the verbosity level with which to read the logs\")\n\t\t\t\t<*> m <| Option(key: \"outputFilename\", defaultValue: \"\", usage: \"a file to print output to, instead of stdout\")\n\t\t\t\t<*> m <| Switch(flag: \"d\", key: \"delete\", usage: \"delete the logs when finished\")\n\t\t\t\t<*> m <| Argument(usage: \"the log to read\")\n\t\t}\n\t}",
        "key.doc.declaration" : "public protocol OptionsProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "This is most helpful when used in conjunction with the `Option` and `Switch` types, and `<*>` and `<|` combinators."
          },
          {
            "Para" : "Example:"
          },
          {
            "CodeListing" : ""
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Option.swift\" line=\"38\" column=\"17\"><Name>OptionsProtocol<\/Name><USR>s:10Commandant15OptionsProtocolP<\/USR><Declaration>public protocol OptionsProtocol<\/Declaration><CommentParts><Abstract><Para>Represents a record of options for a command, which can be parsed from a list of command-line arguments.<\/Para><\/Abstract><Discussion><Para>This is most helpful when used in conjunction with the <codeVoice>Option<\/codeVoice> and <codeVoice>Switch<\/codeVoice> types, and <codeVoice>&lt;*&gt;<\/codeVoice> and <codeVoice>&lt;|<\/codeVoice> combinators.<\/Para><Para>Example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct LogOptions: OptionsProtocol {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\tlet verbosity: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\tlet outputFilename: String]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\tlet shouldDelete: Bool]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\tlet logName: String]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\tstatic func create(_ verbosity: Int) -> (String) -> (Bool) -> (String) -> LogOptions {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t\treturn { outputFilename in { shouldDelete in { logName in LogOptions(verbosity: verbosity, outputFilename: outputFilename, shouldDelete: shouldDelete, logName: logName) } } }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\tstatic func evaluate(_ m: CommandMode) -> Result<LogOptions, CommandantError<YourErrorType>> {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t\treturn create]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t\t\t<*> m <| Option(key: \"verbose\", defaultValue: 0, usage: \"the verbosity level with which to read the logs\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t\t\t<*> m <| Option(key: \"outputFilename\", defaultValue: \"\", usage: \"a file to print output to, instead of stdout\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t\t\t<*> m <| Switch(flag: \"d\", key: \"delete\", usage: \"delete the logs when finished\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t\t\t<*> m <| Argument(usage: \"the log to read\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\t}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 38,
        "key.doc.name" : "OptionsProtocol",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>OptionsProtocol<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 260,
        "key.name" : "OptionsProtocol",
        "key.namelength" : 15,
        "key.nameoffset" : 1418,
        "key.offset" : 1409,
        "key.parsed_declaration" : "public protocol OptionsProtocol",
        "key.parsed_scope.end" : 45,
        "key.parsed_scope.start" : 38,
        "key.runtime_name" : "_TtP8__main__15OptionsProtocol_",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>static func evaluate(_ m: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant15OptionsProtocolP4Selfxmfp\">Self<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant15OptionsProtocolP11ClientError\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
            "key.doc.column" : 14,
            "key.doc.comment" : "Evaluates this set of options in the given mode.\n\nReturns the parsed options or a `UsageError`.",
            "key.doc.declaration" : "static func evaluate(_ m: CommandMode) -> Result<Self, CommandantError<ClientError>>",
            "key.doc.discussion" : [
              {
                "Para" : "Returns the parsed options or a `UsageError`."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Option.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"44\" column=\"14\"><Name>evaluate(_:)<\/Name><USR>s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ<\/USR><Declaration>static func evaluate(_ m: CommandMode) -&gt; Result&lt;Self, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Evaluates this set of options in the given mode.<\/Para><\/Abstract><Discussion><Para>Returns the parsed options or a <codeVoice>UsageError<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 44,
            "key.doc.name" : "evaluate(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>evaluate<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>m<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant15OptionsProtocolP4Selfxmfp\">Self<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.associatedtype usr=\"s:10Commandant15OptionsProtocolP11ClientError\">ClientError<\/ref.associatedtype>&gt;&gt;<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 84,
            "key.name" : "evaluate(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 1595,
            "key.offset" : 1583,
            "key.parsed_declaration" : "static func evaluate(_ m: CommandMode) -> Result<Self, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 44,
            "key.parsed_scope.start" : 44,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : OptionsProtocol> (Self.Type) -> (CommandMode) -> Result<Self, CommandantError<Self.ClientError>>",
            "key.typeusr" : "_T06ResultAAOyx10Commandant0B5ErrorOy06ClientC0QzGGAC11CommandModeOcD",
            "key.usr" : "s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ"
          }
        ],
        "key.typename" : "OptionsProtocol.Protocol",
        "key.typeusr" : "_T010Commandant15OptionsProtocol_pmD",
        "key.usr" : "s:10Commandant15OptionsProtocolP"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct NoOptions&lt;ClientError&gt; : <Type usr=\"s:10Commandant15OptionsProtocolP\">OptionsProtocol<\/Type> where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 155,
        "key.bodyoffset" : 1779,
        "key.doc.column" : 15,
        "key.doc.comment" : "An `OptionsProtocol` that has no options.",
        "key.doc.declaration" : "public struct NoOptions<ClientError> : OptionsProtocol where ClientError : Error",
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Option.swift\" line=\"48\" column=\"15\"><Name>NoOptions<\/Name><USR>s:10Commandant9NoOptionsV<\/USR><Declaration>public struct NoOptions&lt;ClientError&gt; : OptionsProtocol where ClientError : Error<\/Declaration><CommentParts><Abstract><Para>An <codeVoice>OptionsProtocol<\/codeVoice> that has no options.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 48,
        "key.doc.name" : "NoOptions",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 15,
            "key.offset" : 1762
          }
        ],
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>NoOptions<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant9NoOptionsV11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:10Commandant15OptionsProtocolP\">OptionsProtocol<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "OptionsProtocol"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 211,
        "key.name" : "NoOptions",
        "key.namelength" : 9,
        "key.nameoffset" : 1731,
        "key.offset" : 1724,
        "key.parsed_declaration" : "public struct NoOptions<ClientError: Error>: OptionsProtocol",
        "key.parsed_scope.end" : 54,
        "key.parsed_scope.start" : 48,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init()<\/Declaration>",
            "key.bodylength" : 0,
            "key.bodyoffset" : 1796,
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 9,
            "key.name" : "init()",
            "key.namelength" : 6,
            "key.nameoffset" : 1788,
            "key.offset" : 1788,
            "key.parsed_declaration" : "public init()",
            "key.parsed_scope.end" : 49,
            "key.parsed_scope.start" : 49,
            "key.typename" : "<ClientError where ClientError : Error> (NoOptions<ClientError>.Type) -> () -> NoOptions<ClientError>",
            "key.typeusr" : "_T010Commandant9NoOptionsVyxGycD",
            "key.usr" : "s:10Commandant9NoOptionsVACyxGycfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func evaluate(_ m: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant9NoOptionsV\">NoOptions<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant9NoOptionsV11ClientErrorxmfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
            "key.bodylength" : 33,
            "key.bodyoffset" : 1899,
            "key.doc.column" : 14,
            "key.doc.declaration" : "static func evaluate(_ m: CommandMode) -> Result<Self, CommandantError<ClientError>>",
            "key.doc.discussion" : [
              {
                "Para" : "Returns the parsed options or a `UsageError`."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Option.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"44\" column=\"14\"><Name>evaluate(_:)<\/Name><USR>s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ<\/USR><Declaration>static func evaluate(_ m: CommandMode) -&gt; Result&lt;Self, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Evaluates this set of options in the given mode.<\/Para><\/Abstract><Discussion><Para>Returns the parsed options or a <codeVoice>UsageError<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 44,
            "key.doc.name" : "evaluate(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>evaluate<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>m<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.struct usr=\"s:10Commandant9NoOptionsV\">NoOptions<\/ref.struct>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant9NoOptionsV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 125,
            "key.name" : "evaluate(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 1820,
            "key.offset" : 1808,
            "key.overrides" : [
              {
                "key.usr" : "s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ"
              }
            ],
            "key.parsed_declaration" : "public static func evaluate(_ m: CommandMode) -> Result<NoOptions, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 53,
            "key.parsed_scope.start" : 51,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (NoOptions<ClientError>.Type) -> (CommandMode) -> Result<NoOptions<ClientError>, CommandantError<ClientError>>",
            "key.typeusr" : "_T06ResultAAOy10Commandant9NoOptionsVyxGAC0B5ErrorOyxGGAC11CommandModeOcD",
            "key.usr" : "s:10Commandant15OptionsProtocolP8evaluate6ResultAEOyxAA0A5ErrorOy06ClientF0QzGGAA11CommandModeOFZ"
          }
        ],
        "key.typename" : "NoOptions<ClientError>.Type",
        "key.typeusr" : "_T010Commandant9NoOptionsVyxGmD",
        "key.usr" : "s:10Commandant9NoOptionsV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Option&lt;T&gt;<\/Declaration>",
        "key.bodylength" : 786,
        "key.bodyoffset" : 2028,
        "key.doc.column" : 15,
        "key.doc.comment" : "Describes an option that can be provided on the command line.",
        "key.doc.declaration" : "public struct Option<T>",
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Option.swift\" line=\"57\" column=\"15\"><Name>Option<\/Name><USR>s:10Commandant6OptionV<\/USR><Declaration>public struct Option&lt;T&gt;<\/Declaration><CommentParts><Abstract><Para>Describes an option that can be provided on the command line.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 57,
        "key.doc.name" : "Option",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Option<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant6OptionV1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 805,
        "key.name" : "Option",
        "key.namelength" : 6,
        "key.nameoffset" : 2017,
        "key.offset" : 2010,
        "key.parsed_declaration" : "public struct Option<T>",
        "key.parsed_scope.end" : 79,
        "key.parsed_scope.start" : 57,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let key: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "The key that controls this option. For example, a key of `verbose` would\nbe used for a `--verbose` option.",
            "key.doc.declaration" : "public let key: String",
            "key.doc.file" : "Sources\/Commandant\/Option.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Option.swift\" line=\"60\" column=\"13\"><Name>key<\/Name><USR>s:10Commandant6OptionV3keySSv<\/USR><Declaration>public let key: String<\/Declaration><CommentParts><Abstract><Para>The key that controls this option. For example, a key of <codeVoice>verbose<\/codeVoice> would be used for a <codeVoice>--verbose<\/codeVoice> option.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 60,
            "key.doc.name" : "key",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>key<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 15,
            "key.name" : "key",
            "key.namelength" : 3,
            "key.nameoffset" : 2158,
            "key.offset" : 2154,
            "key.parsed_declaration" : "public let key: String",
            "key.parsed_scope.end" : 60,
            "key.parsed_scope.start" : 60,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant6OptionV3keySSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let defaultValue: <Type usr=\"s:10Commandant6OptionV1Txmfp\">T<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "The default value for this option. This is the value that will be used\nif the option is never explicitly specified on the command line.",
            "key.doc.declaration" : "public let defaultValue: T",
            "key.doc.file" : "Sources\/Commandant\/Option.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Option.swift\" line=\"64\" column=\"13\"><Name>defaultValue<\/Name><USR>s:10Commandant6OptionV12defaultValuexv<\/USR><Declaration>public let defaultValue: T<\/Declaration><CommentParts><Abstract><Para>The default value for this option. This is the value that will be used if the option is never explicitly specified on the command line.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 64,
            "key.doc.name" : "defaultValue",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>defaultValue<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:10Commandant6OptionV1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 19,
            "key.name" : "defaultValue",
            "key.namelength" : 12,
            "key.nameoffset" : 2329,
            "key.offset" : 2325,
            "key.parsed_declaration" : "public let defaultValue: T",
            "key.parsed_scope.end" : 64,
            "key.parsed_scope.start" : 64,
            "key.typename" : "T",
            "key.typeusr" : "_T0xD",
            "key.usr" : "s:10Commandant6OptionV12defaultValuexv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let usage: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "A human-readable string describing the purpose of this option. This will\nbe shown in help messages.\n\nFor boolean operations, this should describe the effect of _not_ using\nthe default value (i.e., what will happen if you disable\/enable the flag\ndifferently from the default).",
            "key.doc.declaration" : "public let usage: String",
            "key.doc.discussion" : [
              {
                "Para" : "For boolean operations, this should describe the effect of  using the default value (i.e., what will happen if you disable\/enable the flag differently from the default)."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Option.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Option.swift\" line=\"72\" column=\"13\"><Name>usage<\/Name><USR>s:10Commandant6OptionV5usageSSv<\/USR><Declaration>public let usage: String<\/Declaration><CommentParts><Abstract><Para>A human-readable string describing the purpose of this option. This will be shown in help messages.<\/Para><\/Abstract><Discussion><Para>For boolean operations, this should describe the effect of <emphasis>not<\/emphasis> using the default value (i.e., what will happen if you disable\/enable the flag differently from the default).<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 72,
            "key.doc.name" : "usage",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>usage<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 17,
            "key.name" : "usage",
            "key.namelength" : 5,
            "key.nameoffset" : 2663,
            "key.offset" : 2659,
            "key.parsed_declaration" : "public let usage: String",
            "key.parsed_scope.end" : 72,
            "key.parsed_scope.start" : 72,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant6OptionV5usageSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(key: <Type usr=\"s:SS\">String<\/Type>, defaultValue: <Type usr=\"s:10Commandant6OptionV1Txmfp\">T<\/Type>, usage: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
            "key.bodylength" : 75,
            "key.bodyoffset" : 2737,
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>key<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>defaultValue<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant6OptionV1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>usage<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 127,
            "key.name" : "init(key:defaultValue:usage:)",
            "key.namelength" : 49,
            "key.nameoffset" : 2686,
            "key.offset" : 2686,
            "key.parsed_declaration" : "public init(key: String, defaultValue: T, usage: String)",
            "key.parsed_scope.end" : 78,
            "key.parsed_scope.start" : 74,
            "key.substructure" : [

            ],
            "key.typename" : "<T> (Option<T>.Type) -> (String, T, String) -> Option<T>",
            "key.typeusr" : "_T010Commandant6OptionVyxGSS3key_x12defaultValueSS5usagetcD",
            "key.usr" : "s:10Commandant6OptionVACyxGSS3key_x12defaultValueSS5usagetcfc"
          }
        ],
        "key.typename" : "Option<T>.Type",
        "key.typeusr" : "_T010Commandant6OptionVyxGmD",
        "key.usr" : "s:10Commandant6OptionV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Option&lt;T&gt;<\/Declaration>",
        "key.bodylength" : 58,
        "key.bodyoffset" : 2860,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Option<T>",
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Option.swift\" line=\"57\" column=\"15\"><Name>Option<\/Name><USR>s:10Commandant6OptionV<\/USR><Declaration>public struct Option&lt;T&gt;<\/Declaration><CommentParts><Abstract><Para>Describes an option that can be provided on the command line.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 57,
        "key.doc.name" : "Option",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 2835
          }
        ],
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Option<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant6OptionV1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;<\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 102,
        "key.name" : "Option",
        "key.namelength" : 6,
        "key.nameoffset" : 2827,
        "key.offset" : 2817,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 22,
            "key.bodyoffset" : 2894,
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Instead of accessing this property directly, convert an instance of any type to a string by using the `String(describing:)` initializer. For example:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSv<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Instead of accessing this property directly, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 48,
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 2873,
            "key.offset" : 2869,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
              }
            ],
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 84,
            "key.parsed_scope.start" : 82,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
          }
        ],
        "key.typename" : "Option<T>.Type",
        "key.typeusr" : "_T010Commandant6OptionVyxGmD",
        "key.usr" : "s:10Commandant6OptionV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;*&gt;&lt;T, U, ClientError&gt;(f: (<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1UL_q_mfp\">U<\/Type>, value: <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/Type>&gt;&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
        "key.bodylength" : 22,
        "key.bodyoffset" : 4538,
        "key.doc.column" : 13,
        "key.doc.comment" : "Applies `f` to the value in the given result.\n\nIn the context of command-line option parsing, this is used to chain\ntogether the parsing of multiple arguments. See OptionsProtocol for an example.",
        "key.doc.declaration" : "public func <*><T, U, ClientError>(f: (T) -> U, value: Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
        "key.doc.discussion" : [
          {
            "Para" : "In the context of command-line option parsing, this is used to chain together the parsing of multiple arguments. See OptionsProtocol for an example."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"121\" column=\"13\"><Name>&lt;*&gt;(_:_:)<\/Name><USR>s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF<\/USR><Declaration>public func &lt;*&gt;&lt;T, U, ClientError&gt;(f: (T) -&gt; U, value: Result&lt;T, CommandantError&lt;ClientError&gt;&gt;) -&gt; Result&lt;U, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Applies <codeVoice>f<\/codeVoice> to the value in the given result.<\/Para><\/Abstract><Discussion><Para>In the context of command-line option parsing, this is used to chain together the parsing of multiple arguments. See OptionsProtocol for an example.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 121,
        "key.doc.name" : "<*>(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;*&gt;<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF06ClientD0L_q0_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1TL_xmfp\">T<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1UL_q_mfp\">U<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 157,
        "key.name" : "<*>(_:_:)",
        "key.namelength" : 84,
        "key.nameoffset" : 4409,
        "key.offset" : 4404,
        "key.parsed_declaration" : "public func <*> <T, U, ClientError>(f: (T) -> U, value: Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 123,
        "key.parsed_scope.start" : 121,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF\">&lt;*&gt;&lt;T, U, ClientError&gt;(_: Result&lt;((T) -&gt; U), CommandantError&lt;ClientError&gt;&gt;, _: Result&lt;T, CommandantError&lt;ClientError&gt;&gt;) -&gt; Result&lt;U, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 4414,
            "key.parsed_declaration" : "public func <*> <T, U, ClientError>(f: (T) -> U, value: Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 121,
            "key.parsed_scope.start" : 121,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, U, ClientError> ((T) -> U, Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOyq_10Commandant0B5ErrorOyq0_GGq_xc_AByxAFGtcr1_luD",
        "key.usr" : "s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;*&gt;&lt;T, U, ClientError&gt;(f: <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;((<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1UL_q_mfp\">U<\/Type>), <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/Type>&gt;&gt;, value: <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/Type>&gt;&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
        "key.bodylength" : 346,
        "key.bodyoffset" : 4971,
        "key.doc.column" : 13,
        "key.doc.comment" : "Applies the function in `f` to the value in the given result.\n\nIn the context of command-line option parsing, this is used to chain\ntogether the parsing of multiple arguments. See OptionsProtocol for an example.",
        "key.doc.declaration" : "public func <*><T, U, ClientError>(f: Result<((T) -> U), CommandantError<ClientError>>, value: Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
        "key.doc.discussion" : [
          {
            "Para" : "In the context of command-line option parsing, this is used to chain together the parsing of multiple arguments. See OptionsProtocol for an example."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"129\" column=\"13\"><Name>&lt;*&gt;(_:_:)<\/Name><USR>s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF<\/USR><Declaration>public func &lt;*&gt;&lt;T, U, ClientError&gt;(f: Result&lt;((T) -&gt; U), CommandantError&lt;ClientError&gt;&gt;, value: Result&lt;T, CommandantError&lt;ClientError&gt;&gt;) -&gt; Result&lt;U, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Applies the function in <codeVoice>f<\/codeVoice> to the value in the given result.<\/Para><\/Abstract><Discussion><Para>In the context of command-line option parsing, this is used to chain together the parsing of multiple arguments. See OptionsProtocol for an example.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 129,
        "key.doc.name" : "<*>(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;*&gt;<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<tuple>(<tuple.element><tuple.element.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1TL_xmfp\">T<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1UL_q_mfp\">U<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF06ClientD0L_q0_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 521,
        "key.name" : "<*>(_:_:)",
        "key.namelength" : 124,
        "key.nameoffset" : 4802,
        "key.offset" : 4797,
        "key.parsed_declaration" : "public func <*> <T, U, ClientError>(f: Result<((T) -> U), CommandantError<ClientError>>, value: Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 144,
        "key.parsed_scope.start" : 129,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGq_xc_ADyxAGGtr1_lF\">&lt;*&gt;&lt;T, U, ClientError&gt;(_: (T) -&gt; U, _: Result&lt;T, CommandantError&lt;ClientError&gt;&gt;) -&gt; Result&lt;U, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 4807,
            "key.parsed_declaration" : "public func <*> <T, U, ClientError>(f: Result<((T) -> U), CommandantError<ClientError>>, value: Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 129,
            "key.parsed_scope.start" : 129,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, U, ClientError> (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>) -> Result<U, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOyq_10Commandant0B5ErrorOyq0_GGAByq_xcAFG_AByxAFGtcr1_luD",
        "key.usr" : "s:10Commandant3lmgoi6ResultACOyq_AA0A5ErrorOyq0_GGADyq_xcAGG_ADyxAGGtr1_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 225,
        "key.bodyoffset" : 5634,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given option in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, the option's `defaultValue` is used.",
        "key.doc.declaration" : "public func <|<T, ClientError>(mode: CommandMode, option: Option<T>) -> Result<T, CommandantError<ClientError>> where T : ArgumentProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, the option’s `defaultValue` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"150\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: CommandMode, option: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Evaluates the given option in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, the option’s <codeVoice>defaultValue<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 150,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 351,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 75,
        "key.nameoffset" : 5514,
        "key.offset" : 5509,
        "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<T>) -> Result<T, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 155,
        "key.parsed_scope.start" : 150,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 5518,
            "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<T>) -> Result<T, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 150,
            "key.parsed_scope.start" : 150,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (CommandMode, Option<T>) -> Result<T, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOyx10Commandant0B5ErrorOyq_GGAC11CommandModeO_AC6OptionVyxGtcAC16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>?&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>?, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 827,
        "key.bodyoffset" : 6156,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given option in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, `nil` is used.",
        "key.doc.declaration" : "public func <|<T, ClientError>(mode: CommandMode, option: Option<T?>) -> Result<T?, CommandantError<ClientError>> where T : ArgumentProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, `nil` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"161\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: CommandMode, option: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Evaluates the given option in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, <codeVoice>nil<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 161,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>?&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>?, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 955,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 76,
        "key.nameoffset" : 6034,
        "key.offset" : 6029,
        "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<T?>) -> Result<T?, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 194,
        "key.parsed_scope.start" : 161,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 6038,
            "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<T?>) -> Result<T?, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 161,
            "key.parsed_scope.start" : 161,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (CommandMode, Option<T?>) -> Result<T?, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOyxSg10Commandant0B5ErrorOyq_GGAD11CommandModeO_AD6OptionVyACGtcAD16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;[<Type usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>]&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;[<Type usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>], <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 227,
        "key.bodyoffset" : 7304,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given option in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, the option's `defaultValue` is used.",
        "key.doc.declaration" : "public func <|<T, ClientError>(mode: CommandMode, option: Option<[T]>) -> Result<[T], CommandantError<ClientError>> where T : ArgumentProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, the option’s `defaultValue` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"200\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: CommandMode, option: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Evaluates the given option in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, the option’s <codeVoice>defaultValue<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 200,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;[<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;[<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>], <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 357,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 77,
        "key.nameoffset" : 7180,
        "key.offset" : 7175,
        "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<[T]>) -> Result<[T], CommandantError<ClientError>>",
        "key.parsed_scope.end" : 205,
        "key.parsed_scope.start" : 200,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 7184,
            "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<[T]>) -> Result<[T], CommandantError<ClientError>>",
            "key.parsed_scope.end" : 200,
            "key.parsed_scope.start" : 200,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (CommandMode, Option<[T]>) -> Result<[T], CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOySayxG10Commandant0B5ErrorOyq_GGAD11CommandModeO_AD6OptionVyACGtcAD16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;[<Type usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>]?&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;[<Type usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>]?, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 996,
        "key.bodyoffset" : 7832,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given option in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, `nil` is used.",
        "key.doc.declaration" : "public func <|<T, ClientError>(mode: CommandMode, option: Option<[T]?>) -> Result<[T]?, CommandantError<ClientError>> where T : ArgumentProtocol",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, `nil` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"211\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>public func &lt;|&lt;T, ClientError&gt;(mode: CommandMode, option: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Evaluates the given option in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, <codeVoice>nil<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 211,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;[<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]?&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;[<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]?, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1128,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 78,
        "key.nameoffset" : 7706,
        "key.offset" : 7701,
        "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<[T]?>) -> Result<[T]?, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 249,
        "key.parsed_scope.start" : 211,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.offset" : 7710,
            "key.parsed_declaration" : "public func <| <T: ArgumentProtocol, ClientError>(mode: CommandMode, option: Option<[T]?>) -> Result<[T]?, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 211,
            "key.parsed_scope.start" : 211,
            "key.typename" : "T.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF1TL_xmfp"
          }
        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (CommandMode, Option<[T]?>) -> Result<[T]?, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOySayxGSg10Commandant0B5ErrorOyq_GGAE11CommandModeO_AE6OptionVyADGtcAE16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:Sb\">Bool<\/Type>&gt;) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:Sb\">Bool<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF06ClientD0L_xmfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
        "key.bodylength" : 261,
        "key.bodyoffset" : 9138,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given boolean option in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, the option's `defaultValue` is used.",
        "key.doc.declaration" : "public func <|<ClientError>(mode: CommandMode, option: Option<Bool>) -> Result<Bool, CommandantError<ClientError>>",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, the option’s `defaultValue` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Option.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Option.swift\" line=\"255\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF<\/USR><Declaration>public func &lt;|&lt;ClientError&gt;(mode: CommandMode, option: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Evaluates the given boolean option in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, the option’s <codeVoice>defaultValue<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 255,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Option.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF06ClientD0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.struct usr=\"s:Sb\">Bool<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.struct usr=\"s:Sb\">Bool<\/ref.struct>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF06ClientD0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 372,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 57,
        "key.nameoffset" : 9033,
        "key.offset" : 9028,
        "key.parsed_declaration" : "public func <| <ClientError>(mode: CommandMode, option: Option<Bool>) -> Result<Bool, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 267,
        "key.parsed_scope.start" : 255,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>ClientError<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Option.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 11,
            "key.name" : "ClientError",
            "key.offset" : 9037,
            "key.parsed_declaration" : "public func <| <ClientError>(mode: CommandMode, option: Option<Bool>) -> Result<Bool, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 255,
            "key.parsed_scope.start" : 255,
            "key.typename" : "ClientError.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF06ClientD0L_xmfp"
          }
        ],
        "key.typename" : "<ClientError> (CommandMode, Option<Bool>) -> Result<Bool, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOySb10Commandant0B5ErrorOyxGGAC11CommandModeO_AC6OptionVySbGtcluD",
        "key.usr" : "s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF"
      },
      {
        "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
        "key.length" : 25,
        "key.name" : "MARK: - migration support",
        "key.namelength" : 0,
        "key.nameoffset" : 0,
        "key.offset" : 9405
      }
    ]
  }
}, {
  "Sources\/Commandant\/Extensions.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 521,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>struct String<\/Declaration>",
        "key.bodylength" : 337,
        "key.bodyoffset" : 182,
        "key.doc.declaration" : "struct String",
        "key.doc.discussion" : [
          {
            "Para" : "A string is a series of characters, such as `\"Swift\"`, that forms a collection. Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient. The `String` type bridges with the Objective-C class `NSString` and offers interoperability with C functions that works with strings."
          },
          {
            "Para" : "You can create new strings using string literals or string interpolations. A  is a series of characters enclosed in quotes."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : " are string literals that evaluate any included expressions and convert the results to string form. String interpolations give you an easy way to build a string from multiple pieces. Wrap each expression in a string interpolation in parentheses, prefixed by a backslash."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Combine strings using the concatenation operator (`+`)."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Multiline string literals are enclosed in three double quotation marks (`\"\"\"`), with each delimiter on its own line. Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Strings always have value semantics. Modifying a copy of a string leaves the original unaffected."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Comparing strings for equality using the equal-to operator (`==`) or a relational operator (like `<` or `>=`) is always performed using Unicode canonical representation. As a result, different representations of a string compare as being equal."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The Unicode code point `\"\\u{301}\"` modifies the preceding character to include an accent, so `\"e\\u{301}\"` has the same canonical representation as the single Unicode code point `\"é\"`."
          },
          {
            "Para" : "Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in `Dictionary` instances and for other purposes."
          },
          {
            "Para" : "A string is a collection of , which approximate human-readable characters. Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode code points. These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift `Character` type. Each element of a string is represented by a `Character` instance."
          },
          {
            "Para" : "For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstName` constant is an instance of the `Substring` type—a type that represents substrings of a string while sharing the original string’s storage. Substrings present the same interface as strings."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s `unicodeScalars`, `utf16`, or `utf8` properties. Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding."
          },
          {
            "Para" : "To demonstrate the different views available for every string, the following examples use this `String` instance:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `cafe` string is a collection of the nine characters that are visible when the string is displayed."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A string’s `unicodeScalars` property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode. Each scalar value is represented by a `Unicode.Scalar` instance and is equivalent to a UTF-32 code unit."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `unicodeScalars` view’s elements comprise each Unicode scalar value in the `cafe` string. In particular, because `cafe` was declared using the decomposed form of the `\"é\"` character, `unicodeScalars` contains the code points for both the letter `\"e\"` (101) and the accent character `\"´\"` (769)."
          },
          {
            "Para" : "A string’s `utf16` property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a `UInt16` instance."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The elements of the `utf16` view are the code units for the string when encoded in UTF-16. These elements match those accessed through indexed `NSString` APIs."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A string’s `utf8` property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a `UInt8` instance."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The elements of the `utf8` view are the code units for the string when encoded in UTF-8. This representation matches the one used when `String` instances are passed to C APIs."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you need to know the length of a string, you must first consider what you’ll use the length for. Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding? A single string can have greatly differing lengths when measured by its different views."
          },
          {
            "Para" : "For example, an ASCII character like the capital letter  is represented by a single element in each of its four views. The Unicode scalar value of  is `65`, which is small enough to fit in a single code unit in both UTF-16 and UTF-8."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like `\"\\u{1F1F5}\"` and `\"\\u{1F1F7}\"`. Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit. As a result, each view of the string `\"🇵🇷\"` reports a different length."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To check whether a string is empty, use its `isEmpty` property instead of comparing the length of one of the views to `0`. Unlike with `isEmpty`, calculating a view’s `count` property requires iterating through the elements of the string."
          },
          {
            "Para" : "To find individual elements of a string, use the appropriate view for your task. For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Strings and their views share indices, so you can access the UTF-8 view of the `name` string using the same `firstSpace` index."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Note that an index into one view may not have an exact corresponding position in another view. For example, the `flag` string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8. The following code creates constants for the first and second positions in the `flag.utf8` view. Accessing the `utf8` view with these indices yields the first and second code UTF-8 units."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When used to access the elements of the `flag` string itself, however, the `secondCodeUnit` index does not correspond to the position of a specific character. Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset. In the case of `secondCodeUnit`, that character is still the flag itself."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s `samePosition(in:)` method or the `init(_:within:)` initializer."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer. This buffer can then be shared by different copies of a string. A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer. Therefore, the first in any sequence of mutating operations may cost O() time and space."
          },
          {
            "Para" : "When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage. String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations."
          },
          {
            "Para" : "Any `String` instance can be bridged to `NSString` using the type-cast operator (`as`), and any `String` instance that originates in Objective-C may use an `NSString` instance as its storage. Because any arbitrary subclass of `NSString` can become a `String` instance, there are no guarantees about representation or efficiency when a `String` instance is backed by `NSString` storage. Because `NSString` is immutable, it is just as though the storage was shared by a copy. The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O() time and space, where  is the length of the string’s encoded representation (or more, if the underlying `NSString` has unusual performance characteristics)."
          },
          {
            "Para" : "For more information about the Unicode terms used in this discussion, see the . In particular, this discussion mentions , , and ."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>String<\/Name><USR>s:SS<\/USR><Declaration>struct String<\/Declaration><CommentParts><Abstract><Para>A Unicode string value that is a collection of characters.<\/Para><\/Abstract><Discussion><Para>A string is a series of characters, such as <codeVoice>&quot;Swift&quot;<\/codeVoice>, that forms a collection. Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient. The <codeVoice>String<\/codeVoice> type bridges with the Objective-C class <codeVoice>NSString<\/codeVoice> and offers interoperability with C functions that works with strings.<\/Para><Para>You can create new strings using string literals or string interpolations. A <emphasis>string literal<\/emphasis> is a series of characters enclosed in quotes.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let greeting = \"Welcome!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para><emphasis>String interpolations<\/emphasis> are string literals that evaluate any included expressions and convert the results to string form. String interpolations give you an easy way to build a string from multiple pieces. Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let name = \"Rosa\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let personalizedGreeting = \"Welcome, \\(name)!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ personalizedGreeting == \"Welcome, Rosa!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let price = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let number = 3]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let cookiePrice = \"\\(number) cookies: $\\(price * number).\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ cookiePrice == \"3 cookies: $6.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Combine strings using the concatenation operator (<codeVoice>+<\/codeVoice>).<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let longerGreeting = greeting + \" We're glad you're here!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ longerGreeting == \"Welcome! We're glad you're here!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Multiline string literals are enclosed in three double quotation marks (<codeVoice>&quot;&quot;&quot;<\/codeVoice>), with each delimiter on its own line. Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let banner = \"\"\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[          __,]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[         (          o   \/) _\/_]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[          `.  , , , ,  \/\/  \/]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        (___)(_(_\/_(_ \/\/_ (__]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                     \/)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[                    (\/]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        \"\"\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Modifying and Comparing Strings<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Strings always have value semantics. Modifying a copy of a string leaves the original unaffected.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var otherGreeting = greeting]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[otherGreeting += \" Have a nice time!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ otherGreeting == \"Welcome! Have a nice time!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(greeting)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Welcome!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Comparing strings for equality using the equal-to operator (<codeVoice>==<\/codeVoice>) or a relational operator (like <codeVoice>&lt;<\/codeVoice> or <codeVoice>&gt;=<\/codeVoice>) is always performed using Unicode canonical representation. As a result, different representations of a string compare as being equal.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let cafe1 = \"Cafe\\u{301}\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let cafe2 = \"Café\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cafe1 == cafe2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"true\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The Unicode code point <codeVoice>&quot;\\u{301}&quot;<\/codeVoice> modifies the preceding character to include an accent, so <codeVoice>&quot;e\\u{301}&quot;<\/codeVoice> has the same canonical representation as the single Unicode code point <codeVoice>&quot;é&quot;<\/codeVoice>.<\/Para><Para>Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in <codeVoice>Dictionary<\/codeVoice> instances and for other purposes.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing String Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>A string is a collection of <emphasis>extended grapheme clusters<\/emphasis>, which approximate human-readable characters. Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode code points. These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift <codeVoice>Character<\/codeVoice> type. Each element of a string is represented by a <codeVoice>Character<\/codeVoice> instance.<\/Para><Para>For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let name = \"Marie Curie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstSpace = name.index(of: \" \") ?? name.endIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstName = name[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ firstName == \"Marie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstName<\/codeVoice> constant is an instance of the <codeVoice>Substring<\/codeVoice> type—a type that represents substrings of a string while sharing the original string’s storage. Substrings present the same interface as strings.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(\"\\(name)'s first name has \\(firstName.count) letters.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Marie Curie's name has 5 letters.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing a String’s Unicode Representation<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s <codeVoice>unicodeScalars<\/codeVoice>, <codeVoice>utf16<\/codeVoice>, or <codeVoice>utf8<\/codeVoice> properties. Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding.<\/Para><Para>To demonstrate the different views available for every string, the following examples use this <codeVoice>String<\/codeVoice> instance:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let cafe = \"Cafe\\u{301} du 🌍\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cafe)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Café du 🌍\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>cafe<\/codeVoice> string is a collection of the nine characters that are visible when the string is displayed.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"9\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"C\", \"a\", \"f\", \"é\", \" \", \"d\", \"u\", \" \", \"🌍\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Unicode Scalar View<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A string’s <codeVoice>unicodeScalars<\/codeVoice> property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode. Each scalar value is represented by a <codeVoice>Unicode.Scalar<\/codeVoice> instance and is equivalent to a UTF-32 code unit.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.unicodeScalars.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"10\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe.unicodeScalars))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"C\", \"a\", \"f\", \"e\", \"\\u{0301}\", \" \", \"d\", \"u\", \" \", \"\\u{0001F30D}\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cafe.unicodeScalars.map { $0.value })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[67, 97, 102, 101, 769, 32, 100, 117, 32, 127757]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>unicodeScalars<\/codeVoice> view’s elements comprise each Unicode scalar value in the <codeVoice>cafe<\/codeVoice> string. In particular, because <codeVoice>cafe<\/codeVoice> was declared using the decomposed form of the <codeVoice>&quot;é&quot;<\/codeVoice> character, <codeVoice>unicodeScalars<\/codeVoice> contains the code points for both the letter <codeVoice>&quot;e&quot;<\/codeVoice> (101) and the accent character <codeVoice>&quot;´&quot;<\/codeVoice> (769).<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>UTF-16 View<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A string’s <codeVoice>utf16<\/codeVoice> property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a <codeVoice>UInt16<\/codeVoice> instance.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.utf16.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"11\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe.utf16))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[67, 97, 102, 101, 769, 32, 100, 117, 32, 55356, 57101]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The elements of the <codeVoice>utf16<\/codeVoice> view are the code units for the string when encoded in UTF-16. These elements match those accessed through indexed <codeVoice>NSString<\/codeVoice> APIs.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let nscafe = cafe as NSString]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(nscafe.length)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"11\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(nscafe.character(at: 3))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"101\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>UTF-8 View<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A string’s <codeVoice>utf8<\/codeVoice> property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values. Each code unit is stored as a <codeVoice>UInt8<\/codeVoice> instance.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(cafe.utf8.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"14\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(Array(cafe.utf8))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[67, 97, 102, 101, 204, 129, 32, 100, 117, 32, 240, 159, 140, 141]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The elements of the <codeVoice>utf8<\/codeVoice> view are the code units for the string when encoded in UTF-8. This representation matches the one used when <codeVoice>String<\/codeVoice> instances are passed to C APIs.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let cLength = strlen(cafe)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(cLength)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"14\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Measuring the Length of a String<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to know the length of a string, you must first consider what you’ll use the length for. Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding? A single string can have greatly differing lengths when measured by its different views.<\/Para><Para>For example, an ASCII character like the capital letter <emphasis>A<\/emphasis> is represented by a single element in each of its four views. The Unicode scalar value of <emphasis>A<\/emphasis> is <codeVoice>65<\/codeVoice>, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let capitalA = \"A\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.unicodeScalars.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.utf16.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(capitalA.utf8.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like <codeVoice>&quot;\\u{1F1F5}&quot;<\/codeVoice> and <codeVoice>&quot;\\u{1F1F7}&quot;<\/codeVoice>. Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit. As a result, each view of the string <codeVoice>&quot;🇵🇷&quot;<\/codeVoice> reports a different length.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let flag = \"🇵🇷\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.unicodeScalars.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.utf16.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"4\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(flag.utf8.count)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"8\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To check whether a string is empty, use its <codeVoice>isEmpty<\/codeVoice> property instead of comparing the length of one of the views to <codeVoice>0<\/codeVoice>. Unlike with <codeVoice>isEmpty<\/codeVoice>, calculating a view’s <codeVoice>count<\/codeVoice> property requires iterating through the elements of the string.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing String View Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>To find individual elements of a string, use the appropriate view for your task. For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let name = \"Marie Curie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstSpace = name.index(of: \" \") ?? name.endIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstName = name[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstName)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Marie\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Strings and their views share indices, so you can access the UTF-8 view of the <codeVoice>name<\/codeVoice> string using the same <codeVoice>firstSpace<\/codeVoice> index.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(Array(name.utf8[..<firstSpace]))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[77, 97, 114, 105, 101]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Note that an index into one view may not have an exact corresponding position in another view. For example, the <codeVoice>flag<\/codeVoice> string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8. The following code creates constants for the first and second positions in the <codeVoice>flag.utf8<\/codeVoice> view. Accessing the <codeVoice>utf8<\/codeVoice> view with these indices yields the first and second code UTF-8 units.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstCodeUnit = flag.startIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let secondCodeUnit = flag.utf8.index(after: firstCodeUnit)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ flag.utf8[firstCodeUnit] == 240]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ flag.utf8[secondCodeUnit] == 159]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>When used to access the elements of the <codeVoice>flag<\/codeVoice> string itself, however, the <codeVoice>secondCodeUnit<\/codeVoice> index does not correspond to the position of a specific character. Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset. In the case of <codeVoice>secondCodeUnit<\/codeVoice>, that character is still the flag itself.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ flag[firstCodeUnit] == \"🇵🇷\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ flag[secondCodeUnit] == \"🇵🇷\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s <codeVoice>samePosition(in:)<\/codeVoice> method or the <codeVoice>init(_:within:)<\/codeVoice> initializer.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let exactIndex = secondCodeUnit.samePosition(in: flag) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(flag[exactIndex])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"No exact match for this position.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"No exact match for this position.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Performance Optimizations<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer. This buffer can then be shared by different copies of a string. A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer. Therefore, the first in any sequence of mutating operations may cost O(<emphasis>n<\/emphasis>) time and space.<\/Para><Para>When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage. String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Bridging Between String and NSString<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Any <codeVoice>String<\/codeVoice> instance can be bridged to <codeVoice>NSString<\/codeVoice> using the type-cast operator (<codeVoice>as<\/codeVoice>), and any <codeVoice>String<\/codeVoice> instance that originates in Objective-C may use an <codeVoice>NSString<\/codeVoice> instance as its storage. Because any arbitrary subclass of <codeVoice>NSString<\/codeVoice> can become a <codeVoice>String<\/codeVoice> instance, there are no guarantees about representation or efficiency when a <codeVoice>String<\/codeVoice> instance is backed by <codeVoice>NSString<\/codeVoice> storage. Because <codeVoice>NSString<\/codeVoice> is immutable, it is just as though the storage was shared by a copy. The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(<emphasis>n<\/emphasis>) time and space, where <emphasis>n<\/emphasis> is the length of the string’s encoded representation (or more, if the underlying <codeVoice>NSString<\/codeVoice> has unusual performance characteristics).<\/Para><Para>For more information about the Unicode terms used in this discussion, see the <Link href=\"http:\/\/www.unicode.org\/glossary\/\">Unicode.org glossary<\/Link>. In particular, this discussion mentions <Link href=\"http:\/\/www.unicode.org\/glossary\/#extended_grapheme_cluster\">extended grapheme clusters<\/Link>, <Link href=\"http:\/\/www.unicode.org\/glossary\/#unicode_scalar_value\">Unicode scalar values<\/Link>, and <Link href=\"http:\/\/www.unicode.org\/glossary\/#canonical_equivalent\">canonical equivalence<\/Link>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "String",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>String<\/decl.name><\/decl.struct>",
        "key.groupname" : "String",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 356,
        "key.modulename" : "Swift",
        "key.name" : "String",
        "key.namelength" : 6,
        "key.nameoffset" : 174,
        "key.offset" : 164,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal func split(by separators: [<Type usr=\"s:s9CharacterV\">Character<\/Type>] = default, omittingEmptySubsequences: <Type usr=\"s:Sb\">Bool<\/Type> = default) -&gt; [<Type usr=\"s:SS\">String<\/Type>]<\/Declaration>",
            "key.bodylength" : 144,
            "key.bodyoffset" : 373,
            "key.doc.column" : 16,
            "key.doc.comment" : "Split the string into substrings separated by the given separators.",
            "key.doc.declaration" : "internal func split(by separators: [Character] = default, omittingEmptySubsequences: Bool = default) -> [String]",
            "key.doc.file" : "Sources\/Commandant\/Extensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Extensions.swift\" line=\"13\" column=\"16\"><Name>split(by:omittingEmptySubsequences:)<\/Name><USR>s:SS10CommandantE5splitSaySSGSays9CharacterVG2by_Sb25omittingEmptySubsequencestF<\/USR><Declaration>internal func split(by separators: [Character] = default, omittingEmptySubsequences: Bool = default) -&gt; [String]<\/Declaration><CommentParts><Abstract><Para>Split the string into substrings separated by the given separators.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 13,
            "key.doc.name" : "split(by:omittingEmptySubsequences:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Extensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>split<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>by<\/decl.var.parameter.argument_label> <decl.var.parameter.name>separators<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:s9CharacterV\">Character<\/ref.struct>]<\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>omittingEmptySubsequences<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "String",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 252,
            "key.name" : "split(by:omittingEmptySubsequences:)",
            "key.namelength" : 88,
            "key.nameoffset" : 271,
            "key.offset" : 266,
            "key.parsed_declaration" : "internal func split(by separators: [Character] = [ \",\", \" \" ], omittingEmptySubsequences: Bool = true) -> [String]",
            "key.parsed_scope.end" : 17,
            "key.parsed_scope.start" : 13,
            "key.substructure" : [

            ],
            "key.typename" : "(String) -> ([Character], Bool) -> [String]",
            "key.typeusr" : "_T0SaySSGSays9CharacterVG2by_Sb25omittingEmptySubsequencestcD",
            "key.usr" : "s:SS10CommandantE5splitSaySSGSays9CharacterVG2by_Sb25omittingEmptySubsequencestF"
          }
        ],
        "key.typename" : "String.Type",
        "key.typeusr" : "_T0SSmD",
        "key.usr" : "s:SS"
      }
    ]
  }
}, {
  "Sources\/Commandant\/Errors.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 6102,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum CommandantError&lt;ClientError&gt; : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 157,
        "key.bodyoffset" : 386,
        "key.doc.column" : 13,
        "key.doc.comment" : "Possible errors that can originate from Commandant.\n\n`ClientError` should be the type of error (if any) that can occur when\nrunning commands.",
        "key.doc.declaration" : "public enum CommandantError<ClientError> : Error",
        "key.doc.discussion" : [
          {
            "Para" : "`ClientError` should be the type of error (if any) that can occur when running commands."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Errors.swift\" line=\"16\" column=\"13\"><Name>CommandantError<\/Name><USR>s:10Commandant0A5ErrorO<\/USR><Declaration>public enum CommandantError&lt;ClientError&gt; : Error<\/Declaration><CommentParts><Abstract><Para>Possible errors that can originate from Commandant.<\/Para><\/Abstract><Discussion><Para><codeVoice>ClientError<\/codeVoice> should be the type of error (if any) that can occur when running commands.<\/Para><\/Discussion><\/CommentParts><\/Other>",
        "key.doc.line" : 16,
        "key.doc.name" : "CommandantError",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 5,
            "key.offset" : 379
          }
        ],
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>CommandantError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant0A5ErrorO06ClientB0xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Error"
          }
        ],
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 200,
        "key.name" : "CommandantError",
        "key.namelength" : 15,
        "key.nameoffset" : 349,
        "key.offset" : 344,
        "key.parsed_declaration" : "public enum CommandantError<ClientError>: Error",
        "key.parsed_scope.end" : 22,
        "key.parsed_scope.start" : 16,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 36,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 425,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>case usageError(description: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "An option was used incorrectly.",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/Errors.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Errors.swift\" line=\"18\" column=\"7\"><Name>usageError<\/Name><USR>s:10Commandant0A5ErrorO05usageB0ACyxGSS11description_tcAEmlF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>An option was used incorrectly.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 18,
                "key.doc.name" : "usageError",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/Errors.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>usageError<\/decl.name><tuple>(<tuple.element><tuple.element.argument_label>description<\/tuple.element.argument_label>: <tuple.element.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 31,
                "key.name" : "usageError",
                "key.namelength" : 10,
                "key.nameoffset" : 430,
                "key.offset" : 430,
                "key.parsed_declaration" : "case usageError(description: String)",
                "key.parsed_scope.end" : 18,
                "key.parsed_scope.start" : 18,
                "key.typename" : "<ClientError> (CommandantError<ClientError>.Type) -> (String) -> CommandantError<ClientError>",
                "key.typeusr" : "_T010Commandant0A5ErrorOyxGSS11description_tcADmcluD",
                "key.usr" : "s:10Commandant0A5ErrorO05usageB0ACyxGSS11description_tcAEmlF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 30,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 512,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>case commandError(ClientError)<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "An error occurred while running a command.",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/Errors.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Errors.swift\" line=\"21\" column=\"7\"><Name>commandError<\/Name><USR>s:10Commandant0A5ErrorO07commandB0ACyxGxcAEmlF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>An error occurred while running a command.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 21,
                "key.doc.name" : "commandError",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/Errors.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>commandError<\/decl.name>(ClientError)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 25,
                "key.name" : "commandError",
                "key.namelength" : 12,
                "key.nameoffset" : 517,
                "key.offset" : 517,
                "key.parsed_declaration" : "case commandError(ClientError)",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.typename" : "<ClientError> (CommandantError<ClientError>.Type) -> (ClientError) -> CommandantError<ClientError>",
                "key.typeusr" : "_T010Commandant0A5ErrorOyxGxcADmcluD",
                "key.usr" : "s:10Commandant0A5ErrorO07commandB0ACyxGxcAEmlF"
              }
            ]
          }
        ],
        "key.typename" : "CommandantError<ClientError>.Type",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGmD",
        "key.usr" : "s:10Commandant0A5ErrorO"
      },
      {
        "key.annotated_decl" : "<Declaration>public enum CommandantError&lt;ClientError&gt; : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 187,
        "key.bodyoffset" : 598,
        "key.doc.column" : 13,
        "key.doc.declaration" : "public enum CommandantError<ClientError> : Error",
        "key.doc.discussion" : [
          {
            "Para" : "`ClientError` should be the type of error (if any) that can occur when running commands."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Errors.swift\" line=\"16\" column=\"13\"><Name>CommandantError<\/Name><USR>s:10Commandant0A5ErrorO<\/USR><Declaration>public enum CommandantError&lt;ClientError&gt; : Error<\/Declaration><CommentParts><Abstract><Para>Possible errors that can originate from Commandant.<\/Para><\/Abstract><Discussion><Para><codeVoice>ClientError<\/codeVoice> should be the type of error (if any) that can occur when running commands.<\/Para><\/Discussion><\/CommentParts><\/Other>",
        "key.doc.line" : 16,
        "key.doc.name" : "CommandantError",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 573
          }
        ],
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>CommandantError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant0A5ErrorO06ClientB0xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 240,
        "key.name" : "CommandantError",
        "key.namelength" : 15,
        "key.nameoffset" : 556,
        "key.offset" : 546,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 151,
            "key.bodyoffset" : 632,
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Instead of accessing this property directly, convert an instance of any type to a string by using the `String(describing:)` initializer. For example:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSv<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Instead of accessing this property directly, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Errors.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 177,
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 611,
            "key.offset" : 607,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
              }
            ],
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 25,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
          }
        ],
        "key.typename" : "CommandantError<ClientError>.Type",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGmD",
        "key.usr" : "s:10Commandant0A5ErrorO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func missingArgumentError&lt;ClientError&gt;(_ argumentName: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant20missingArgumentErrorAA0aD0OyxGSSlF06ClientD0L_xmfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 105,
        "key.bodyoffset" : 1006,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an `InvalidArgument` error that indicates a missing value for\nthe argument by the given name.",
        "key.doc.declaration" : "internal func missingArgumentError<ClientError>(_ argumentName: String) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"38\" column=\"15\"><Name>missingArgumentError(_:)<\/Name><USR>s:10Commandant20missingArgumentErrorAA0aD0OyxGSSlF<\/USR><Declaration>internal func missingArgumentError&lt;ClientError&gt;(_ argumentName: String) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Constructs an <codeVoice>InvalidArgument<\/codeVoice> error that indicates a missing value for the argument by the given name.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 38,
        "key.doc.name" : "missingArgumentError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>missingArgumentError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant20missingArgumentErrorAA0aD0OyxGSSlF06ClientD0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>argumentName<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant20missingArgumentErrorAA0aD0OyxGSSlF06ClientD0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 202,
        "key.name" : "missingArgumentError(_:)",
        "key.namelength" : 57,
        "key.nameoffset" : 915,
        "key.offset" : 910,
        "key.parsed_declaration" : "internal func missingArgumentError<ClientError>(_ argumentName: String) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 41,
        "key.parsed_scope.start" : 38,
        "key.substructure" : [

        ],
        "key.typename" : "<ClientError> (String) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGSScluD",
        "key.usr" : "s:10Commandant20missingArgumentErrorAA0aD0OyxGSSlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;ClientError&gt;(_ keyValueExample: <Type usr=\"s:SS\">String<\/Type>, usage: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF06ClientD0L_xmfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 179,
        "key.bodyoffset" : 1353,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error by combining the example of key (and value, if applicable)\nwith the usage description.",
        "key.doc.declaration" : "internal func informativeUsageError<ClientError>(_ keyValueExample: String, usage: String) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"45\" column=\"15\"><Name>informativeUsageError(_:usage:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF<\/USR><Declaration>internal func informativeUsageError&lt;ClientError&gt;(_ keyValueExample: String, usage: String) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Constructs an error by combining the example of key (and value, if applicable) with the usage description.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 45,
        "key.doc.name" : "informativeUsageError(_:usage:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF06ClientD0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>keyValueExample<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>usage<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF06ClientD0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 295,
        "key.name" : "informativeUsageError(_:usage:)",
        "key.namelength" : 76,
        "key.nameoffset" : 1243,
        "key.offset" : 1238,
        "key.parsed_declaration" : "internal func informativeUsageError<ClientError>(_ keyValueExample: String, usage: String) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 51,
        "key.parsed_scope.start" : 45,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<ClientError> (String, usage: String) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGSS_SS5usagetcluD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func combineUsageErrors&lt;ClientError&gt;(_ lhs: <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\">ClientError<\/Type>&gt;, _ rhs: <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\">ClientError<\/Type>&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 265,
        "key.bodyoffset" : 1827,
        "key.doc.column" : 15,
        "key.doc.comment" : "Combines the text of the two errors, if they're both `UsageError`s.\nOtherwise, uses whichever one is not (biased toward the left).",
        "key.doc.declaration" : "internal func combineUsageErrors<ClientError>(_ lhs: CommandantError<ClientError>, _ rhs: CommandantError<ClientError>) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"55\" column=\"15\"><Name>combineUsageErrors(_:_:)<\/Name><USR>s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF<\/USR><Declaration>internal func combineUsageErrors&lt;ClientError&gt;(_ lhs: CommandantError&lt;ClientError&gt;, _ rhs: CommandantError&lt;ClientError&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Combines the text of the two errors, if they’re both <codeVoice>UsageError<\/codeVoice>s. Otherwise, uses whichever one is not (biased toward the left).<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 55,
        "key.doc.name" : "combineUsageErrors(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>combineUsageErrors<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF06ClientE0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 410,
        "key.name" : "combineUsageErrors(_:_:)",
        "key.namelength" : 105,
        "key.nameoffset" : 1688,
        "key.offset" : 1683,
        "key.parsed_declaration" : "internal func combineUsageErrors<ClientError>(_ lhs: CommandantError<ClientError>, _ rhs: CommandantError<ClientError>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 67,
        "key.parsed_scope.start" : 55,
        "key.substructure" : [

        ],
        "key.typename" : "<ClientError> (CommandantError<ClientError>, CommandantError<ClientError>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGAD_ADtcluD",
        "key.usr" : "s:10Commandant18combineUsageErrorsAA0A5ErrorOyxGAE_AEtlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func unrecognizedArgumentsError&lt;ClientError&gt;(_ options: [<Type usr=\"s:SS\">String<\/Type>]) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant26unrecognizedArgumentsErrorAA0aD0OyxGSaySSGlF06ClientD0L_xmfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 96,
        "key.bodyoffset" : 2274,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that indicates unrecognized arguments remains.",
        "key.doc.declaration" : "internal func unrecognizedArgumentsError<ClientError>(_ options: [String]) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"70\" column=\"15\"><Name>unrecognizedArgumentsError(_:)<\/Name><USR>s:10Commandant26unrecognizedArgumentsErrorAA0aD0OyxGSaySSGlF<\/USR><Declaration>internal func unrecognizedArgumentsError&lt;ClientError&gt;(_ options: [String]) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Constructs an error that indicates unrecognized arguments remains.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 70,
        "key.doc.name" : "unrecognizedArgumentsError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>unrecognizedArgumentsError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant26unrecognizedArgumentsErrorAA0aD0OyxGSaySSGlF06ClientD0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant26unrecognizedArgumentsErrorAA0aD0OyxGSaySSGlF06ClientD0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 196,
        "key.name" : "unrecognizedArgumentsError(_:)",
        "key.namelength" : 60,
        "key.nameoffset" : 2180,
        "key.offset" : 2175,
        "key.parsed_declaration" : "internal func unrecognizedArgumentsError<ClientError>(_ options: [String]) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 72,
        "key.parsed_scope.start" : 70,
        "key.substructure" : [

        ],
        "key.typename" : "<ClientError> ([String]) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGSaySSGcluD",
        "key.usr" : "s:10Commandant26unrecognizedArgumentsErrorAA0aD0OyxGSaySSGlF"
      },
      {
        "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
        "key.length" : 14,
        "key.name" : "MARK: Argument",
        "key.namelength" : 0,
        "key.nameoffset" : 0,
        "key.offset" : 2376
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ valueExample: <Type usr=\"s:SS\">String<\/Type>, argument: <Type usr=\"s:10Commandant8ArgumentV\">Argument<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF1TL_xmfp\">T<\/Type>&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 192,
        "key.bodyoffset" : 2645,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the argument, with the given\nexample of value usage if applicable.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ valueExample: String, argument: Argument<T>) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"78\" column=\"15\"><Name>informativeUsageError(_:argument:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ valueExample: String, argument: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the argument, with the given example of value usage if applicable.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 78,
        "key.doc.name" : "informativeUsageError(_:argument:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>valueExample<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant8ArgumentV\">Argument<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 316,
        "key.name" : "informativeUsageError(_:argument:)",
        "key.namelength" : 84,
        "key.nameoffset" : 2527,
        "key.offset" : 2522,
        "key.parsed_declaration" : "internal func informativeUsageError<T, ClientError>(_ valueExample: String, argument: Argument<T>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 84,
        "key.parsed_scope.start" : 78,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError> (String, argument: Argument<T>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GSS_AA8ArgumentVyxG8argumenttcr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ argument: <Type usr=\"s:10Commandant8ArgumentV\">Argument<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF1TL_xmfp\">T<\/Type>&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 282,
        "key.bodyoffset" : 3032,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the argument.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ argument: Argument<T>) -> CommandantError<ClientError> where T : ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"87\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ argument: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the argument.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 87,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>argument<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant8ArgumentV\">Argument<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 402,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 80,
        "key.nameoffset" : 2918,
        "key.offset" : 2913,
        "key.parsed_declaration" : "internal func informativeUsageError<T: ArgumentProtocol, ClientError>(_ argument: Argument<T>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 102,
        "key.parsed_scope.start" : 87,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (Argument<T>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GAA8ArgumentVyxGcAA0C8ProtocolRzr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ argument: <Type usr=\"s:10Commandant8ArgumentV\">Argument<\/Type>&lt;[<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF1TL_xmfp\">T<\/Type>]&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 282,
        "key.bodyoffset" : 3516,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the argument list.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ argument: Argument<[T]>) -> CommandantError<ClientError> where T : ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"105\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ argument: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the argument list.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 105,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>argument<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant8ArgumentV\">Argument<\/ref.struct>&lt;[<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 404,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 82,
        "key.nameoffset" : 3400,
        "key.offset" : 3395,
        "key.parsed_declaration" : "internal func informativeUsageError<T: ArgumentProtocol, ClientError>(_ argument: Argument<[T]>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 120,
        "key.parsed_scope.start" : 105,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (Argument<[T]>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GAA8ArgumentVySayxGGcAA0C8ProtocolRzr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF"
      },
      {
        "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
        "key.length" : 12,
        "key.name" : "MARK: Option",
        "key.namelength" : 0,
        "key.nameoffset" : 0,
        "key.offset" : 3804
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ keyValueExample: <Type usr=\"s:SS\">String<\/Type>, option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF1TL_xmfp\">T<\/Type>&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 76,
        "key.bodyoffset" : 4079,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the option, with the given\nexample of key (and value, if applicable) usage.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ keyValueExample: String, option: Option<T>) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"126\" column=\"15\"><Name>informativeUsageError(_:option:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ keyValueExample: String, option: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the option, with the given example of key (and value, if applicable) usage.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 126,
        "key.doc.name" : "informativeUsageError(_:option:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>keyValueExample<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>option<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 199,
        "key.name" : "informativeUsageError(_:option:)",
        "key.namelength" : 83,
        "key.nameoffset" : 3962,
        "key.offset" : 3957,
        "key.parsed_declaration" : "internal func informativeUsageError<T, ClientError>(_ keyValueExample: String, option: Option<T>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 128,
        "key.parsed_scope.start" : 126,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError> (String, option: Option<T>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GSS_AA6OptionVyxG6optiontcr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 89,
        "key.bodyoffset" : 4344,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the option.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ option: Option<T>) -> CommandantError<ClientError> where T : ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"131\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the option.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 131,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 205,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 76,
        "key.nameoffset" : 4234,
        "key.offset" : 4229,
        "key.parsed_declaration" : "internal func informativeUsageError<T: ArgumentProtocol, ClientError>(_ option: Option<T>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 133,
        "key.parsed_scope.start" : 131,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (Option<T>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GAA6OptionVyxGcAA16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>?&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 78,
        "key.bodyoffset" : 4623,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the option.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ option: Option<T?>) -> CommandantError<ClientError> where T : ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"136\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the option.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 136,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>?&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 195,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 77,
        "key.nameoffset" : 4512,
        "key.offset" : 4507,
        "key.parsed_declaration" : "internal func informativeUsageError<T: ArgumentProtocol, ClientError>(_ option: Option<T?>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 138,
        "key.parsed_scope.start" : 136,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (Option<T?>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GAA6OptionVyxSgGcAA16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;[<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>]&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 91,
        "key.bodyoffset" : 4892,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the option.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ option: Option<[T]>) -> CommandantError<ClientError> where T : ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"141\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the option.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 141,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;[<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 209,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 78,
        "key.nameoffset" : 4780,
        "key.offset" : 4775,
        "key.parsed_declaration" : "internal func informativeUsageError<T: ArgumentProtocol, ClientError>(_ option: Option<[T]>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 143,
        "key.parsed_scope.start" : 141,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (Option<[T]>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GAA6OptionVySayxGGcAA16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;[<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/Type>]?&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/Type>&gt; where T : <Type usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/Type><\/Declaration>",
        "key.bodylength" : 78,
        "key.bodyoffset" : 5175,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the option.",
        "key.doc.declaration" : "internal func informativeUsageError<T, ClientError>(_ option: Option<[T]?>) -> CommandantError<ClientError> where T : ArgumentProtocol",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"146\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF<\/USR><Declaration>internal func informativeUsageError&lt;T, ClientError&gt;(_ option: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the option.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 146,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;[<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF1TL_xmfp\">T<\/ref.generic_type_param>]?&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF06ClientD0L_q_mfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:10Commandant16ArgumentProtocolP\">ArgumentProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 197,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 79,
        "key.nameoffset" : 5062,
        "key.offset" : 5057,
        "key.parsed_declaration" : "internal func informativeUsageError<T: ArgumentProtocol, ClientError>(_ option: Option<[T]?>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 148,
        "key.parsed_scope.start" : 146,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF\">informativeUsageError&lt;ClientError&gt;(_: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<T, ClientError where T : ArgumentProtocol> (Option<[T]?>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyq_GAA6OptionVySayxGSgGcAA16ArgumentProtocolRzr0_luD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>internal func informativeUsageError&lt;ClientError&gt;(_ option: <Type usr=\"s:10Commandant6OptionV\">Option<\/Type>&lt;<Type usr=\"s:Sb\">Bool<\/Type>&gt;) -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF06ClientD0L_xmfp\">ClientError<\/Type>&gt;<\/Declaration>",
        "key.bodylength" : 121,
        "key.bodyoffset" : 5438,
        "key.doc.column" : 15,
        "key.doc.comment" : "Constructs an error that describes how to use the given boolean option.",
        "key.doc.declaration" : "internal func informativeUsageError<ClientError>(_ option: Option<Bool>) -> CommandantError<ClientError>",
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Errors.swift\" line=\"151\" column=\"15\"><Name>informativeUsageError(_:)<\/Name><USR>s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF<\/USR><Declaration>internal func informativeUsageError&lt;ClientError&gt;(_ option: Option&lt;Bool&gt;) -&gt; CommandantError&lt;ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Constructs an error that describes how to use the given boolean option.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 151,
        "key.doc.name" : "informativeUsageError(_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>informativeUsageError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF06ClientD0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6OptionV\">Option<\/ref.struct>&lt;<ref.struct usr=\"s:Sb\">Bool<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF06ClientD0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 219,
        "key.name" : "informativeUsageError(_:)",
        "key.namelength" : 58,
        "key.nameoffset" : 5346,
        "key.offset" : 5341,
        "key.parsed_declaration" : "internal func informativeUsageError<ClientError>(_ option: Option<Bool>) -> CommandantError<ClientError>",
        "key.parsed_scope.end" : 154,
        "key.parsed_scope.start" : 151,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0OyxGSS_SS5usagetlF\">informativeUsageError(_:usage:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA8ArgumentVyxG8argumenttr0_lF\">informativeUsageError(_:argument:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVyxGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA8ArgumentVySayxGGAA0E8ProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Argument&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GSS_AA6OptionVyxG6optiontr0_lF\">informativeUsageError(_:option:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVyxSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;T?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant21informativeUsageErrorAA0aD0Oyq_GAA6OptionVySayxGSgGAA16ArgumentProtocolRzr0_lF\">informativeUsageError&lt;T, ClientError&gt;(_: Option&lt;[T]?&gt;) -&gt; CommandantError&lt;ClientError&gt; where T : ArgumentProtocol<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "<ClientError> (Option<Bool>) -> CommandantError<ClientError>",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGAA6OptionVySbGcluD",
        "key.usr" : "s:10Commandant21informativeUsageErrorAA0aD0OyxGAA6OptionVySbGlF"
      },
      {
        "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
        "key.length" : 25,
        "key.name" : "MARK: - migration support",
        "key.namelength" : 0,
        "key.nameoffset" : 0,
        "key.offset" : 5565
      },
      {
        "key.annotated_decl" : "<Declaration>public enum CommandantError&lt;ClientError&gt; : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 356,
        "key.bodyoffset" : 5744,
        "key.doc.column" : 13,
        "key.doc.declaration" : "public enum CommandantError<ClientError> : Error",
        "key.doc.discussion" : [
          {
            "Para" : "`ClientError` should be the type of error (if any) that can occur when running commands."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Errors.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Errors.swift\" line=\"16\" column=\"13\"><Name>CommandantError<\/Name><USR>s:10Commandant0A5ErrorO<\/USR><Declaration>public enum CommandantError&lt;ClientError&gt; : Error<\/Declaration><CommentParts><Abstract><Para>Possible errors that can originate from Commandant.<\/Para><\/Abstract><Discussion><Para><codeVoice>ClientError<\/codeVoice> should be the type of error (if any) that can occur when running commands.<\/Para><\/Discussion><\/CommentParts><\/Other>",
        "key.doc.line" : 16,
        "key.doc.name" : "CommandantError",
        "key.doc.type" : "Other",
        "key.filepath" : "Sources\/Commandant\/Errors.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>CommandantError<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant0A5ErrorO06ClientB0xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 384,
        "key.name" : "CommandantError",
        "key.namelength" : 15,
        "key.nameoffset" : 5727,
        "key.offset" : 5717,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.available"
              }
            ],
            "key.bodylength" : 49,
            "key.bodyoffset" : 5882,
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 114,
            "key.name" : "UsageError(description:)",
            "key.namelength" : 31,
            "key.nameoffset" : 5830,
            "key.offset" : 5818,
            "key.substructure" : [

            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.available"
              }
            ],
            "key.bodylength" : 32,
            "key.bodyoffset" : 6066,
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 100,
            "key.name" : "CommandError(_:)",
            "key.namelength" : 34,
            "key.nameoffset" : 6011,
            "key.offset" : 5999,
            "key.substructure" : [

            ]
          }
        ],
        "key.typename" : "CommandantError<ClientError>.Type",
        "key.typeusr" : "_T010Commandant0A5ErrorOyxGmD",
        "key.usr" : "s:10Commandant0A5ErrorO"
      }
    ]
  }
}, {
  "Sources\/Commandant\/Switch.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1951,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Switch<\/Declaration>",
        "key.bodylength" : 724,
        "key.bodyoffset" : 412,
        "key.doc.column" : 15,
        "key.doc.comment" : "Describes a parameterless command line flag that defaults to false and can only\nbe switched on. Canonical examples include `--force` and `--recurse`.\n\nFor a boolean toggle that can be enabled and disabled use `Option<Bool>`.",
        "key.doc.declaration" : "public struct Switch",
        "key.doc.discussion" : [
          {
            "Para" : "For a boolean toggle that can be enabled and disabled use `Option<Bool>`."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Switch.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Switch.swift\" line=\"15\" column=\"15\"><Name>Switch<\/Name><USR>s:10Commandant6SwitchV<\/USR><Declaration>public struct Switch<\/Declaration><CommentParts><Abstract><Para>Describes a parameterless command line flag that defaults to false and can only be switched on. Canonical examples include <codeVoice>--force<\/codeVoice> and <codeVoice>--recurse<\/codeVoice>.<\/Para><\/Abstract><Discussion><Para>For a boolean toggle that can be enabled and disabled use <codeVoice>Option&lt;Bool&gt;<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 15,
        "key.doc.name" : "Switch",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Switch.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Switch<\/decl.name><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 740,
        "key.name" : "Switch",
        "key.namelength" : 6,
        "key.nameoffset" : 404,
        "key.offset" : 397,
        "key.parsed_declaration" : "public struct Switch",
        "key.parsed_scope.end" : 36,
        "key.parsed_scope.start" : 15,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let key: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "The key that enables this switch. For example, a key of `verbose` would be\nused for a `--verbose` option.",
            "key.doc.declaration" : "public let key: String",
            "key.doc.file" : "Sources\/Commandant\/Switch.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Switch.swift\" line=\"18\" column=\"13\"><Name>key<\/Name><USR>s:10Commandant6SwitchV3keySSv<\/USR><Declaration>public let key: String<\/Declaration><CommentParts><Abstract><Para>The key that enables this switch. For example, a key of <codeVoice>verbose<\/codeVoice> would be used for a <codeVoice>--verbose<\/codeVoice> option.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 18,
            "key.doc.name" : "key",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Switch.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>key<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 15,
            "key.name" : "key",
            "key.namelength" : 3,
            "key.nameoffset" : 541,
            "key.offset" : 537,
            "key.parsed_declaration" : "public let key: String",
            "key.parsed_scope.end" : 18,
            "key.parsed_scope.start" : 18,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant6SwitchV3keySSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let flag: <Type usr=\"s:s9CharacterV\">Character<\/Type>?<\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "Optional single letter flag that enables this switch. For example, `-v` would\nbe used as a shorthand for `--verbose`.\n\nMultiple flags can be grouped together as a single argument and will split\nwhen parsing (e.g. `rm -rf` treats 'r' and 'f' as inidividual flags).",
            "key.doc.declaration" : "public let flag: Character?",
            "key.doc.discussion" : [
              {
                "Para" : "Multiple flags can be grouped together as a single argument and will split when parsing (e.g. `rm -rf` treats ‘r’ and ‘f’ as inidividual flags)."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Switch.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Switch.swift\" line=\"25\" column=\"13\"><Name>flag<\/Name><USR>s:10Commandant6SwitchV4flags9CharacterVSgv<\/USR><Declaration>public let flag: Character?<\/Declaration><CommentParts><Abstract><Para>Optional single letter flag that enables this switch. For example, <codeVoice>-v<\/codeVoice> would be used as a shorthand for <codeVoice>--verbose<\/codeVoice>.<\/Para><\/Abstract><Discussion><Para>Multiple flags can be grouped together as a single argument and will split when parsing (e.g. <codeVoice>rm -rf<\/codeVoice> treats ‘r’ and ‘f’ as inidividual flags).<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 25,
            "key.doc.name" : "flag",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Switch.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>flag<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s9CharacterV\">Character<\/ref.struct>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 20,
            "key.name" : "flag",
            "key.namelength" : 4,
            "key.nameoffset" : 854,
            "key.offset" : 850,
            "key.parsed_declaration" : "public let flag: Character?",
            "key.parsed_scope.end" : 25,
            "key.parsed_scope.start" : 25,
            "key.typename" : "Character?",
            "key.typeusr" : "_T0s9CharacterVSgD",
            "key.usr" : "s:10Commandant6SwitchV4flags9CharacterVSgv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let usage: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.doc.column" : 13,
            "key.doc.comment" : "A human-readable string describing the purpose of this option. This will\nbe shown in help messages.",
            "key.doc.declaration" : "public let usage: String",
            "key.doc.file" : "Sources\/Commandant\/Switch.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Switch.swift\" line=\"29\" column=\"13\"><Name>usage<\/Name><USR>s:10Commandant6SwitchV5usageSSv<\/USR><Declaration>public let usage: String<\/Declaration><CommentParts><Abstract><Para>A human-readable string describing the purpose of this option. This will be shown in help messages.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 29,
            "key.doc.name" : "usage",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Switch.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>usage<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 17,
            "key.name" : "usage",
            "key.namelength" : 5,
            "key.nameoffset" : 994,
            "key.offset" : 990,
            "key.parsed_declaration" : "public let usage: String",
            "key.parsed_scope.end" : 29,
            "key.parsed_scope.start" : 29,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant6SwitchV5usageSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(flag: <Type usr=\"s:s9CharacterV\">Character<\/Type>? = default, key: <Type usr=\"s:SS\">String<\/Type>, usage: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
            "key.bodylength" : 59,
            "key.bodyoffset" : 1075,
            "key.filepath" : "Sources\/Commandant\/Switch.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>flag<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:s9CharacterV\">Character<\/ref.struct>?<\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>key<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>usage<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 118,
            "key.name" : "init(flag:key:usage:)",
            "key.namelength" : 56,
            "key.nameoffset" : 1017,
            "key.offset" : 1017,
            "key.parsed_declaration" : "public init(flag: Character? = nil, key: String, usage: String)",
            "key.parsed_scope.end" : 35,
            "key.parsed_scope.start" : 31,
            "key.substructure" : [

            ],
            "key.typename" : "(Switch.Type) -> (Character?, String, String) -> Switch",
            "key.typeusr" : "_T010Commandant6SwitchVs9CharacterVSg4flag_SS3keySS5usagetcD",
            "key.usr" : "s:10Commandant6SwitchVACs9CharacterVSg4flag_SS3keySS5usagetcfc"
          }
        ],
        "key.typename" : "Switch.Type",
        "key.typeusr" : "_T010Commandant6SwitchVmD",
        "key.usr" : "s:10Commandant6SwitchV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Switch<\/Declaration>",
        "key.bodylength" : 140,
        "key.bodyoffset" : 1182,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Switch",
        "key.doc.discussion" : [
          {
            "Para" : "For a boolean toggle that can be enabled and disabled use `Option<Bool>`."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Switch.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Switch.swift\" line=\"15\" column=\"15\"><Name>Switch<\/Name><USR>s:10Commandant6SwitchV<\/USR><Declaration>public struct Switch<\/Declaration><CommentParts><Abstract><Para>Describes a parameterless command line flag that defaults to false and can only be switched on. Canonical examples include <codeVoice>--force<\/codeVoice> and <codeVoice>--recurse<\/codeVoice>.<\/Para><\/Abstract><Discussion><Para>For a boolean toggle that can be enabled and disabled use <codeVoice>Option&lt;Bool&gt;<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 15,
        "key.doc.name" : "Switch",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 1157
          }
        ],
        "key.filepath" : "Sources\/Commandant\/Switch.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Switch<\/decl.name><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 184,
        "key.name" : "Switch",
        "key.namelength" : 6,
        "key.nameoffset" : 1149,
        "key.offset" : 1139,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 104,
            "key.bodyoffset" : 1216,
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Instead of accessing this property directly, convert an instance of any type to a string by using the `String(describing:)` initializer. For example:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSv<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Instead of accessing this property directly, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Switch.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 130,
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 1195,
            "key.offset" : 1191,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
              }
            ],
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 45,
            "key.parsed_scope.start" : 39,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
          }
        ],
        "key.typename" : "Switch.Type",
        "key.typeusr" : "_T010Commandant6SwitchVmD",
        "key.usr" : "s:10Commandant6SwitchV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &lt;|&lt;ClientError&gt;(mode: <Type usr=\"s:10Commandant11CommandModeO\">CommandMode<\/Type>, option: <Type usr=\"s:10Commandant6SwitchV\">Switch<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:Sb\">Bool<\/Type>, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF06ClientD0L_xmfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
        "key.bodylength" : 322,
        "key.bodyoffset" : 1627,
        "key.doc.column" : 13,
        "key.doc.comment" : "Evaluates the given boolean switch in the given mode.\n\nIf parsing command line arguments, and no value was specified on the command\nline, the option's `defaultValue` is used.",
        "key.doc.declaration" : "public func <|<ClientError>(mode: CommandMode, option: Switch) -> Result<Bool, CommandantError<ClientError>>",
        "key.doc.discussion" : [
          {
            "Para" : "If parsing command line arguments, and no value was specified on the command line, the option’s `defaultValue` is used."
          }
        ],
        "key.doc.file" : "Sources\/Commandant\/Switch.swift",
        "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Switch.swift\" line=\"52\" column=\"13\"><Name>&lt;|(_:_:)<\/Name><USR>s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF<\/USR><Declaration>public func &lt;|&lt;ClientError&gt;(mode: CommandMode, option: Switch) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Evaluates the given boolean switch in the given mode.<\/Para><\/Abstract><Discussion><Para>If parsing command line arguments, and no value was specified on the command line, the option’s <codeVoice>defaultValue<\/codeVoice> is used.<\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 52,
        "key.doc.name" : "<|(_:_:)",
        "key.doc.type" : "Function",
        "key.filepath" : "Sources\/Commandant\/Switch.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;|<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF06ClientD0L_xmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>mode<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11CommandModeO\">CommandMode<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>option<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Commandant6SwitchV\">Switch<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.struct usr=\"s:Sb\">Bool<\/ref.struct>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF06ClientD0L_xmfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 428,
        "key.name" : "<|(_:_:)",
        "key.namelength" : 52,
        "key.nameoffset" : 1527,
        "key.offset" : 1522,
        "key.parsed_declaration" : "public func <| <ClientError> (mode: CommandMode, option: Switch) -> Result<Bool, CommandantError<ClientError>>",
        "key.parsed_scope.end" : 65,
        "key.parsed_scope.start" : 52,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyxGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA8ArgumentVyAEGtAA0G8ProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Argument&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyxGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T&gt;) -&gt; Result&lt;T, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOyxSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;T?&gt;) -&gt; Result&lt;T?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAEGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]&gt;) -&gt; Result&lt;[T], CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySayxGSgAA0A5ErrorOyq_GGAA11CommandModeO_AA6OptionVyAFGtAA16ArgumentProtocolRzr0_lF\">&lt;|&lt;T, ClientError&gt;(_: CommandMode, _: Option&lt;[T]?&gt;) -&gt; Result&lt;[T]?, CommandantError&lt;ClientError&gt;&gt; where T : ArgumentProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6OptionVySbGtlF\">&lt;|&lt;ClientError&gt;(_: CommandMode, _: Option&lt;Bool&gt;) -&gt; Result&lt;Bool, CommandantError&lt;ClientError&gt;&gt;<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>ClientError<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Switch.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 11,
            "key.name" : "ClientError",
            "key.offset" : 1531,
            "key.parsed_declaration" : "public func <| <ClientError> (mode: CommandMode, option: Switch) -> Result<Bool, CommandantError<ClientError>>",
            "key.parsed_scope.end" : 52,
            "key.parsed_scope.start" : 52,
            "key.typename" : "ClientError.Type",
            "key.typeusr" : "_T0xmD",
            "key.usr" : "s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF06ClientD0L_xmfp"
          }
        ],
        "key.typename" : "<ClientError> (CommandMode, Switch) -> Result<Bool, CommandantError<ClientError>>",
        "key.typeusr" : "_T06ResultAAOySb10Commandant0B5ErrorOyxGGAC11CommandModeO_AC6SwitchVtcluD",
        "key.usr" : "s:10Commandant2looi6ResultACOySbAA0A5ErrorOyxGGAA11CommandModeO_AA6SwitchVtlF"
      }
    ]
  }
}, {
  "Sources\/Commandant\/Command.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 7635,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol CommandProtocol<\/Declaration>",
        "key.bodylength" : 473,
        "key.bodyoffset" : 294,
        "key.doc.column" : 17,
        "key.doc.comment" : "Represents a subcommand that can be executed with its own set of arguments.",
        "key.doc.declaration" : "public protocol CommandProtocol",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Command.swift\" line=\"13\" column=\"17\"><Name>CommandProtocol<\/Name><USR>s:10Commandant15CommandProtocolP<\/USR><Declaration>public protocol CommandProtocol<\/Declaration><CommentParts><Abstract><Para>Represents a subcommand that can be executed with its own set of arguments.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "CommandProtocol",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>CommandProtocol<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 500,
        "key.name" : "CommandProtocol",
        "key.namelength" : 15,
        "key.nameoffset" : 277,
        "key.offset" : 268,
        "key.parsed_declaration" : "public protocol CommandProtocol",
        "key.parsed_scope.end" : 30,
        "key.parsed_scope.start" : 13,
        "key.runtime_name" : "_TtP8__main__15CommandProtocol_",
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>associatedtype Options : <Type usr=\"s:10Commandant15OptionsProtocolP\">OptionsProtocol<\/Type><\/Declaration>",
            "key.doc.column" : 17,
            "key.doc.comment" : "The command's options type.",
            "key.doc.declaration" : "associatedtype Options : OptionsProtocol",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"16\" column=\"17\"><Name>Options<\/Name><USR>s:10Commandant15CommandProtocolP7Options<\/USR><Declaration>associatedtype Options : OptionsProtocol<\/Declaration><CommentParts><Abstract><Para>The command’s options type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 16,
            "key.doc.name" : "Options",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.associatedtype><syntaxtype.keyword>associatedtype<\/syntaxtype.keyword> <decl.name>Options<\/decl.name> : <ref.protocol usr=\"s:10Commandant15OptionsProtocolP\">OptionsProtocol<\/ref.protocol><\/decl.associatedtype>",
            "key.kind" : "source.lang.swift.decl.associatedtype",
            "key.length" : 7,
            "key.name" : "Options",
            "key.offset" : 346,
            "key.parsed_declaration" : "associatedtype Options: OptionsProtocol",
            "key.parsed_scope.end" : 16,
            "key.parsed_scope.start" : 16,
            "key.typename" : "Self.Options.Type",
            "key.typeusr" : "_T07Options10Commandant15CommandProtocolPQzmD",
            "key.usr" : "s:10Commandant15CommandProtocolP7Options"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var verb: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 536,
            "key.doc.column" : 6,
            "key.doc.comment" : "The action that users should specify to use this subcommand (e.g.,\n`help`).",
            "key.doc.declaration" : "var verb: String { get }",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"22\" column=\"6\"><Name>verb<\/Name><USR>s:10Commandant15CommandProtocolP4verbSSv<\/USR><Declaration>var verb: String { get }<\/Declaration><CommentParts><Abstract><Para>The action that users should specify to use this subcommand (e.g., <codeVoice>help<\/codeVoice>).<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 22,
            "key.doc.name" : "verb",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>verb<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 24,
            "key.name" : "verb",
            "key.namelength" : 4,
            "key.nameoffset" : 522,
            "key.offset" : 518,
            "key.parsed_declaration" : "var verb: String",
            "key.parsed_scope.end" : 22,
            "key.parsed_scope.start" : 22,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant15CommandProtocolP4verbSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var function: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 652,
            "key.doc.column" : 6,
            "key.doc.comment" : "A human-readable, high-level description of what this command is used\nfor.",
            "key.doc.declaration" : "var function: String { get }",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"26\" column=\"6\"><Name>function<\/Name><USR>s:10Commandant15CommandProtocolP8functionSSv<\/USR><Declaration>var function: String { get }<\/Declaration><CommentParts><Abstract><Para>A human-readable, high-level description of what this command is used for.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 26,
            "key.doc.name" : "function",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>function<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 28,
            "key.name" : "function",
            "key.namelength" : 8,
            "key.nameoffset" : 634,
            "key.offset" : 630,
            "key.parsed_declaration" : "var function: String",
            "key.parsed_scope.end" : 26,
            "key.parsed_scope.start" : 26,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant15CommandProtocolP8functionSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>func run(_ options: <Type usr=\"s:10Commandant15CommandProtocolP7Options\">Options<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;(), <Type usr=\"s:10Commandant15CommandProtocolP11ClientError\">ClientError<\/Type>&gt;<\/Declaration>",
            "key.doc.column" : 7,
            "key.doc.comment" : "Runs this subcommand with the given options.",
            "key.doc.declaration" : "func run(_ options: Options) -> Result<(), ClientError>",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"29\" column=\"7\"><Name>run(_:)<\/Name><USR>s:10Commandant15CommandProtocolP3run6ResultAEOyyt11ClientErrorQzG7OptionsQzF<\/USR><Declaration>func run(_ options: Options) -&gt; Result&lt;(), ClientError&gt;<\/Declaration><CommentParts><Abstract><Para>Runs this subcommand with the given options.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 29,
            "key.doc.name" : "run(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>run<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:10Commandant15CommandProtocolP7Options\">Options<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<tuple>()<\/tuple>, <ref.associatedtype usr=\"s:10Commandant15CommandProtocolP11ClientError\">ClientError<\/ref.associatedtype>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 55,
            "key.name" : "run(_:)",
            "key.namelength" : 23,
            "key.nameoffset" : 716,
            "key.offset" : 711,
            "key.parsed_declaration" : "func run(_ options: Options) -> Result<(), ClientError>",
            "key.parsed_scope.end" : 29,
            "key.parsed_scope.start" : 29,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : CommandProtocol> (Self) -> (Self.Options) -> Result<(), Self.ClientError>",
            "key.typeusr" : "_T06ResultAAOyyt11ClientErrorQzG7OptionsQzcD",
            "key.usr" : "s:10Commandant15CommandProtocolP3run6ResultAEOyyt11ClientErrorQzG7OptionsQzF"
          }
        ],
        "key.typename" : "CommandProtocol.Protocol",
        "key.typeusr" : "_T010Commandant15CommandProtocol_pmD",
        "key.usr" : "s:10Commandant15CommandProtocolP"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct CommandWrapper&lt;ClientError&gt; where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 997,
        "key.bodyoffset" : 847,
        "key.doc.column" : 15,
        "key.doc.comment" : "A type-erased command.",
        "key.doc.declaration" : "public struct CommandWrapper<ClientError> where ClientError : Error",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Command.swift\" line=\"33\" column=\"15\"><Name>CommandWrapper<\/Name><USR>s:10Commandant14CommandWrapperV<\/USR><Declaration>public struct CommandWrapper&lt;ClientError&gt; where ClientError : Error<\/Declaration><CommentParts><Abstract><Para>A type-erased command.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 33,
        "key.doc.name" : "CommandWrapper",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>CommandWrapper<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant14CommandWrapperV11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 1041,
        "key.name" : "CommandWrapper",
        "key.namelength" : 14,
        "key.nameoffset" : 811,
        "key.offset" : 804,
        "key.parsed_declaration" : "public struct CommandWrapper<ClientError: Error>",
        "key.parsed_scope.end" : 66,
        "key.parsed_scope.start" : 33,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let verb: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>verb<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 16,
            "key.name" : "verb",
            "key.namelength" : 4,
            "key.nameoffset" : 860,
            "key.offset" : 856,
            "key.parsed_declaration" : "public let verb: String",
            "key.parsed_scope.end" : 34,
            "key.parsed_scope.start" : 34,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant14CommandWrapperV4verbSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let function: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>function<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 20,
            "key.name" : "function",
            "key.namelength" : 8,
            "key.nameoffset" : 885,
            "key.offset" : 881,
            "key.parsed_declaration" : "public let function: String",
            "key.parsed_scope.end" : 35,
            "key.parsed_scope.start" : 35,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:10Commandant14CommandWrapperV8functionSSv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let run: (<Type usr=\"s:10Commandant14ArgumentParserC\">ArgumentParser<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;(), <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant14CommandWrapperV11ClientErrorxmfp\">ClientError<\/Type>&gt;&gt;<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>run<\/decl.name>: <decl.var.type>(<decl.var.parameter><decl.var.parameter.type><ref.class usr=\"s:10Commandant14ArgumentParserC\">ArgumentParser<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<tuple>()<\/tuple>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant14CommandWrapperV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;&gt;<\/decl.function.returntype><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 69,
            "key.name" : "run",
            "key.namelength" : 3,
            "key.nameoffset" : 916,
            "key.offset" : 912,
            "key.parsed_declaration" : "public let run: (ArgumentParser) -> Result<(), CommandantError<ClientError>>",
            "key.parsed_scope.end" : 37,
            "key.parsed_scope.start" : 37,
            "key.typename" : "(ArgumentParser) -> Result<(), CommandantError<ClientError>>",
            "key.typeusr" : "_T06ResultAAOyyt10Commandant0B5ErrorOyxGGAC14ArgumentParserCcD",
            "key.usr" : "s:10Commandant14CommandWrapperV3run6ResultAEOyytAA0A5ErrorOyxGGAA14ArgumentParserCcv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let usage: () -&gt; <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant14CommandWrapperV11ClientErrorxmfp\">ClientError<\/Type>&gt;?<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>usage<\/decl.name>: <decl.var.type>() -&gt; <decl.function.returntype><ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant14CommandWrapperV11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;?<\/decl.function.returntype><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 46,
            "key.name" : "usage",
            "key.namelength" : 5,
            "key.nameoffset" : 996,
            "key.offset" : 992,
            "key.parsed_declaration" : "public let usage: () -> CommandantError<ClientError>?",
            "key.parsed_scope.end" : 39,
            "key.parsed_scope.start" : 39,
            "key.typename" : "() -> CommandantError<ClientError>?",
            "key.typeusr" : "_T010Commandant0A5ErrorOyxGSgycD",
            "key.usr" : "s:10Commandant14CommandWrapperV5usageAA0A5ErrorOyxGSgycv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate init&lt;C&gt;(_ command: <Type usr=\"s:10Commandant14CommandWrapperVACyxGqd__c11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlu33_1DD6990CD6DFDE28F713A55F8EE2B70ELlfc1CL_qd__mfp\">C<\/Type>) where ClientError == C.ClientError, C : <Type usr=\"s:10Commandant15CommandProtocolP\">CommandProtocol<\/Type>, C.ClientError == C.Options.ClientError<\/Declaration>",
            "key.bodylength" : 633,
            "key.bodyoffset" : 1209,
            "key.doc.column" : 14,
            "key.doc.comment" : "Creates a command that wraps another.",
            "key.doc.declaration" : "fileprivate init<C>(_ command: C) where ClientError == C.ClientError, C : CommandProtocol, C.ClientError == C.Options.ClientError",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"42\" column=\"14\"><Name>init(_:)<\/Name><USR>s:10Commandant14CommandWrapperVACyxGqd__c11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlu33_1DD6990CD6DFDE28F713A55F8EE2B70ELlfc<\/USR><Declaration>fileprivate init&lt;C&gt;(_ command: C) where ClientError == C.ClientError, C : CommandProtocol, C.ClientError == C.Options.ClientError<\/Declaration><CommentParts><Abstract><Para>Creates a command that wraps another.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 42,
            "key.doc.name" : "init(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:10Commandant14CommandWrapperVACyxGqd__c11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlu33_1DD6990CD6DFDE28F713A55F8EE2B70ELlfc1CL_qd__mfp\"><decl.generic_type_param.name>C<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>command<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant14CommandWrapperVACyxGqd__c11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlu33_1DD6990CD6DFDE28F713A55F8EE2B70ELlfc1CL_qd__mfp\">C<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError == C.ClientError<\/decl.generic_type_requirement>, <decl.generic_type_requirement>C : <ref.protocol usr=\"s:10Commandant15CommandProtocolP\">CommandProtocol<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement>C.ClientError == C.Options.ClientError<\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 747,
            "key.name" : "init(_:)",
            "key.namelength" : 38,
            "key.nameoffset" : 1096,
            "key.offset" : 1096,
            "key.parsed_declaration" : "fileprivate init<C: CommandProtocol>(_ command: C) where C.ClientError == ClientError, C.Options.ClientError == ClientError",
            "key.parsed_scope.end" : 65,
            "key.parsed_scope.start" : 42,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError, C where ClientError == C.ClientError, C : CommandProtocol, C.ClientError == C.Options.ClientError> (CommandWrapper<ClientError>.Type) -> (C) -> CommandWrapper<ClientError>",
            "key.typeusr" : "_T010Commandant14CommandWrapperVyxGqd__c11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSluD",
            "key.usr" : "s:10Commandant14CommandWrapperVACyxGqd__c11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlu33_1DD6990CD6DFDE28F713A55F8EE2B70ELlfc"
          }
        ],
        "key.typename" : "CommandWrapper<ClientError>.Type",
        "key.typeusr" : "_T010Commandant14CommandWrapperVyxGmD",
        "key.usr" : "s:10Commandant14CommandWrapperV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum CommandMode<\/Declaration>",
        "key.bodylength" : 216,
        "key.bodyoffset" : 1928,
        "key.doc.column" : 13,
        "key.doc.comment" : "Describes the \"mode\" in which a command should run.",
        "key.doc.declaration" : "public enum CommandMode",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"69\" column=\"13\"><Name>CommandMode<\/Name><USR>s:10Commandant11CommandModeO<\/USR><Declaration>public enum CommandMode<\/Declaration><CommentParts><Abstract><Para>Describes the “mode” in which a command should run.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 69,
        "key.doc.name" : "CommandMode",
        "key.doc.type" : "Other",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>CommandMode<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 235,
        "key.name" : "CommandMode",
        "key.namelength" : 11,
        "key.nameoffset" : 1915,
        "key.offset" : 1910,
        "key.parsed_declaration" : "public enum CommandMode",
        "key.parsed_scope.end" : 76,
        "key.parsed_scope.start" : 69,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 30,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1999,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>case arguments(<Type usr=\"s:10Commandant14ArgumentParserC\">ArgumentParser<\/Type>)<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "Options should be parsed from the given command-line arguments.",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/Command.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"71\" column=\"7\"><Name>arguments<\/Name><USR>s:10Commandant11CommandModeO9argumentsAcA14ArgumentParserCcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Options should be parsed from the given command-line arguments.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 71,
                "key.doc.name" : "arguments",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/Command.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>arguments<\/decl.name>(<ref.class usr=\"s:10Commandant14ArgumentParserC\">ArgumentParser<\/ref.class>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 25,
                "key.name" : "arguments",
                "key.namelength" : 9,
                "key.nameoffset" : 2004,
                "key.offset" : 2004,
                "key.parsed_declaration" : "case arguments(ArgumentParser)",
                "key.parsed_scope.end" : 71,
                "key.parsed_scope.start" : 71,
                "key.typename" : "(CommandMode.Type) -> (ArgumentParser) -> CommandMode",
                "key.typeusr" : "_T010Commandant11CommandModeOAA14ArgumentParserCcACmcD",
                "key.usr" : "s:10Commandant11CommandModeO9argumentsAcA14ArgumentParserCcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 2133,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>case usage<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "Each option should record its usage information in an error, for\npresentation to the user.",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/Command.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"75\" column=\"7\"><Name>usage<\/Name><USR>s:10Commandant11CommandModeO5usageA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Each option should record its usage information in an error, for presentation to the user.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 75,
                "key.doc.name" : "usage",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/Command.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>usage<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.name" : "usage",
                "key.namelength" : 5,
                "key.nameoffset" : 2138,
                "key.offset" : 2138,
                "key.parsed_declaration" : "case usage",
                "key.parsed_scope.end" : 75,
                "key.parsed_scope.start" : 75,
                "key.typename" : "(CommandMode.Type) -> CommandMode",
                "key.typeusr" : "_T010Commandant11CommandModeOACmcD",
                "key.usr" : "s:10Commandant11CommandModeO5usageA2CmF"
              }
            ]
          }
        ],
        "key.typename" : "CommandMode.Type",
        "key.typeusr" : "_T010Commandant11CommandModeOmD",
        "key.usr" : "s:10Commandant11CommandModeO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public final class CommandRegistry&lt;ClientError&gt; where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.final"
          }
        ],
        "key.bodylength" : 1137,
        "key.bodyoffset" : 2256,
        "key.doc.column" : 20,
        "key.doc.comment" : "Maintains the list of commands available to run.",
        "key.doc.declaration" : "public final class CommandRegistry<ClientError> where ClientError : Error",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Command.swift\" line=\"79\" column=\"20\"><Name>CommandRegistry<\/Name><USR>s:10Commandant15CommandRegistryC<\/USR><Declaration>public final class CommandRegistry&lt;ClientError&gt; where ClientError : Error<\/Declaration><CommentParts><Abstract><Para>Maintains the list of commands available to run.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 79,
        "key.doc.name" : "CommandRegistry",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>CommandRegistry<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 1181,
        "key.name" : "CommandRegistry",
        "key.namelength" : 15,
        "key.nameoffset" : 2219,
        "key.offset" : 2213,
        "key.parsed_declaration" : "public final class CommandRegistry<ClientError: Error>",
        "key.parsed_scope.end" : 110,
        "key.parsed_scope.start" : 79,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private var commandsByVerb: [<Type usr=\"s:SS\">String<\/Type> : <Type usr=\"s:10Commandant14CommandWrapperV\">CommandWrapper<\/Type>&lt;ClientError&gt;]<\/Declaration>",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>commandsByVerb<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct> : <ref.struct usr=\"s:10Commandant14CommandWrapperV\">CommandWrapper<\/ref.struct>&lt;ClientError&gt;]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 63,
            "key.name" : "commandsByVerb",
            "key.namelength" : 14,
            "key.nameoffset" : 2270,
            "key.offset" : 2266,
            "key.parsed_declaration" : "private var commandsByVerb: [String: CommandWrapper<ClientError>] = [:]",
            "key.parsed_scope.end" : 80,
            "key.parsed_scope.start" : 80,
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.typename" : "[String : CommandWrapper<ClientError>]",
            "key.typeusr" : "_T0s10DictionaryVySS10Commandant14CommandWrapperVyxGGD",
            "key.usr" : "s:10Commandant15CommandRegistryC14commandsByVerb33_1DD6990CD6DFDE28F713A55F8EE2B70ELLs10DictionaryVySSAA0B7WrapperVyxGGv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var commands: [<Type usr=\"s:10Commandant14CommandWrapperV\">CommandWrapper<\/Type>&lt;<Type usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/Type>&gt;] { get }<\/Declaration>",
            "key.bodylength" : 69,
            "key.bodyoffset" : 2413,
            "key.doc.column" : 13,
            "key.doc.comment" : "All available commands.",
            "key.doc.declaration" : "public var commands: [CommandWrapper<ClientError>] { get }",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"83\" column=\"13\"><Name>commands<\/Name><USR>s:10Commandant15CommandRegistryC8commandsSayAA0B7WrapperVyxGGv<\/USR><Declaration>public var commands: [CommandWrapper&lt;ClientError&gt;] { get }<\/Declaration><CommentParts><Abstract><Para>All available commands.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 83,
            "key.doc.name" : "commands",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>commands<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:10Commandant14CommandWrapperV\">CommandWrapper<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 115,
            "key.name" : "commands",
            "key.namelength" : 8,
            "key.nameoffset" : 2372,
            "key.offset" : 2368,
            "key.parsed_declaration" : "public var commands: [CommandWrapper<ClientError>]",
            "key.parsed_scope.end" : 85,
            "key.parsed_scope.start" : 83,
            "key.typename" : "[CommandWrapper<ClientError>]",
            "key.typeusr" : "_T0Say10Commandant14CommandWrapperVyxGGD",
            "key.usr" : "s:10Commandant15CommandRegistryC8commandsSayAA0B7WrapperVyxGGv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init()<\/Declaration>",
            "key.bodylength" : 0,
            "key.bodyoffset" : 2501,
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 9,
            "key.name" : "init()",
            "key.namelength" : 6,
            "key.nameoffset" : 2493,
            "key.offset" : 2493,
            "key.parsed_declaration" : "public init()",
            "key.parsed_scope.end" : 87,
            "key.parsed_scope.start" : 87,
            "key.typename" : "<ClientError where ClientError : Error> (CommandRegistry<ClientError>.Type) -> () -> CommandRegistry<ClientError>",
            "key.typeusr" : "_T010Commandant15CommandRegistryCyxGycD",
            "key.usr" : "s:10Commandant15CommandRegistryCACyxGycfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func register&lt;C&gt;(_ command: <Type usr=\"s:10Commandant15CommandRegistryC8registeryqd__11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlF1CL_qd__mfp\">C<\/Type>) where ClientError == C.ClientError, C : <Type usr=\"s:10Commandant15CommandProtocolP\">CommandProtocol<\/Type>, C.ClientError == C.Options.ClientError<\/Declaration>",
            "key.bodylength" : 59,
            "key.bodyoffset" : 2799,
            "key.doc.column" : 14,
            "key.doc.comment" : "Registers the given command, making it available to run.\n\nIf another command was already registered with the same `verb`, it will\nbe overwritten.",
            "key.doc.declaration" : "public func register<C>(_ command: C) where ClientError == C.ClientError, C : CommandProtocol, C.ClientError == C.Options.ClientError",
            "key.doc.discussion" : [
              {
                "Para" : "If another command was already registered with the same `verb`, it will be overwritten."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"93\" column=\"14\"><Name>register(_:)<\/Name><USR>s:10Commandant15CommandRegistryC8registeryqd__11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlF<\/USR><Declaration>public func register&lt;C&gt;(_ command: C) where ClientError == C.ClientError, C : CommandProtocol, C.ClientError == C.Options.ClientError<\/Declaration><CommentParts><Abstract><Para>Registers the given command, making it available to run.<\/Para><\/Abstract><Discussion><Para>If another command was already registered with the same <codeVoice>verb<\/codeVoice>, it will be overwritten.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 93,
            "key.doc.name" : "register(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>register<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant15CommandRegistryC8registeryqd__11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlF1CL_qd__mfp\"><decl.generic_type_param.name>C<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>command<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant15CommandRegistryC8registeryqd__11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlF1CL_qd__mfp\">C<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError == C.ClientError<\/decl.generic_type_requirement>, <decl.generic_type_requirement>C : <ref.protocol usr=\"s:10Commandant15CommandProtocolP\">CommandProtocol<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement>C.ClientError == C.Options.ClientError<\/decl.generic_type_requirement><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 182,
            "key.name" : "register(_:)",
            "key.namelength" : 42,
            "key.nameoffset" : 2682,
            "key.offset" : 2677,
            "key.parsed_declaration" : "public func register<C: CommandProtocol>(_ command: C) where C.ClientError == ClientError, C.Options.ClientError == ClientError",
            "key.parsed_scope.end" : 95,
            "key.parsed_scope.start" : 93,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError, C where ClientError == C.ClientError, C : CommandProtocol, C.ClientError == C.Options.ClientError> (CommandRegistry<ClientError>) -> (C) -> ()",
            "key.typeusr" : "_T0yqd__c11ClientErrorQyd__Rsz10Commandant15CommandProtocolRd__7Options_AAQYd__ABRSluD",
            "key.usr" : "s:10Commandant15CommandRegistryC8registeryqd__11ClientErrorQyd__RszAA0B8ProtocolRd__7Options_AEQYd__AFRSlF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func run(command verb: <Type usr=\"s:SS\">String<\/Type>, arguments: [<Type usr=\"s:SS\">String<\/Type>]) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;(), <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/Type>&gt;&gt;?<\/Declaration>",
            "key.bodylength" : 54,
            "key.bodyoffset" : 3141,
            "key.doc.column" : 14,
            "key.doc.comment" : "Runs the command corresponding to the given verb, passing it the given\narguments.\n\nReturns the results of the execution, or nil if no such command exists.",
            "key.doc.declaration" : "public func run(command verb: String, arguments: [String]) -> Result<(), CommandantError<ClientError>>?",
            "key.doc.discussion" : [
              {
                "Para" : "Returns the results of the execution, or nil if no such command exists."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"101\" column=\"14\"><Name>run(command:arguments:)<\/Name><USR>s:10Commandant15CommandRegistryC3run6ResultAEOyytAA0A5ErrorOyxGGSgSS7command_SaySSG9argumentstF<\/USR><Declaration>public func run(command verb: String, arguments: [String]) -&gt; Result&lt;(), CommandantError&lt;ClientError&gt;&gt;?<\/Declaration><CommentParts><Abstract><Para>Runs the command corresponding to the given verb, passing it the given arguments.<\/Para><\/Abstract><Discussion><Para>Returns the results of the execution, or nil if no such command exists.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 101,
            "key.doc.name" : "run(command:arguments:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>run<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>command<\/decl.var.parameter.argument_label> <decl.var.parameter.name>verb<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>arguments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<tuple>()<\/tuple>, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;&gt;?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 153,
            "key.name" : "run(command:arguments:)",
            "key.namelength" : 46,
            "key.nameoffset" : 3048,
            "key.offset" : 3043,
            "key.parsed_declaration" : "public func run(command verb: String, arguments: [String]) -> Result<(), CommandantError<ClientError>>?",
            "key.parsed_scope.end" : 103,
            "key.parsed_scope.start" : 101,
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (CommandRegistry<ClientError>) -> (String, [String]) -> Result<(), CommandantError<ClientError>>?",
            "key.typeusr" : "_T06ResultAAOyyt10Commandant0B5ErrorOyxGGSgSS7command_SaySSG9argumentstcD",
            "key.usr" : "s:10Commandant15CommandRegistryC3run6ResultAEOyytAA0A5ErrorOyxGGSgSS7command_SaySSG9argumentstF"
          },
          {
            "key.annotated_decl" : "<Declaration>public subscript(verb: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:10Commandant14CommandWrapperV\">CommandWrapper<\/Type>&lt;<Type usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/Type>&gt;? { get }<\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "Returns the command matching the given verb, or nil if no such command\nis registered.",
            "key.doc.declaration" : "public subscript(verb: String) -> CommandWrapper<ClientError>? { get }",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"107\" column=\"9\"><Name>subscript(_:)<\/Name><USR>s:10Commandant15CommandRegistryC9subscriptAA0B7WrapperVyxGSgSSci<\/USR><Declaration>public subscript(verb: String) -&gt; CommandWrapper&lt;ClientError&gt;? { get }<\/Declaration><CommentParts><Abstract><Para>Returns the command matching the given verb, or nil if no such command is registered.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 107,
            "key.doc.name" : "subscript(_:)",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>verb<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:10Commandant14CommandWrapperV\">CommandWrapper<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/ref.generic_type_param>&gt;?<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 9,
            "key.name" : "subscript(_:)",
            "key.offset" : 3302,
            "key.parsed_declaration" : "public subscript(verb: String) -> CommandWrapper<ClientError>?",
            "key.parsed_scope.end" : 107,
            "key.parsed_scope.start" : 107,
            "key.typename" : "<ClientError where ClientError : Error> (String) -> CommandWrapper<ClientError>?",
            "key.typeusr" : "_T010Commandant14CommandWrapperVyxGSgSScD",
            "key.usr" : "s:10Commandant15CommandRegistryC9subscriptAA0B7WrapperVyxGSgSSci"
          }
        ],
        "key.typename" : "CommandRegistry<ClientError>.Type",
        "key.typeusr" : "_T010Commandant15CommandRegistryCyxGmD",
        "key.usr" : "s:10Commandant15CommandRegistryC"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class CommandRegistry&lt;ClientError&gt; where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 3532,
        "key.bodyoffset" : 3423,
        "key.doc.column" : 20,
        "key.doc.declaration" : "public final class CommandRegistry<ClientError> where ClientError : Error",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Command.swift\" line=\"79\" column=\"20\"><Name>CommandRegistry<\/Name><USR>s:10Commandant15CommandRegistryC<\/USR><Declaration>public final class CommandRegistry&lt;ClientError&gt; where ClientError : Error<\/Declaration><CommentParts><Abstract><Para>Maintains the list of commands available to run.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 79,
        "key.doc.name" : "CommandRegistry",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>CommandRegistry<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 3560,
        "key.name" : "CommandRegistry",
        "key.namelength" : 15,
        "key.nameoffset" : 3406,
        "key.offset" : 3396,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func main(defaultVerb: <Type usr=\"s:SS\">String<\/Type>, errorHandler: (<Type usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/Type>) -&gt; ()) -&gt; <Type usr=\"s:s5NeverO\">Never<\/Type><\/Declaration>",
            "key.bodylength" : 97,
            "key.bodyoffset" : 4307,
            "key.doc.column" : 14,
            "key.doc.comment" : "Hands off execution to the CommandRegistry, by parsing CommandLine.arguments\nand then running whichever command has been identified in the argument\nlist.\n\nIf the chosen command executes successfully, the process will exit with\na successful exit code.\n\nIf the chosen command fails, the provided error handler will be invoked,\nthen the process will exit with a failure exit code.\n\nIf a matching command could not be found but there is any `executable-verb`\nstyle subcommand executable in the caller's `$PATH`, the subcommand will\nbe executed.\n\nIf a matching command could not be found or a usage error occurred,\na helpful error message will be written to `stderr`, then the process\nwill exit with a failure error code.",
            "key.doc.declaration" : "public func main(defaultVerb: String, errorHandler: (ClientError) -> ()) -> Never",
            "key.doc.discussion" : [
              {
                "Para" : "If the chosen command executes successfully, the process will exit with a successful exit code."
              },
              {
                "Para" : "If the chosen command fails, the provided error handler will be invoked, then the process will exit with a failure exit code."
              },
              {
                "Para" : "If a matching command could not be found but there is any `executable-verb` style subcommand executable in the caller’s `$PATH`, the subcommand will be executed."
              },
              {
                "Para" : "If a matching command could not be found or a usage error occurred, a helpful error message will be written to `stderr`, then the process will exit with a failure error code."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"130\" column=\"14\"><Name>main(defaultVerb:errorHandler:)<\/Name><USR>s:10Commandant15CommandRegistryC4mains5NeverOSS11defaultVerb_yxc12errorHandlertF<\/USR><Declaration>public func main(defaultVerb: String, errorHandler: (ClientError) -&gt; ()) -&gt; Never<\/Declaration><CommentParts><Abstract><Para>Hands off execution to the CommandRegistry, by parsing CommandLine.arguments and then running whichever command has been identified in the argument list.<\/Para><\/Abstract><Discussion><Para>If the chosen command executes successfully, the process will exit with a successful exit code.<\/Para><Para>If the chosen command fails, the provided error handler will be invoked, then the process will exit with a failure exit code.<\/Para><Para>If a matching command could not be found but there is any <codeVoice>executable-verb<\/codeVoice> style subcommand executable in the caller’s <codeVoice>$PATH<\/codeVoice>, the subcommand will be executed.<\/Para><Para>If a matching command could not be found or a usage error occurred, a helpful error message will be written to <codeVoice>stderr<\/codeVoice>, then the process will exit with a failure error code.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 130,
            "key.doc.name" : "main(defaultVerb:errorHandler:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>main<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>defaultVerb<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>errorHandler<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>()<\/tuple><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:s5NeverO\">Never<\/ref.enum><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 175,
            "key.name" : "main(defaultVerb:errorHandler:)",
            "key.namelength" : 60,
            "key.nameoffset" : 4235,
            "key.offset" : 4230,
            "key.parsed_declaration" : "public func main(defaultVerb: String, errorHandler: (ClientError) -> ()) -> Never",
            "key.parsed_scope.end" : 132,
            "key.parsed_scope.start" : 130,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant15CommandRegistryC4mains5NeverOSaySSG9arguments_SS11defaultVerbyxc12errorHandlertF\">main(arguments:defaultVerb:errorHandler:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (CommandRegistry<ClientError>) -> (String, (ClientError) -> ()) -> Never",
            "key.typeusr" : "_T0s5NeverOSS11defaultVerb_yxc12errorHandlertcD",
            "key.usr" : "s:10Commandant15CommandRegistryC4mains5NeverOSS11defaultVerb_yxc12errorHandlertF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func main(arguments: [<Type usr=\"s:SS\">String<\/Type>], defaultVerb: <Type usr=\"s:SS\">String<\/Type>, errorHandler: (<Type usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/Type>) -&gt; ()) -&gt; <Type usr=\"s:s5NeverO\">Never<\/Type><\/Declaration>",
            "key.bodylength" : 850,
            "key.bodyoffset" : 5302,
            "key.doc.column" : 14,
            "key.doc.comment" : "Hands off execution to the CommandRegistry, by parsing `arguments`\nand then running whichever command has been identified in the argument\nlist.\n\nIf the chosen command executes successfully, the process will exit with\na successful exit code.\n\nIf the chosen command fails, the provided error handler will be invoked,\nthen the process will exit with a failure exit code.\n\nIf a matching command could not be found but there is any `executable-verb`\nstyle subcommand executable in the caller's `$PATH`, the subcommand will\nbe executed.\n\nIf a matching command could not be found or a usage error occurred,\na helpful error message will be written to `stderr`, then the process\nwill exit with a failure error code.",
            "key.doc.declaration" : "public func main(arguments: [String], defaultVerb: String, errorHandler: (ClientError) -> ()) -> Never",
            "key.doc.discussion" : [
              {
                "Para" : "If the chosen command executes successfully, the process will exit with a successful exit code."
              },
              {
                "Para" : "If the chosen command fails, the provided error handler will be invoked, then the process will exit with a failure exit code."
              },
              {
                "Para" : "If a matching command could not be found but there is any `executable-verb` style subcommand executable in the caller’s `$PATH`, the subcommand will be executed."
              },
              {
                "Para" : "If a matching command could not be found or a usage error occurred, a helpful error message will be written to `stderr`, then the process will exit with a failure error code."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"151\" column=\"14\"><Name>main(arguments:defaultVerb:errorHandler:)<\/Name><USR>s:10Commandant15CommandRegistryC4mains5NeverOSaySSG9arguments_SS11defaultVerbyxc12errorHandlertF<\/USR><Declaration>public func main(arguments: [String], defaultVerb: String, errorHandler: (ClientError) -&gt; ()) -&gt; Never<\/Declaration><CommentParts><Abstract><Para>Hands off execution to the CommandRegistry, by parsing <codeVoice>arguments<\/codeVoice> and then running whichever command has been identified in the argument list.<\/Para><\/Abstract><Discussion><Para>If the chosen command executes successfully, the process will exit with a successful exit code.<\/Para><Para>If the chosen command fails, the provided error handler will be invoked, then the process will exit with a failure exit code.<\/Para><Para>If a matching command could not be found but there is any <codeVoice>executable-verb<\/codeVoice> style subcommand executable in the caller’s <codeVoice>$PATH<\/codeVoice>, the subcommand will be executed.<\/Para><Para>If a matching command could not be found or a usage error occurred, a helpful error message will be written to <codeVoice>stderr<\/codeVoice>, then the process will exit with a failure error code.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 151,
            "key.doc.name" : "main(arguments:defaultVerb:errorHandler:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>main<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>arguments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>defaultVerb<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>errorHandler<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\">ClientError<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>()<\/tuple><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:s5NeverO\">Never<\/ref.enum><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 949,
            "key.name" : "main(arguments:defaultVerb:errorHandler:)",
            "key.namelength" : 81,
            "key.nameoffset" : 5209,
            "key.offset" : 5204,
            "key.parsed_declaration" : "public func main(arguments: [String], defaultVerb: String, errorHandler: (ClientError) -> ()) -> Never",
            "key.parsed_scope.end" : 188,
            "key.parsed_scope.start" : 151,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant15CommandRegistryC4mains5NeverOSS11defaultVerb_yxc12errorHandlertF\">main(defaultVerb:errorHandler:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<ClientError where ClientError : Error> (CommandRegistry<ClientError>) -> ([String], String, (ClientError) -> ()) -> Never",
            "key.typeusr" : "_T0s5NeverOSaySSG9arguments_SS11defaultVerbyxc12errorHandlertcD",
            "key.usr" : "s:10Commandant15CommandRegistryC4mains5NeverOSaySSG9arguments_SS11defaultVerbyxc12errorHandlertF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private func executeSubcommandIfExists(_ executableName: <Type usr=\"s:SS\">String<\/Type>, verb: <Type usr=\"s:SS\">String<\/Type>, arguments: [<Type usr=\"s:SS\">String<\/Type>]) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type>?<\/Declaration>",
            "key.bodylength" : 489,
            "key.bodyoffset" : 6464,
            "key.doc.column" : 15,
            "key.doc.comment" : "Finds and executes a subcommand which exists in your $PATH. The executable\nname must be in the form of `executable-verb`.\n\n- Returns: The exit status of found subcommand or nil.",
            "key.doc.declaration" : "private func executeSubcommandIfExists(_ executableName: String, verb: String, arguments: [String]) -> Int32?",
            "key.doc.file" : "Sources\/Commandant\/Command.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/Command.swift\" line=\"194\" column=\"15\"><Name>executeSubcommandIfExists(_:verb:arguments:)<\/Name><USR>s:10Commandant15CommandRegistryC25executeSubcommandIfExists33_1DD6990CD6DFDE28F713A55F8EE2B70ELLs5Int32VSgSS_SS4verbSaySSG9argumentstF<\/USR><Declaration>private func executeSubcommandIfExists(_ executableName: String, verb: String, arguments: [String]) -&gt; Int32?<\/Declaration><CommentParts><Abstract><Para>Finds and executes a subcommand which exists in your $PATH. The executable name must be in the form of <codeVoice>executable-verb<\/codeVoice>.<\/Para><\/Abstract><ResultDiscussion><Para>The exit status of found subcommand or nil.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 194,
            "key.doc.name" : "executeSubcommandIfExists(_:verb:arguments:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "The exit status of found subcommand or nil."
              }
            ],
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/Command.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>executeSubcommandIfExists<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>executableName<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>verb<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>arguments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 593,
            "key.name" : "executeSubcommandIfExists(_:verb:arguments:)",
            "key.namelength" : 86,
            "key.nameoffset" : 6366,
            "key.offset" : 6361,
            "key.parsed_declaration" : "private func executeSubcommandIfExists(_ executableName: String, verb: String, arguments: [String]) -> Int32?",
            "key.parsed_scope.end" : 213,
            "key.parsed_scope.start" : 194,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func launchTask(_ path: <Type usr=\"s:SS\">String<\/Type>, arguments: [<Type usr=\"s:SS\">String<\/Type>]) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
                "key.bodylength" : 159,
                "key.bodyoffset" : 6614,
                "key.filepath" : "Sources\/Commandant\/Command.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>launchTask<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>path<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>arguments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 223,
                "key.name" : "launchTask(_:arguments:)",
                "key.namelength" : 47,
                "key.nameoffset" : 6556,
                "key.offset" : 6551,
                "key.parsed_declaration" : "func launchTask(_ path: String, arguments: [String]) -> Int32",
                "key.parsed_scope.end" : 206,
                "key.parsed_scope.start" : 197,
                "key.substructure" : [

                ],
                "key.typename" : "<ClientError where ClientError : Error> (String, arguments: [String]) -> Int32",
                "key.typeusr" : "_T0s5Int32VSS_SaySSG9argumentstcs5ErrorRzluD",
                "key.usr" : "s:10Commandant15CommandRegistryC25executeSubcommandIfExists33_1DD6990CD6DFDE28F713A55F8EE2B70ELLs5Int32VSgSS_SS4verbSaySSG9argumentstF10launchTaskL_AGSS_AjKts5ErrorRzlF"
              }
            ],
            "key.typename" : "<ClientError where ClientError : Error> (CommandRegistry<ClientError>) -> (String, String, [String]) -> Int32?",
            "key.typeusr" : "_T0s5Int32VSgSS_SS4verbSaySSG9argumentstcD",
            "key.usr" : "s:10Commandant15CommandRegistryC25executeSubcommandIfExists33_1DD6990CD6DFDE28F713A55F8EE2B70ELLs5Int32VSgSS_SS4verbSaySSG9argumentstF"
          }
        ],
        "key.typename" : "CommandRegistry<ClientError>.Type",
        "key.typeusr" : "_T010Commandant15CommandRegistryCyxGmD",
        "key.usr" : "s:10Commandant15CommandRegistryC"
      },
      {
        "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
        "key.length" : 25,
        "key.name" : "MARK: - migration support",
        "key.namelength" : 0,
        "key.nameoffset" : 0,
        "key.offset" : 6961
      },
      {
        "key.annotated_decl" : "<Declaration>public enum CommandMode<\/Declaration>",
        "key.bodylength" : 264,
        "key.bodyoffset" : 7113,
        "key.doc.column" : 13,
        "key.doc.declaration" : "public enum CommandMode",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/Command.swift\" line=\"69\" column=\"13\"><Name>CommandMode<\/Name><USR>s:10Commandant11CommandModeO<\/USR><Declaration>public enum CommandMode<\/Declaration><CommentParts><Abstract><Para>Describes the “mode” in which a command should run.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 69,
        "key.doc.name" : "CommandMode",
        "key.doc.type" : "Other",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>CommandMode<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 288,
        "key.name" : "CommandMode",
        "key.namelength" : 11,
        "key.nameoffset" : 7100,
        "key.offset" : 7090,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.available"
              }
            ],
            "key.bodylength" : 30,
            "key.bodyoffset" : 7240,
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 95,
            "key.name" : "Arguments(_:)",
            "key.namelength" : 35,
            "key.nameoffset" : 7188,
            "key.offset" : 7176,
            "key.substructure" : [

            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.available"
              }
            ],
            "key.bodylength" : 18,
            "key.bodyoffset" : 7357,
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 50,
            "key.name" : "Usage",
            "key.namelength" : 5,
            "key.nameoffset" : 7337,
            "key.offset" : 7326,
            "key.typename" : "CommandMode"
          }
        ],
        "key.typename" : "CommandMode.Type",
        "key.typeusr" : "_T010Commandant11CommandModeOmD",
        "key.usr" : "s:10Commandant11CommandModeO"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class CommandRegistry&lt;ClientError&gt; where ClientError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
        "key.bodylength" : 226,
        "key.bodyoffset" : 7407,
        "key.doc.column" : 20,
        "key.doc.declaration" : "public final class CommandRegistry<ClientError> where ClientError : Error",
        "key.doc.file" : "Sources\/Commandant\/Command.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/Command.swift\" line=\"79\" column=\"20\"><Name>CommandRegistry<\/Name><USR>s:10Commandant15CommandRegistryC<\/USR><Declaration>public final class CommandRegistry&lt;ClientError&gt; where ClientError : Error<\/Declaration><CommentParts><Abstract><Para>Maintains the list of commands available to run.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 79,
        "key.doc.name" : "CommandRegistry",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/Command.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>CommandRegistry<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Commandant15CommandRegistryC11ClientErrorxmfp\"><decl.generic_type_param.name>ClientError<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>ClientError : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 254,
        "key.name" : "CommandRegistry",
        "key.namelength" : 15,
        "key.nameoffset" : 7390,
        "key.offset" : 7380,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.available"
              }
            ],
            "key.bodylength" : 52,
            "key.bodyoffset" : 7579,
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 152,
            "key.name" : "runCommand(_:arguments:)",
            "key.namelength" : 47,
            "key.nameoffset" : 7485,
            "key.offset" : 7480,
            "key.substructure" : [

            ]
          }
        ],
        "key.typename" : "CommandRegistry<ClientError>.Type",
        "key.typeusr" : "_T010Commandant15CommandRegistryCyxGmD",
        "key.usr" : "s:10Commandant15CommandRegistryC"
      }
    ]
  }
}, {
  "Sources\/Commandant\/ArgumentParser.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 4953,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private enum RawArgument : <Type usr=\"s:s9EquatableP\">Equatable<\/Type><\/Declaration>",
        "key.bodylength" : 289,
        "key.bodyoffset" : 280,
        "key.doc.column" : 14,
        "key.doc.comment" : "Represents an argument passed on the command line.",
        "key.doc.declaration" : "private enum RawArgument : Equatable",
        "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"13\" column=\"14\"><Name>RawArgument<\/Name><USR>s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO<\/USR><Declaration>private enum RawArgument : Equatable<\/Declaration><CommentParts><Abstract><Para>Represents an argument passed on the command line.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 13,
        "key.doc.name" : "RawArgument",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 269
          }
        ],
        "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>RawArgument<\/decl.name> : <ref.protocol usr=\"s:s9EquatableP\">Equatable<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 319,
        "key.name" : "RawArgument",
        "key.namelength" : 11,
        "key.nameoffset" : 256,
        "key.offset" : 251,
        "key.parsed_declaration" : "private enum RawArgument: Equatable",
        "key.parsed_scope.end" : 23,
        "key.parsed_scope.start" : 13,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 16,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 355,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>case key(<Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "A key corresponding to an option (e.g., `verbose` for `--verbose`).",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"15\" column=\"7\"><Name>key<\/Name><USR>s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO3keyADSScADmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>A key corresponding to an option (e.g., <codeVoice>verbose<\/codeVoice> for <codeVoice>--verbose<\/codeVoice>).<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 15,
                "key.doc.name" : "key",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>key<\/decl.name>(<ref.struct usr=\"s:SS\">String<\/ref.struct>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 11,
                "key.name" : "key",
                "key.namelength" : 3,
                "key.nameoffset" : 360,
                "key.offset" : 360,
                "key.parsed_declaration" : "case key(String)",
                "key.parsed_scope.end" : 15,
                "key.parsed_scope.start" : 15,
                "key.typename" : "(RawArgument.Type) -> (String) -> RawArgument",
                "key.typeusr" : "_T010Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLOSScADmcD",
                "key.usr" : "s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO3keyADSScADmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 18,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 462,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>case value(<Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "A value, either associated with an option or passed as a positional\nargument.",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"19\" column=\"7\"><Name>value<\/Name><USR>s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO5valueADSScADmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>A value, either associated with an option or passed as a positional argument.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 19,
                "key.doc.name" : "value",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>value<\/decl.name>(<ref.struct usr=\"s:SS\">String<\/ref.struct>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 13,
                "key.name" : "value",
                "key.namelength" : 5,
                "key.nameoffset" : 467,
                "key.offset" : 467,
                "key.parsed_declaration" : "case value(String)",
                "key.parsed_scope.end" : 19,
                "key.parsed_scope.start" : 19,
                "key.typename" : "(RawArgument.Type) -> (String) -> RawArgument",
                "key.typeusr" : "_T010Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLOSScADmcD",
                "key.usr" : "s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO5valueADSScADmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 25,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 543,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>case flag(<Type usr=\"s:s3SetV\">Set<\/Type>&lt;<Type usr=\"s:s9CharacterV\">Character<\/Type>&gt;)<\/Declaration>",
                "key.doc.column" : 7,
                "key.doc.comment" : "One or more flag arguments (e.g 'r' and 'f' for `-rf`)",
                "key.doc.declaration" : "",
                "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
                "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"22\" column=\"7\"><Name>flag<\/Name><USR>s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO4flagADs3SetVys9CharacterVGcADmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>One or more flag arguments (e.g ‘r’ and ‘f’ for <codeVoice>-rf<\/codeVoice>)<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 22,
                "key.doc.name" : "flag",
                "key.doc.type" : "Other",
                "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>flag<\/decl.name>(<ref.struct usr=\"s:s3SetV\">Set<\/ref.struct>&lt;<ref.struct usr=\"s:s9CharacterV\">Character<\/ref.struct>&gt;)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 20,
                "key.name" : "flag",
                "key.namelength" : 4,
                "key.nameoffset" : 548,
                "key.offset" : 548,
                "key.parsed_declaration" : "case flag(Set<Character>)",
                "key.parsed_scope.end" : 22,
                "key.parsed_scope.start" : 22,
                "key.typename" : "(RawArgument.Type) -> (Set<Character>) -> RawArgument",
                "key.typeusr" : "_T010Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLOs3SetVys9CharacterVGcADmcD",
                "key.usr" : "s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO4flagADs3SetVys9CharacterVGcADmF"
              }
            ]
          }
        ],
        "key.typename" : "RawArgument.Type",
        "key.typeusr" : "_T010Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLOmD",
        "key.usr" : "s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private func ==(lhs: <Type usr=\"s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO\">RawArgument<\/Type>, rhs: <Type usr=\"s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO\">RawArgument<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
        "key.bodylength" : 239,
        "key.bodyoffset" : 633,
        "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>==<\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO\">RawArgument<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO\">RawArgument<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 293,
        "key.name" : "==(_:_:)",
        "key.namelength" : 38,
        "key.nameoffset" : 585,
        "key.offset" : 580,
        "key.parsed_declaration" : "private func ==(lhs: RawArgument, rhs: RawArgument) -> Bool",
        "key.parsed_scope.end" : 39,
        "key.parsed_scope.start" : 25,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation15AffineTransformV2eeoiSbAC_ACtFZ\">==(_: AffineTransform, _: AffineTransform) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation8CalendarV2eeoiSbAC_ACtFZ\">==(_: Calendar, _: Calendar) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation12CharacterSetV2eeoiSbAC_ACtFZ\">==(_: CharacterSet, _: CharacterSet) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation4DataV2eeoiSbAC_ACtFZ\">==(_: Data, _: Data) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation4DateV2eeoiSbAC_ACtFZ\">==(_: Date, _: Date) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation14DateComponentsV2eeoiSbAC_ACtFZ\">==(_: DateComponents, _: DateComponents) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation12DateIntervalV2eeoiSbAC_ACtFZ\">==(_: DateInterval, _: DateInterval) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC7DecimalV10FoundationE2eeoiSbAB_ABtFZ\">==(_: Decimal, _: Decimal) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation9IndexPathV2eeoiSbAC_ACtFZ\">==(_: IndexPath, _: IndexPath) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation8IndexSetV0B0V2eeoiSbAE_AEtFZ\">==(_: IndexSet.Index, _: IndexSet.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation8IndexSetV9RangeViewV2eeoiSbAE_AEtFZ\">==(_: IndexSet.RangeView, _: IndexSet.RangeView) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation8IndexSetV2eeoiSbAC_ACtFZ\">==(_: IndexSet, _: IndexSet) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation6LocaleV2eeoiSbAC_ACtFZ\">==(_: Locale, _: Locale) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation11MeasurementV2eeoiSbACyqd__G_ACyqd_0_GtSo4UnitCRbd__AHRbd_0_r0_lFZ\">==&lt;LeftHandSideType, RightHandSideType&gt;(_: Measurement&lt;LeftHandSideType&gt;, _: Measurement&lt;RightHandSideType&gt;) -&gt; Bool where LeftHandSideType : Unit, RightHandSideType : Unit<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation12NotificationV2eeoiSbAC_ACtFZ\">==(_: Notification, _: Notification) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation16__BridgedNSErrorPA2aBRzs16RawRepresentableRzs13SignedInteger0D5ValuesADPRpzlE2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation16__BridgedNSErrorPA2aBRzs16RawRepresentableRzs15UnsignedInteger0D5ValuesADPRpzlE2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation21_BridgedStoredNSErrorPAAE2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC8_NSRangeV10FoundationE2eeoiSbAB_ABtFZ\">==(_: NSRange, _: NSRange) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SS10FoundationE8EncodingV2eeoiSbAC_ACtFZ\">==(_: String.Encoding, _: String.Encoding) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation20PersonNameComponentsV2eeoiSbAC_ACtFZ\">==(_: PersonNameComponents, _: PersonNameComponents) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation8TimeZoneV2eeoiSbAC_ACtFZ\">==(_: TimeZone, _: TimeZone) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation3URLV2eeoiSbAC_ACtFZ\">==(_: URL, _: URL) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation13URLComponentsV2eeoiSbAC_ACtFZ\">==(_: URLComponents, _: URLComponents) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation12URLQueryItemV2eeoiSbAC_ACtFZ\">==(_: URLQueryItem, _: URLQueryItem) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation10URLRequestV2eeoiSbAC_ACtFZ\">==(_: URLRequest, _: URLRequest) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Foundation4UUIDV2eeoiSbAC_ACtFZ\">==(_: UUID, _: UUID) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:14CoreFoundation9_CFObjectPAAE2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:6Darwin2eeoiSbAA0A7BooleanV_ADtF\">==(_: DarwinBoolean, _: DarwinBoolean) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:8Dispatch2eeoiSbAA0A3QoSV_ADtF\">==(_: DispatchQoS, _: DispatchQoS) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:8Dispatch0A4TimeV2eeoiSbAC_ACtFZ\">==(_: DispatchTime, _: DispatchTime) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:8Dispatch0A8WallTimeV2eeoiSbAC_ACtFZ\">==(_: DispatchWallTime, _: DispatchWallTime) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:8Dispatch0A12TimeIntervalO2eeoiSbAC_ACtFZ\">==(_: DispatchTimeInterval, _: DispatchTimeInterval) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10ObjectiveC2eeoiSbAA8SelectorV_ADtF\">==(_: Selector, _: Selector) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10ObjectiveC2eeoiSbSo8NSObjectC_ADtF\">==(_: NSObject, _: NSObject) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC17CGAffineTransformV12CoreGraphicsE2eeoiSbAB_ABtFZ\">==(_: CGAffineTransform, _: CGAffineTransform) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC7CGPointV12CoreGraphicsE2eeoiSbAB_ABtFZ\">==(_: CGPoint, _: CGPoint) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC6CGSizeV12CoreGraphicsE2eeoiSbAB_ABtFZ\">==(_: CGSize, _: CGSize) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC8CGVectorV12CoreGraphicsE2eeoiSbAB_ABtFZ\">==(_: CGVector, _: CGVector) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC6CGRectV12CoreGraphicsE2eeoiSbAB_ABtFZ\">==(_: CGRect, _: CGRect) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbs15ContiguousArrayVyxG_ADts9EquatableRzlF\">==&lt;Element&gt;(_: ContiguousArray&lt;Element&gt;, _: ContiguousArray&lt;Element&gt;) -&gt; Bool where Element : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbs10ArraySliceVyxG_ADts9EquatableRzlF\">==&lt;Element&gt;(_: ArraySlice&lt;Element&gt;, _: ArraySlice&lt;Element&gt;) -&gt; Bool where Element : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbSayxG_ABts9EquatableRzlF\">==&lt;Element&gt;(_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Bool where Element : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbypXpSg_ABtF\">==(_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbx_xts16RawRepresentableRzs9Equatable0B5ValueRpzlF\">==&lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbxSg_ABts9EquatableRzlF\">==&lt;T&gt;(_: T?, _: T?) -&gt; Bool where T : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbxSg_s26_OptionalNilComparisonTypeVtlF\">==&lt;T&gt;(_: T?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbs26_OptionalNilComparisonTypeV_xSgtlF\">==&lt;T&gt;(_: _OptionalNilComparisonType, _: T?) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbyt_yttF\">==(_: (), _: ()) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbx_q_t_x_q_tts9EquatableRzsABR_r0_lF\">==&lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbx_q_q0_t_x_q_q0_tts9EquatableRzsABR_sABR0_r1_lF\">==&lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbx_q_q0_q1_t_x_q_q0_q1_tts9EquatableRzsABR_sABR0_sABR1_r2_lF\">==&lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbx_q_q0_q1_q2_t_x_q_q0_q1_q2_tts9EquatableRzsABR_sABR0_sABR1_sABR2_r3_lF\">==&lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiSbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_tts9EquatableRzsABR_sABR0_sABR1_sABR2_sABR3_r4_lF\">==&lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiS2b_SbtFZ\">==(_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s33AutoreleasingUnsafeMutablePointerV2eeoiSbAByxG_ADtFZ\">==(_: AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;, _: AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s9CharacterV2eeoiSbAB_ABtFZ\">==(_: Character, _: Character) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s9CharacterV17UnicodeScalarViewV5IndexV2eeoiSbAF_AFtFZ\">==(_: Character.UnicodeScalarView.Index, _: Character.UnicodeScalarView.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiSbAB_ABtFZ\">==(_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s16ClosedRangeIndexV2eeoiSbAByxG_ADtFZ\">==(_: ClosedRangeIndex&lt;Bound&gt;, _: ClosedRangeIndex&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiSbAB_ABtFZ\">==(_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s18LazyDropWhileIndexV2eeoiSbAByxG_ADtFZ\">==(_: LazyDropWhileIndex&lt;Base&gt;, _: LazyDropWhileIndex&lt;Base&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiSbAByxG_ADtFZ\">==(_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s9EquatableP2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s22FlattenCollectionIndexV2eeoiSbAByxG_ADtFZ\">==(_: FlattenCollectionIndex&lt;BaseElements&gt;, _: FlattenCollectionIndex&lt;BaseElements&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s35FlattenBidirectionalCollectionIndexV2eeoiSbAByxG_ADtFZ\">==(_: FlattenBidirectionalCollectionIndex&lt;BaseElements&gt;, _: FlattenBidirectionalCollectionIndex&lt;BaseElements&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s13FloatingPointPsE2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s3SetV2eeoiSbAByxG_ADtFZ\">==(_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s10DictionaryV4KeysV2eeoiSbADyxq__G_AFtFZ\">==(_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s10DictionaryVss8HashableRzs9EquatableR_r0_lE2eeoiSbAByxq_G_AFtFZ\">==(_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s3SetV5IndexV2eeoiSbADyx_G_AFtFZ\">==(_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s10DictionaryV5IndexV2eeoiSbADyxq__G_AFtFZ\">==(_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiSbAB_ABtFZ\">==(_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s13BinaryIntegerPsE2eeoiSbx_qd__tsAARd__lFZ\">==&lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiSbAB_ABtFZ\">==(_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiSbAB_ABtFZ\">==(_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiSbAB_ABtFZ\">==(_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiSbAB_ABtFZ\">==(_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiSbAB_ABtFZ\">==(_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiSbAB_ABtFZ\">==(_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiSbAB_ABtFZ\">==(_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiSbAB_ABtFZ\">==(_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiSbSu_SutFZ\">==(_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiSbSi_SitFZ\">==(_: Int, _: Int) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiSbAB_ABtFZ\">==(_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiSbAByxq_G_ADtFZ\">==(_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiSbAD_ADtFZ\">==(_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s16ObjectIdentifierV2eeoiSbAB_ABtFZ\">==(_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s20LazyPrefixWhileIndexV2eeoiSbAByxG_ADtFZ\">==(_: LazyPrefixWhileIndex&lt;Base&gt;, _: LazyPrefixWhileIndex&lt;Base&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5RangeV2eeoiSbAByxG_ADtFZ\">==(_: Range&lt;Bound&gt;, _: Range&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s14CountableRangeV2eeoiSbAByxG_ADtFZ\">==(_: CountableRange&lt;Bound&gt;, _: CountableRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s11ClosedRangeV2eeoiSbAByxG_ADtFZ\">==(_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s20CountableClosedRangeV2eeoiSbAByxG_ADtFZ\">==(_: CountableClosedRange&lt;Bound&gt;, _: CountableClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s13ReversedIndexV2eeoiSbAByxG_ADtFZ\">==(_: ReversedIndex&lt;Base&gt;, _: ReversedIndex&lt;Base&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s25ReversedRandomAccessIndexV2eeoiSbAByxG_ADtFZ\">==(_: ReversedRandomAccessIndex&lt;Base&gt;, _: ReversedRandomAccessIndex&lt;Base&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s10StrideablePsE2eeoiSbx_xtFZ\">==(_: Self, _: Self) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiSbSS_SStFZ\">==(_: String, _: String) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiSbAB_ABtFZ\">==(_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s14StringProtocolPsE2eeoiSbx_qd__tsAARd__lFZ\">==&lt;R&gt;(_: Self, _: R) -&gt; Bool where R : StringProtocol<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiSbADyxq__G_AFtFZ\">==(_: _UIntBuffer&lt;Storage, Element&gt;.Index, _: _UIntBuffer&lt;Storage, Element&gt;.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sp2eeoiSbSpyxG_ABtFZ\">==(_: UnsafeMutablePointer&lt;Pointee&gt;, _: UnsafeMutablePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SP2eeoiSbSPyxG_ABtFZ\">==(_: UnsafePointer&lt;Pointee&gt;, _: UnsafePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sv2eeoiSbSv_SvtFZ\">==(_: UnsafeMutableRawPointer, _: UnsafeMutableRawPointer) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SV2eeoiSbSV_SVtFZ\">==(_: UnsafeRawPointer, _: UnsafeRawPointer) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiSbAB_ABtFZ\">==(_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiSbADyx_G_AFtFZ\">==(_: _ValidUTF8Buffer&lt;Storage&gt;.Index, _: _ValidUTF8Buffer&lt;Storage&gt;.Index) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SC30_SwiftNSOperatingSystemVersionVsE2eeoiSbAB_ABtFZ\">==(_: _SwiftNSOperatingSystemVersion, _: _SwiftNSOperatingSystemVersion) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiSbAB_ABtFZ\">==(_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:6Result2eeoiSbx_xtAA0A8ProtocolRzs9Equatable5ErrorRpzsAD5ValueRpzlF\">==&lt;T&gt;(_: T, _: T) -&gt; Bool where T : ResultProtocol, T.Error : Equatable, T.Value : Equatable<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:6Result7NoErrorO2eeoiSbAC_ACtFZ\">==(_: NoError, _: NoError) -&gt; Bool<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "(RawArgument, RawArgument) -> Bool",
        "key.typeusr" : "_T0Sb10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO_ADtcD",
        "key.usr" : "s:10Commandant2eeoi33_BA859BFBBE9DF3838A11641CB273713ELLSbAA11RawArgumentACLLO_AEtF"
      },
      {
        "key.annotated_decl" : "<Declaration>private enum RawArgument : <Type usr=\"s:s9EquatableP\">Equatable<\/Type><\/Declaration>",
        "key.bodylength" : 214,
        "key.bodyoffset" : 923,
        "key.doc.column" : 14,
        "key.doc.declaration" : "private enum RawArgument : Equatable",
        "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"13\" column=\"14\"><Name>RawArgument<\/Name><USR>s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO<\/USR><Declaration>private enum RawArgument : Equatable<\/Declaration><CommentParts><Abstract><Para>Represents an argument passed on the command line.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 13,
        "key.doc.name" : "RawArgument",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 898
          }
        ],
        "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>RawArgument<\/decl.name> : <ref.protocol usr=\"s:s9EquatableP\">Equatable<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 263,
        "key.name" : "RawArgument",
        "key.namelength" : 11,
        "key.nameoffset" : 885,
        "key.offset" : 875,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 173,
            "key.bodyoffset" : 962,
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Instead of accessing this property directly, convert an instance of any type to a string by using the `String(describing:)` initializer. For example:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSv<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Instead of accessing this property directly, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 199,
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 941,
            "key.offset" : 937,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
              }
            ],
            "key.parsed_declaration" : "fileprivate var description: String",
            "key.parsed_scope.end" : 53,
            "key.parsed_scope.start" : 42,
            "key.typename" : "String",
            "key.typeusr" : "_T0SSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSv"
          }
        ],
        "key.typename" : "RawArgument.Type",
        "key.typeusr" : "_T010Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLOmD",
        "key.usr" : "s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public final class ArgumentParser<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.final"
          }
        ],
        "key.bodylength" : 3717,
        "key.bodyoffset" : 1234,
        "key.doc.column" : 20,
        "key.doc.comment" : "Destructively parses a list of command-line arguments.",
        "key.doc.declaration" : "public final class ArgumentParser",
        "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.doc.full_as_xml" : "<Class file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"57\" column=\"20\"><Name>ArgumentParser<\/Name><USR>s:10Commandant14ArgumentParserC<\/USR><Declaration>public final class ArgumentParser<\/Declaration><CommentParts><Abstract><Para>Destructively parses a list of command-line arguments.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 57,
        "key.doc.name" : "ArgumentParser",
        "key.doc.type" : "Class",
        "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ArgumentParser<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 3740,
        "key.name" : "ArgumentParser",
        "key.namelength" : 14,
        "key.nameoffset" : 1218,
        "key.offset" : 1212,
        "key.parsed_declaration" : "public final class ArgumentParser",
        "key.parsed_scope.end" : 192,
        "key.parsed_scope.start" : 57,
        "key.runtime_name" : "_TtC8__main__14ArgumentParser",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private var rawArguments: [<Type usr=\"s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO\">RawArgument<\/Type>]<\/Declaration>",
            "key.doc.column" : 14,
            "key.doc.comment" : "The remaining arguments to be extracted, in their raw form.",
            "key.doc.declaration" : "private var rawArguments: [Commandant.RawArgument]",
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"59\" column=\"14\"><Name>rawArguments<\/Name><USR>s:10Commandant14ArgumentParserC12rawArguments33_BA859BFBBE9DF3838A11641CB273713ELLSayAA03RawB0AELLOGv<\/USR><Declaration>private var rawArguments: [Commandant.RawArgument]<\/Declaration><CommentParts><Abstract><Para>The remaining arguments to be extracted, in their raw form.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 59,
            "key.doc.name" : "rawArguments",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>rawArguments<\/decl.name>: <decl.var.type>[<ref.enum usr=\"s:10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLO\">RawArgument<\/ref.enum>]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 36,
            "key.name" : "rawArguments",
            "key.namelength" : 12,
            "key.nameoffset" : 1313,
            "key.offset" : 1309,
            "key.parsed_declaration" : "private var rawArguments: [RawArgument] = []",
            "key.parsed_scope.end" : 59,
            "key.parsed_scope.start" : 59,
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.typename" : "[RawArgument]",
            "key.typeusr" : "_T0Say10Commandant11RawArgument33_BA859BFBBE9DF3838A11641CB273713ELLOGD",
            "key.usr" : "s:10Commandant14ArgumentParserC12rawArguments33_BA859BFBBE9DF3838A11641CB273713ELLSayAA03RawB0AELLOGv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ arguments: [<Type usr=\"s:SS\">String<\/Type>])<\/Declaration>",
            "key.bodylength" : 745,
            "key.bodyoffset" : 1461,
            "key.doc.column" : 9,
            "key.doc.comment" : "Initializes the generator from a simple list of command-line arguments.",
            "key.doc.declaration" : "public init(_ arguments: [String])",
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"62\" column=\"9\"><Name>init(_:)<\/Name><USR>s:10Commandant14ArgumentParserCACSaySSGcfc<\/USR><Declaration>public init(_ arguments: [String])<\/Declaration><CommentParts><Abstract><Para>Initializes the generator from a simple list of command-line arguments.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 62,
            "key.doc.name" : "init(_:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arguments<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 775,
            "key.name" : "init(_:)",
            "key.namelength" : 27,
            "key.nameoffset" : 1432,
            "key.offset" : 1432,
            "key.parsed_declaration" : "public init(_ arguments: [String])",
            "key.parsed_scope.end" : 87,
            "key.parsed_scope.start" : 62,
            "key.substructure" : [

            ],
            "key.typename" : "(ArgumentParser.Type) -> ([String]) -> ArgumentParser",
            "key.typeusr" : "_T010Commandant14ArgumentParserCSaySSGcD",
            "key.usr" : "s:10Commandant14ArgumentParserCACSaySSGcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal var remainingArguments: [<Type usr=\"s:SS\">String<\/Type>]? { get }<\/Declaration>",
            "key.bodylength" : 76,
            "key.bodyoffset" : 2292,
            "key.doc.column" : 15,
            "key.doc.comment" : "Returns the remaining arguments.",
            "key.doc.declaration" : "internal var remainingArguments: [String]? { get }",
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Other file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"90\" column=\"15\"><Name>remainingArguments<\/Name><USR>s:10Commandant14ArgumentParserC18remainingArgumentsSaySSGSgv<\/USR><Declaration>internal var remainingArguments: [String]? { get }<\/Declaration><CommentParts><Abstract><Para>Returns the remaining arguments.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 90,
            "key.doc.name" : "remainingArguments",
            "key.doc.type" : "Other",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>remainingArguments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 112,
            "key.name" : "remainingArguments",
            "key.namelength" : 18,
            "key.nameoffset" : 2261,
            "key.offset" : 2257,
            "key.parsed_declaration" : "internal var remainingArguments: [String]?",
            "key.parsed_scope.end" : 92,
            "key.parsed_scope.start" : 90,
            "key.typename" : "[String]?",
            "key.typeusr" : "_T0SaySSGSgD",
            "key.usr" : "s:10Commandant14ArgumentParserC18remainingArgumentsSaySSGSgv"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal func consumeBoolean(forKey key: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type>?<\/Declaration>",
            "key.bodylength" : 281,
            "key.bodyoffset" : 2637,
            "key.doc.column" : 16,
            "key.doc.comment" : "Returns whether the given key was enabled or disabled, or nil if it\nwas not given at all.\n\nIf the key is found, it is then removed from the list of arguments\nremaining to be parsed.",
            "key.doc.declaration" : "internal func consumeBoolean(forKey key: String) -> Bool?",
            "key.doc.discussion" : [
              {
                "Para" : "If the key is found, it is then removed from the list of arguments remaining to be parsed."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"99\" column=\"16\"><Name>consumeBoolean(forKey:)<\/Name><USR>s:10Commandant14ArgumentParserC14consumeBooleanSbSgSS6forKey_tF<\/USR><Declaration>internal func consumeBoolean(forKey key: String) -&gt; Bool?<\/Declaration><CommentParts><Abstract><Para>Returns whether the given key was enabled or disabled, or nil if it was not given at all.<\/Para><\/Abstract><Discussion><Para>If the key is found, it is then removed from the list of arguments remaining to be parsed.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 99,
            "key.doc.name" : "consumeBoolean(forKey:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>consumeBoolean<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>forKey<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 332,
            "key.name" : "consumeBoolean(forKey:)",
            "key.namelength" : 34,
            "key.nameoffset" : 2592,
            "key.offset" : 2587,
            "key.parsed_declaration" : "internal func consumeBoolean(forKey key: String) -> Bool?",
            "key.parsed_scope.end" : 115,
            "key.parsed_scope.start" : 99,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant14ArgumentParserC14consumeBooleanSbs9CharacterV4flag_tF\">consumeBoolean(flag:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(ArgumentParser) -> (String) -> Bool?",
            "key.typeusr" : "_T0SbSgSS6forKey_tcD",
            "key.usr" : "s:10Commandant14ArgumentParserC14consumeBooleanSbSgSS6forKey_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal func consumeValue(forKey key: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:6ResultAAO\">Result<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>?, <Type usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/Type>&lt;<Type usr=\"s:6Result7NoErrorO\">NoError<\/Type>&gt;&gt;<\/Declaration>",
            "key.bodylength" : 503,
            "key.bodyoffset" : 3315,
            "key.doc.column" : 16,
            "key.doc.comment" : "Returns the value associated with the given flag, or nil if the flag was\nnot specified. If the key is presented, but no value was given, an error\nis returned.\n\nIf a value is found, the key and the value are both removed from the\nlist of arguments remaining to be parsed.",
            "key.doc.declaration" : "internal func consumeValue(forKey key: String) -> Result<String?, CommandantError<NoError>>",
            "key.doc.discussion" : [
              {
                "Para" : "If a value is found, the key and the value are both removed from the list of arguments remaining to be parsed."
              }
            ],
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"123\" column=\"16\"><Name>consumeValue(forKey:)<\/Name><USR>s:10Commandant14ArgumentParserC12consumeValue6ResultAEOySSSgAA0A5ErrorOyAE02NoG0OGGSS6forKey_tF<\/USR><Declaration>internal func consumeValue(forKey key: String) -&gt; Result&lt;String?, CommandantError&lt;NoError&gt;&gt;<\/Declaration><CommentParts><Abstract><Para>Returns the value associated with the given flag, or nil if the flag was not specified. If the key is presented, but no value was given, an error is returned.<\/Para><\/Abstract><Discussion><Para>If a value is found, the key and the value are both removed from the list of arguments remaining to be parsed.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 123,
            "key.doc.name" : "consumeValue(forKey:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>consumeValue<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>forKey<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:6ResultAAO\">Result<\/ref.enum>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>?, <ref.enum usr=\"s:10Commandant0A5ErrorO\">CommandantError<\/ref.enum>&lt;<ref.enum usr=\"s:6Result7NoErrorO\">NoError<\/ref.enum>&gt;&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 588,
            "key.name" : "consumeValue(forKey:)",
            "key.namelength" : 32,
            "key.nameoffset" : 3236,
            "key.offset" : 3231,
            "key.parsed_declaration" : "internal func consumeValue(forKey key: String) -> Result<String?, CommandantError<NoError>>",
            "key.parsed_scope.end" : 148,
            "key.parsed_scope.start" : 123,
            "key.substructure" : [

            ],
            "key.typename" : "(ArgumentParser) -> (String) -> Result<String?, CommandantError<NoError>>",
            "key.typeusr" : "_T06ResultAAOySSSg10Commandant0B5ErrorOyAA02NoC0OGGSS6forKey_tcD",
            "key.usr" : "s:10Commandant14ArgumentParserC12consumeValue6ResultAEOySSSgAA0A5ErrorOyAE02NoG0OGGSS6forKey_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal func consumePositionalArgument() -&gt; <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
            "key.bodylength" : 164,
            "key.bodyoffset" : 4004,
            "key.doc.column" : 16,
            "key.doc.comment" : "Returns the next positional argument that hasn't yet been returned, or\nnil if there are no more positional arguments.",
            "key.doc.declaration" : "internal func consumePositionalArgument() -> String?",
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"152\" column=\"16\"><Name>consumePositionalArgument()<\/Name><USR>s:10Commandant14ArgumentParserC017consumePositionalB0SSSgyF<\/USR><Declaration>internal func consumePositionalArgument() -&gt; String?<\/Declaration><CommentParts><Abstract><Para>Returns the next positional argument that hasn’t yet been returned, or nil if there are no more positional arguments.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 152,
            "key.doc.name" : "consumePositionalArgument()",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>consumePositionalArgument<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 210,
            "key.name" : "consumePositionalArgument()",
            "key.namelength" : 27,
            "key.nameoffset" : 3964,
            "key.offset" : 3959,
            "key.parsed_declaration" : "internal func consumePositionalArgument() -> String?",
            "key.parsed_scope.end" : 161,
            "key.parsed_scope.start" : 152,
            "key.substructure" : [

            ],
            "key.typename" : "(ArgumentParser) -> () -> String?",
            "key.typeusr" : "_T0SSSgycD",
            "key.usr" : "s:10Commandant14ArgumentParserC017consumePositionalB0SSSgyF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal func consume(key: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.bodylength" : 143,
            "key.bodyoffset" : 4323,
            "key.doc.column" : 16,
            "key.doc.comment" : "Returns whether the given key was specified and removes it from the\nlist of arguments remaining.",
            "key.doc.declaration" : "internal func consume(key: String) -> Bool",
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"165\" column=\"16\"><Name>consume(key:)<\/Name><USR>s:10Commandant14ArgumentParserC7consumeSbSS3key_tF<\/USR><Declaration>internal func consume(key: String) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns whether the given key was specified and removes it from the list of arguments remaining.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 165,
            "key.doc.name" : "consume(key:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>consume<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>key<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 179,
            "key.name" : "consume(key:)",
            "key.namelength" : 20,
            "key.nameoffset" : 4293,
            "key.offset" : 4288,
            "key.parsed_declaration" : "internal func consume(key: String) -> Bool",
            "key.parsed_scope.end" : 170,
            "key.parsed_scope.start" : 165,
            "key.substructure" : [

            ],
            "key.typename" : "(ArgumentParser) -> (String) -> Bool",
            "key.typeusr" : "_T0SbSS3key_tcD",
            "key.usr" : "s:10Commandant14ArgumentParserC7consumeSbSS3key_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>internal func consumeBoolean(flag: <Type usr=\"s:s9CharacterV\">Character<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.bodylength" : 316,
            "key.bodyoffset" : 4633,
            "key.doc.column" : 16,
            "key.doc.comment" : "Returns whether the given flag was specified and removes it from the\nlist of arguments remaining.",
            "key.doc.declaration" : "internal func consumeBoolean(flag: Character) -> Bool",
            "key.doc.file" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.doc.full_as_xml" : "<Function file=\"Sources\/Commandant\/ArgumentParser.swift\" line=\"174\" column=\"16\"><Name>consumeBoolean(flag:)<\/Name><USR>s:10Commandant14ArgumentParserC14consumeBooleanSbs9CharacterV4flag_tF<\/USR><Declaration>internal func consumeBoolean(flag: Character) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns whether the given flag was specified and removes it from the list of arguments remaining.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 174,
            "key.doc.name" : "consumeBoolean(flag:)",
            "key.doc.type" : "Function",
            "key.filepath" : "Sources\/Commandant\/ArgumentParser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>internal<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>consumeBoolean<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>flag<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:s9CharacterV\">Character<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 363,
            "key.name" : "consumeBoolean(flag:)",
            "key.namelength" : 31,
            "key.nameoffset" : 4592,
            "key.offset" : 4587,
            "key.parsed_declaration" : "internal func consumeBoolean(flag: Character) -> Bool",
            "key.parsed_scope.end" : 191,
            "key.parsed_scope.start" : 174,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:10Commandant14ArgumentParserC14consumeBooleanSbSgSS6forKey_tF\">consumeBoolean(forKey:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(ArgumentParser) -> (Character) -> Bool",
            "key.typeusr" : "_T0Sbs9CharacterV4flag_tcD",
            "key.usr" : "s:10Commandant14ArgumentParserC14consumeBooleanSbs9CharacterV4flag_tF"
          }
        ],
        "key.typename" : "ArgumentParser.Type",
        "key.typeusr" : "_T010Commandant14ArgumentParserCmD",
        "key.usr" : "s:10Commandant14ArgumentParserC"
      }
    ]
  }
}]