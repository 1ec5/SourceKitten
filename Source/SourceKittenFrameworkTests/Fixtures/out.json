[
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
          "key.parsed_declaration" : "@interface RLMProperty : NSObject",
          "key.doc.comment" : "This class models properties persisted to Realm in an RLMObjectSchema.\n\nWhen using Realm, RLMProperty objects allow performing migrations and \nintrospecting the database's schema.\n\nThese properties map to columns in the core database.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "45",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) NSString *_Nonnull name;",
              "key.doc.comment" : "Property name.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "50",
              "key.name" : "name",
              "key.doc.column" : "43",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.usr" : "c:objc(cs)RLMProperty(py)name"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) RLMPropertyType type;",
              "key.doc.comment" : "Property type.\n\n- see: RLMPropertyType",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "57",
              "key.name" : "type",
              "key.doc.column" : "49",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.usr" : "c:objc(cs)RLMProperty(py)type"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) BOOL indexed;",
              "key.doc.comment" : "Indicates if this property is indexed.\n\n- see: RLMObject",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "64",
              "key.name" : "indexed",
              "key.doc.column" : "38",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.usr" : "c:objc(cs)RLMProperty(py)indexed"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.parsed_declaration" : "@property(readonly, copy, nonatomic, nullable) NSString *objectClassName;",
              "key.doc.comment" : "Object class name - specify object types for RLMObject and RLMArray properties.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "69",
              "key.name" : "objectClassName",
              "key.doc.column" : "59",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.usr" : "c:objc(cs)RLMProperty(py)objectClassName"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) BOOL optional;",
              "key.doc.comment" : "Whether this property is optional.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "74",
              "key.name" : "optional",
              "key.doc.column" : "38",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.usr" : "c:objc(cs)RLMProperty(py)optional"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.parsed_declaration" : "- (BOOL)isEqualToProperty:(nonnull RLMProperty *)property;",
              "key.doc.comment" : "Returns YES if property objects are equal.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "79",
              "key.name" : "isEqualToProperty:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
              "key.usr" : "c:objc(cs)RLMProperty(im)isEqualToProperty:"
            }
          ],
          "key.name" : "RLMProperty",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMProperty.h",
          "key.usr" : "c:objc(cs)RLMProperty"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
          "key.parsed_declaration" : "@interface RLMRealmConfiguration : NSObject <NSCopying>",
          "key.doc.comment" : "An `RLMRealmConfiguration` is used to describe the different options used to\ncreate an `RLMRealm` instance.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "28",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)defaultConfiguration;",
              "key.doc.comment" : "Returns the default configuration used to create Realms when no other\nconfiguration is explicitly specified (i.e. `+[RLMRealm defaultRealm]`).\n\n- returns: The default Realm configuration.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "36",
              "key.name" : "defaultConfiguration",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The default Realm configuration.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(cm)defaultConfiguration"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "+ (void)setDefaultConfiguration:(nonnull RLMRealmConfiguration *)configuration;",
              "key.doc.comment" : "Sets the default configuration to the given `RLMRealmConfiguration`.\n\n- parameter: configuration The new default Realm configuration.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The new default Realm configuration.",
                      "kind" : ""
                    }
                  ],
                  "name" : "configuration"
                }
              ],
              "key.doc.line" : "43",
              "key.doc.full_as_xml" : "",
              "key.name" : "setDefaultConfiguration:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(cm)setDefaultConfiguration:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(readwrite, copy, nonatomic, nullable) NSString *path;",
              "key.doc.comment" : "The path to the realm file. Mutually exclusive with `inMemoryIdentifier`.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "46",
              "key.name" : "path",
              "key.doc.column" : "49",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)path"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(readwrite, copy, nonatomic, nullable) NSString *inMemoryIdentifier;",
              "key.doc.comment" : "A string used to identify a particular in-memory Realm. Mutually exclusive with `path`.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "49",
              "key.name" : "inMemoryIdentifier",
              "key.doc.column" : "49",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)inMemoryIdentifier"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(readwrite, copy, nonatomic, nullable) NSData *encryptionKey;",
              "key.doc.comment" : "64-byte key to use to encrypt the data.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "52",
              "key.name" : "encryptionKey",
              "key.doc.column" : "47",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)encryptionKey"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(assign, readwrite, nonatomic) BOOL readOnly;",
              "key.doc.comment" : "Whether the Realm is read-only (must be YES for read-only files).",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "55",
              "key.name" : "readOnly",
              "key.doc.column" : "28",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)readOnly"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(assign, readwrite, nonatomic) uint64_t schemaVersion;",
              "key.doc.comment" : "The current schema version.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "58",
              "key.name" : "schemaVersion",
              "key.doc.column" : "32",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)schemaVersion"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(readwrite, copy, nonatomic, nullable)\n    RLMMigrationBlock migrationBlock;",
              "key.doc.comment" : "The block which migrates the Realm to the current version.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "61",
              "key.name" : "migrationBlock",
              "key.doc.column" : "57",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)migrationBlock"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "@property(readwrite, copy, nonatomic, nullable) NSArray *objectClasses;",
              "key.doc.comment" : "The classes persisted in the Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "64",
              "key.name" : "objectClasses",
              "key.doc.column" : "48",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(py)objectClasses"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "- (void)setInMemoryIdentifier:(NSString *_Nullable)inMemoryIdentifier;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "49",
              "key.name" : "setInMemoryIdentifier:",
              "key.doc.column" : "49",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(im)setInMemoryIdentifier:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "- (void)setEncryptionKey:(NSData *_Nullable)encryptionKey;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "52",
              "key.name" : "setEncryptionKey:",
              "key.doc.column" : "47",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(im)setEncryptionKey:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "- (void)setReadOnly:(BOOL)readOnly;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "55",
              "key.name" : "setReadOnly:",
              "key.doc.column" : "28",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(im)setReadOnly:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "- (void)setSchemaVersion:(uint64_t)schemaVersion;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "58",
              "key.name" : "setSchemaVersion:",
              "key.doc.column" : "32",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(im)setSchemaVersion:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "- (void)setMigrationBlock:(RLMMigrationBlock _Nullable)migrationBlock;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "61",
              "key.name" : "setMigrationBlock:",
              "key.doc.column" : "57",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(im)setMigrationBlock:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.parsed_declaration" : "- (void)setObjectClasses:(NSArray *_Nullable)objectClasses;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "64",
              "key.name" : "setObjectClasses:",
              "key.doc.column" : "48",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
              "key.usr" : "c:objc(cs)RLMRealmConfiguration(im)setObjectClasses:"
            }
          ],
          "key.name" : "RLMRealmConfiguration",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealmConfiguration.h",
          "key.usr" : "c:objc(cs)RLMRealmConfiguration"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
          "key.parsed_declaration" : "@interface RLMRealm : NSObject",
          "key.doc.comment" : "An RLMRealm instance (also referred to as \"a realm\") represents a Realm\ndatabase.\n\nRealms can either be stored on disk (see +[RLMRealm realmWithPath:]) or in\nmemory (see +[RLMRealm inMemoryRealmWithIdentifier:]).\n\nRLMRealm instances are cached internally, and constructing equivalent RLMRealm\nobjects (with the same path or identifier) multiple times on a single thread\nwithin a single iteration of the run loop will normally return the same\nRLMRealm object. If you specifically want to ensure a RLMRealm object is\ndestroyed (for example, if you wish to open a realm, check some property, and\nthen possibly delete the realm file and re-open it), place the code which uses\nthe realm within an `@autoreleasepool {}` and ensure you have no other\nstrong references to it.\n\n- warning: RLMRealm instances are not thread safe and can not be shared across\nthreads or dispatch queues. You must call this method on each thread you want\nto interact with the realm on. For dispatch queues, this means that you must\ncall it in each block which is dispatched, as a queue is not guaranteed to run\non a consistent thread.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "49",
          "key.substructure" : [
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "68",
              "key.name" : "MARK: Creating & Initializing a Realm",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)defaultRealm;",
              "key.doc.comment" : "\nObtains an instance of the default Realm.\n\nThe default Realm is used by the `RLMObject` class methods\nwhich do not take a `RLMRealm` parameter, but is otherwise not special. The\ndefault Realm is persisted as default.realm under the Documents directory of\nyour Application on iOS, and in your application's Application Support\ndirectory on OS X.\n\nThe default Realm is created using the default `RLMRealmConfiguration`, which\ncan be changed via `+[RLMRealmConfiguration setDefaultConfiguration:]`.\n\n- returns: The default `RLMRealm` instance for the current thread.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "68",
              "key.name" : "defaultRealm",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The default `RLMRealm` instance for the current thread.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(cm)defaultRealm"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "+ (nullable instancetype)\n    realmWithConfiguration:(nonnull RLMRealmConfiguration *)configuration\n                     error:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Obtains an `RLMRealm` instance with the given configuration.\n\n- parameter: configuration The configuration for the realm.\n- parameter: error         If an error occurs, upon return contains an `NSError` object\n                     that describes the problem. If you are not interested in\n                     possible errors, pass in `NULL`.\n\n- returns: An `RLMRealm` instance.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The configuration for the realm.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "configuration"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "80",
              "key.doc.full_as_xml" : "",
              "key.name" : "realmWithConfiguration:error:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An `RLMRealm` instance.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "26",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(cm)realmWithConfiguration:error:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)realmWithPath:(nonnull NSString *)path;",
              "key.doc.comment" : "Obtains an `RLMRealm` instance persisted at a specific file path.\n\n- parameter: path Path to the file you want the data saved in.\n\n- returns: An `RLMRealm` instance.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Path to the file you want the data saved in.",
                      "kind" : ""
                    }
                  ],
                  "name" : "path"
                }
              ],
              "key.doc.line" : "89",
              "key.doc.full_as_xml" : "",
              "key.name" : "realmWithPath:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An `RLMRealm` instance.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(cm)realmWithPath:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) NSString *_Nonnull path;",
              "key.doc.comment" : "Path to the file where this Realm is persisted.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "94",
              "key.name" : "path",
              "key.doc.column" : "43",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)path"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(readonly, getter=isReadOnly, nonatomic) BOOL readOnly;",
              "key.doc.comment" : "Indicates if this Realm was opened in read-only mode.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "99",
              "key.name" : "readOnly",
              "key.doc.column" : "59",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)readOnly"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic, null_unspecified) RLMSchema *schema;",
              "key.doc.comment" : "The RLMSchema used by this RLMRealm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "104",
              "key.name" : "schema",
              "key.doc.column" : "62",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)schema"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) BOOL inWriteTransaction;",
              "key.doc.comment" : "Indicates if this Realm is currently in a write transaction.\n\n- warning: Wrapping mutating operations in a write transaction if this property returns `NO`\n         may cause a large number of write transactions to be created, which could negatively\n         impact Realm's performance. Always prefer performing multiple mutations in a single\n         transaction when possible.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "114",
              "key.name" : "inWriteTransaction",
              "key.doc.column" : "38",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)inWriteTransaction"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) RLMRealmConfiguration *_Nonnull configuration;",
              "key.doc.comment" : "Returns an `RLMRealmConfiguration` that can be used to create this `RLMRealm` instance.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "119",
              "key.name" : "configuration",
              "key.doc.column" : "56",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)configuration"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) BOOL isEmpty;",
              "key.doc.comment" : "Indicates if this Realm contains any objects.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "124",
              "key.name" : "isEmpty",
              "key.doc.column" : "38",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)isEmpty"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (nonnull RLMNotificationToken *)addNotificationBlock:\n        (nonnull RLMNotificationBlock)block;",
              "key.doc.comment" : "Add a notification handler for changes in this RLMRealm.\n\nThe block has the following definition:\n\n    typedef void(^RLMNotificationBlock)(NSString *notification, RLMRealm *realm);\n\nIt receives the following parameters:\n\n- `NSString` \\***notification**:    The name of the incoming notification. See\n                                    RLMRealmNotification for information on what\n                                    notifications are sent.\n- `RLMRealm` \\***realm**:           The realm for which this notification occurred\n\n- parameter: block   A block which is called to process RLMRealm notifications.\n\n- returns: A token object which can later be passed to `-removeNotification:`\n        to remove this notification.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "A block which is called to process RLMRealm notifications.",
                      "kind" : ""
                    }
                  ],
                  "name" : "block"
                }
              ],
              "key.doc.line" : "154",
              "key.doc.full_as_xml" : "",
              "key.name" : "addNotificationBlock:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "A token object which can later be passed to `-removeNotification:`\n        to remove this notification.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "27",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)addNotificationBlock:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)removeNotification:(nonnull RLMNotificationToken *)notificationToken;",
              "key.doc.comment" : "Remove a previously registered notification handler using the token returned\nfrom `-addNotificationBlock:`\n\n- parameter: notificationToken   The token returned from `-addNotificationBlock:`\n                           corresponding to the notification block to remove.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The token returned from `-addNotificationBlock:`\n                         corresponding to the notification block to remove.",
                      "kind" : ""
                    }
                  ],
                  "name" : "notificationToken"
                }
              ],
              "key.doc.line" : "163",
              "key.doc.full_as_xml" : "",
              "key.name" : "removeNotification:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)removeNotification:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)beginWriteTransaction;",
              "key.doc.comment" : "Begins a write transaction in an `RLMRealm`.\n\nOnly one write transaction can be open at a time. Write transactions cannot be\nnested, and trying to begin a write transaction on a `RLMRealm` which is\nalready in a write transaction with throw an exception. Calls to\n`beginWriteTransaction` from `RLMRealm` instances in other threads will block\nuntil the current write transaction completes.\n\nBefore beginning the write transaction, `beginWriteTransaction` updates the\n`RLMRealm` to the latest Realm version, as if refresh was called, and\ngenerates notifications if applicable. This has no effect if the `RLMRealm`\nwas already up to date.\n\nIt is rarely a good idea to have write transactions span multiple cycles of\nthe run loop, but if you do wish to do so you will need to ensure that the\n`RLMRealm` in the write transaction is kept alive until the write transaction\nis committed.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "191",
              "key.name" : "beginWriteTransaction",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)beginWriteTransaction"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)commitWriteTransaction;",
              "key.doc.comment" : "Commits all writes operations in the current write transaction.\n\nAfter this is called the `RLMRealm` reverts back to being read-only.\n\nCalling this when not in a write transaction will throw an exception.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "200",
              "key.name" : "commitWriteTransaction",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)commitWriteTransaction"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (BOOL)commitWriteTransaction:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Commits all writes operations in the current write transaction.\n\nAfter this is called the `RLMRealm` reverts back to being read-only.\n\nCalling this when not in a write transaction will throw an exception.\n\n- parameter: error If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.\n\n- returns: Whether the transaction succeeded.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "215",
              "key.doc.full_as_xml" : "",
              "key.name" : "commitWriteTransaction:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Whether the transaction succeeded.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)commitWriteTransaction:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)cancelWriteTransaction;",
              "key.doc.comment" : "Revert all writes made in the current write transaction and end the transaction.\n\nThis rolls back all objects in the Realm to the state they were in at the\nbeginning of the write transaction, and then ends the transaction.\n\nThis restores the data for deleted objects, but does not re-validated deleted\naccessor objects. Any `RLMObject`s which were added to the Realm will be\ninvalidated rather than switching back to standalone objects.\nGiven the following code:\n\n    ObjectType *oldObject = [[ObjectType objectsWhere:@\"...\"] firstObject];\n    ObjectType *newObject = [[ObjectType alloc] init];\n\n    [realm beginWriteTransaction];\n    [realm addObject:newObject];\n    [realm deleteObject:oldObject];\n    [realm cancelWriteTransaction];\n\nBoth `oldObject` and `newObject` will return `YES` for `isInvalidated`,\nbut re-running the query which provided `oldObject` will once again return\nthe valid object.\n\nCalling this when not in a write transaction will throw an exception.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "242",
              "key.name" : "cancelWriteTransaction",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)cancelWriteTransaction"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)transactionWithBlock:(nonnull void (^)(void))block;",
              "key.doc.comment" : "Helper to perform a block within a transaction.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "247",
              "key.name" : "transactionWithBlock:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)transactionWithBlock:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (BOOL)transactionWithBlock:(nonnull void (^)(void))block\n                       error:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Helper to perform a block within a transaction.\n\n- parameter: block The block to perform.\n- parameter: error If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.\n\n- returns: Whether the transaction succeeded.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The block to perform.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "block"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "259",
              "key.doc.full_as_xml" : "",
              "key.name" : "transactionWithBlock:error:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Whether the transaction succeeded.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)transactionWithBlock:error:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (BOOL)refresh;",
              "key.doc.comment" : "Update an `RLMRealm` and outstanding objects to point to the most recent data for this `RLMRealm`.\n\n- returns:    Whether the realm had any updates. Note that this may return YES even if no data has actually changed.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "266",
              "key.name" : "refresh",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Whether the realm had any updates. Note that this may return YES even if no data has actually changed.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)refresh"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "@property(assign, readwrite, nonatomic) BOOL autorefresh;",
              "key.doc.comment" : "Set to YES to automatically update this Realm when changes happen in other threads.\n\nIf set to YES (the default), changes made on other threads will be reflected\nin this Realm on the next cycle of the run loop after the changes are\ncommitted.  If set to NO, you must manually call -refresh on the Realm to\nupdate it to get the latest version.\n\nEven with this enabled, you can still call -refresh at any time to update the\nRealm before the automatic refresh would occur.\n\nNotifications are sent when a write transaction is committed whether or not\nthis is enabled.\n\nDisabling this on an `RLMRealm` without any strong references to it will not\nhave any effect, and it will switch back to YES the next time the `RLMRealm`\nobject is created. This is normally irrelevant as it means that there is\nnothing to refresh (as persisted `RLMObject`s, `RLMArray`s, and `RLMResults` have strong\nreferences to the containing `RLMRealm`), but it means that setting\n`RLMRealm.defaultRealm.autorefresh = NO` in\n`application:didFinishLaunchingWithOptions:` and only later storing Realm\nobjects will not work.\n\nDefaults to YES.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "293",
              "key.name" : "autorefresh",
              "key.doc.column" : "28",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(py)autorefresh"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (BOOL)writeCopyToPath:(nonnull NSString *)path\n                  error:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Write a compacted copy of the RLMRealm to the given path.\n\nThe destination file cannot already exist.\n\nNote that if this is called from within a write transaction it writes the\n*current* data, and not data when the last write transaction was committed.\n\n- parameter: path Path to save the Realm to.\n- parameter: error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify nil for this parameter if you do not want the error information.\n- returns: YES if the realm was copied successfully. Returns NO if an error occurred.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Path to save the Realm to.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "path"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify nil for this parameter if you do not want the error information.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "307",
              "key.doc.full_as_xml" : "",
              "key.name" : "writeCopyToPath:error:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "YES if the realm was copied successfully. Returns NO if an error occurred.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)writeCopyToPath:error:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (BOOL)writeCopyToPath:(nonnull NSString *)path\n          encryptionKey:(nonnull NSData *)key\n                  error:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Write an encrypted and compacted copy of the RLMRealm to the given path.\n\nThe destination file cannot already exist.\n\nNote that if this is called from within a write transaction it writes the\n*current* data, and not data when the last write transaction was committed.\n\n- parameter: path Path to save the Realm to.\n- parameter: key 64-byte encryption key to encrypt the new file with\n- parameter: error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify nil for this parameter if you do not want the error information.\n- returns: YES if the realm was copied successfully. Returns NO if an error occurred.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Path to save the Realm to.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "path"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "64-byte encryption key to encrypt the new file with\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "key"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify nil for this parameter if you do not want the error information.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "322",
              "key.doc.full_as_xml" : "",
              "key.name" : "writeCopyToPath:encryptionKey:error:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "YES if the realm was copied successfully. Returns NO if an error occurred.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)writeCopyToPath:encryptionKey:error:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)invalidate;",
              "key.doc.comment" : "Invalidate all RLMObjects and RLMResults read from this Realm.\n\nAn RLMRealm holds a read lock on the version of the data accessed by it, so\nthat changes made to the Realm on different threads do not modify or delete the\ndata seen by this RLMRealm. Calling this method releases the read lock,\nallowing the space used on disk to be reused by later write transactions rather\nthan growing the file. This method should be called before performing long\nblocking operations on a background thread on which you previously read data\nfrom the Realm which you no longer need.\n\nAll `RLMObject`, `RLMResults` and `RLMArray` instances obtained from this\n`RLMRealm` on the current thread are invalidated, and can not longer be used.\nThe `RLMRealm` itself remains valid, and a new read transaction is implicitly\nbegun the next time data is read from the Realm.\n\nCalling this method multiple times in a row without reading any data from the\nRealm, or before ever reading any data from the Realm is a no-op. This method\ncannot be called on a read-only Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "344",
              "key.name" : "invalidate",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)invalidate"
            },
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "368",
              "key.name" : "MARK: Adding and Removing Objects from a Realm",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)addObject:(nonnull RLMObject *)object;",
              "key.doc.comment" : "\nAdds an object to be persisted it in this Realm.\n\nOnce added, this object can be retrieved using the `objectsWhere:` selectors\non `RLMRealm` and on subclasses of `RLMObject`. When added, all linked (child)\nobjects referenced by this object will also be added to the Realm if they are\nnot already in it. If the object or any linked objects already belong to a\ndifferent Realm an exception will be thrown. Use\n`-[RLMObject createInRealm:withObject]` to insert a copy of a persisted object\ninto a different Realm.\n\nThe object to be added must be valid and cannot have been previously deleted\nfrom a Realm (i.e. `isInvalidated`) must be false.\n\n- parameter: object  Object to be added to this Realm.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Object to be added to this Realm.",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "368",
              "key.doc.full_as_xml" : "",
              "key.name" : "addObject:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)addObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)addObjects:(nonnull id<NSFastEnumeration>)array;",
              "key.doc.comment" : "Adds objects in the given array to be persisted it in this Realm.\n\nThis is the equivalent of `addObject:` except for an array of objects.\n\n- parameter: array   An enumerable object such as NSArray or RLMResults which contains objects to be added to\n               this Realm.\n\n- see:   addObject:",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An enumerable object such as NSArray or RLMResults which contains objects to be added to\n             this Realm.",
                      "kind" : ""
                    }
                  ],
                  "name" : "array"
                }
              ],
              "key.doc.line" : "380",
              "key.doc.full_as_xml" : "",
              "key.name" : "addObjects:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)addObjects:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)addOrUpdateObject:(nonnull RLMObject *)object;",
              "key.doc.comment" : "Adds or updates an object to be persisted it in this Realm. The object provided must have a designated\nprimary key. If no objects exist in the RLMRealm instance with the same primary key value, the object is\ninserted. Otherwise, the existing object is updated with any changed values.\n\nAs with `addObject:`, the object cannot already be persisted in a different\nRealm. Use `-[RLMObject createOrUpdateInRealm:withValue:]` to copy values to\na different Realm.\n\n- parameter: object  Object to be added or updated.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Object to be added or updated.",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "393",
              "key.doc.full_as_xml" : "",
              "key.name" : "addOrUpdateObject:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)addOrUpdateObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)addOrUpdateObjectsFromArray:(nonnull id)array;",
              "key.doc.comment" : "Adds or updates objects in the given array to be persisted it in this Realm.\n\nThis is the equivalent of `addOrUpdateObject:` except for an array of objects.\n\n- parameter: array  `NSArray`, `RLMArray`, or `RLMResults` of `RLMObject`s (or subclasses) to be added to this Realm.\n\n- see:   addOrUpdateObject:",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "`NSArray`, `RLMArray`, or `RLMResults` of `RLMObject`s (or subclasses) to be added to this Realm.",
                      "kind" : ""
                    }
                  ],
                  "name" : "array"
                }
              ],
              "key.doc.line" : "404",
              "key.doc.full_as_xml" : "",
              "key.name" : "addOrUpdateObjectsFromArray:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)addOrUpdateObjectsFromArray:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)deleteObject:(nonnull RLMObject *)object;",
              "key.doc.comment" : "Delete an object from this Realm.\n\n- parameter: object  Object to be deleted from this Realm.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Object to be deleted from this Realm.",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "411",
              "key.doc.full_as_xml" : "",
              "key.name" : "deleteObject:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)deleteObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)deleteObjects:(nonnull id)array;",
              "key.doc.comment" : "Delete an `NSArray`, `RLMArray`, or `RLMResults` of objects from this Realm.\n\n- parameter: array  `RLMArray`, `NSArray`, or `RLMResults` of `RLMObject`s to be deleted.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "`RLMArray`, `NSArray`, or `RLMResults` of `RLMObject`s to be deleted.",
                      "kind" : ""
                    }
                  ],
                  "name" : "array"
                }
              ],
              "key.doc.line" : "418",
              "key.doc.full_as_xml" : "",
              "key.name" : "deleteObjects:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)deleteObjects:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (void)deleteAllObjects;",
              "key.doc.comment" : "Deletes all objects in this Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "423",
              "key.name" : "deleteAllObjects",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)deleteAllObjects"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "+ (uint64_t)schemaVersionAtPath:(nonnull NSString *)realmPath\n                          error:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Get the schema version for a Realm at a given path.\n\n- parameter: realmPath   Path to a Realm file\n- parameter: error       If an error occurs, upon return contains an `NSError` object\n                   that describes the problem. If you are not interested in\n                   possible errors, pass in `NULL`.\n\n- returns:            The version of the Realm at `realmPath` or RLMNotVersioned if the version cannot be read.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Path to a Realm file\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "realmPath"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "449",
              "key.doc.full_as_xml" : "",
              "key.name" : "schemaVersionAtPath:error:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The version of the Realm at `realmPath` or RLMNotVersioned if the version cannot be read.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "13",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(cm)schemaVersionAtPath:error:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "+ (uint64_t)schemaVersionAtPath:(nonnull NSString *)realmPath\n                  encryptionKey:(nullable NSData *)key\n                          error:(NSError *_Nullable *_Nullable)error;",
              "key.doc.comment" : "Get the schema version for an encrypted Realm at a given path.\n\n- parameter: realmPath   Path to a Realm file\n- parameter: key         64-byte encryption key.\n- parameter: error       If an error occurs, upon return contains an `NSError` object\n                   that describes the problem. If you are not interested in\n                   possible errors, pass in `NULL`.\n\n- returns:            The version of the Realm at `realmPath` or RLMNotVersioned if the version cannot be read.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Path to a Realm file\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "realmPath"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "64-byte encryption key.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "key"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "If an error occurs, upon return contains an `NSError` object\n             that describes the problem. If you are not interested in\n             possible errors, pass in `NULL`.",
                      "kind" : ""
                    }
                  ],
                  "name" : "error"
                }
              ],
              "key.doc.line" : "462",
              "key.doc.full_as_xml" : "",
              "key.name" : "schemaVersionAtPath:encryptionKey:error:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The version of the Realm at `realmPath` or RLMNotVersioned if the version cannot be read.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "13",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(cm)schemaVersionAtPath:encryptionKey:error:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "+ (nonnull NSError *)migrateRealm:\n        (nonnull RLMRealmConfiguration *)configuration;",
              "key.doc.comment" : "Performs the given Realm configuration's migration block on a Realm at the given path.\n\nThis method is called automatically when opening a Realm for the first time and does\nnot need to be called explicitly. You can choose to call this method to control\nexactly when and how migrations are performed.\n\n- parameter: configuration The Realm configuration used to open and migrate the Realm.\n- returns:              The error that occurred while applying the migration, if any.\n\n- see:                 RLMMigration",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The Realm configuration used to open and migrate the Realm.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "configuration"
                }
              ],
              "key.doc.line" : "476",
              "key.doc.full_as_xml" : "",
              "key.name" : "migrateRealm:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The error that occurred while applying the migration, if any.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "14",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(cm)migrateRealm:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.parsed_declaration" : "- (BOOL)isReadOnly;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "99",
              "key.name" : "isReadOnly",
              "key.doc.column" : "59",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
              "key.usr" : "c:objc(cs)RLMRealm(im)isReadOnly"
            }
          ],
          "key.name" : "RLMRealm",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
          "key.usr" : "c:objc(cs)RLMRealm"
        },
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.typedef",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
          "key.parsed_declaration" : "typedef void (^RLMMigrationBlock)(RLMMigration *_Nonnull, uint64_t)",
          "key.doc.comment" : "Migration block used to migrate a Realm.\n\n- parameter: migration   `RLMMigration` object used to perform the migration. The\n                   migration object allows you to enumerate and alter any\n                   existing objects which require migration.\n\n- parameter: oldSchemaVersion    The schema version of the `RLMRealm` being migrated.",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "`RLMMigration` object used to perform the migration. The\n                 migration object allows you to enumerate and alter any\n                 existing objects which require migration.",
                  "kind" : ""
                }
              ],
              "name" : "migration"
            },
            {
              "discussion" : [
                {
                  "Para" : "The schema version of the `RLMRealm` being migrated.",
                  "kind" : ""
                }
              ],
              "name" : "oldSchemaVersion"
            }
          ],
          "key.doc.line" : "437",
          "key.doc.full_as_xml" : "",
          "key.name" : "RLMMigrationBlock",
          "key.doc.column" : "16",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMRealm.h",
          "key.usr" : "c:RLMRealm.h@T@RLMMigrationBlock"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
          "key.parsed_declaration" : "@interface RLMResults < RLMObjectType : RLMObject * >  : NSObject<RLMCollection,NSFastEnumeration> ",
          "key.doc.comment" : "RLMResults is an auto-updating container type in Realm returned from object\nqueries.\n\nRLMResults can be queried with the same predicates as RLMObject and RLMArray\nand you can chain queries to further filter query results.\n\nRLMResults cannot be created directly.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "37",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "@property(readonly, assign, nonatomic) NSUInteger count;",
              "key.doc.comment" : "Number of objects in the results.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "47",
              "key.name" : "count",
              "key.doc.column" : "52",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(py)count"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "@property(readonly, copy, nonatomic) NSString *_Nonnull objectClassName;",
              "key.doc.comment" : "The class name (i.e. type) of the RLMObjects contained in this RLMResults.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "52",
              "key.name" : "objectClassName",
              "key.doc.column" : "49",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(py)objectClassName"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) RLMRealm *_Nonnull realm;",
              "key.doc.comment" : "The Realm this `RLMResults` is associated with.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "57",
              "key.name" : "realm",
              "key.doc.column" : "43",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(py)realm"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull RLMObjectType)objectAtIndex:(NSUInteger)index;",
              "key.doc.comment" : "Returns the object at the index specified.\n\n- parameter: index   The index to look up.\n\n- returns: An RLMObject of the class contained by this RLMResults.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The index to look up.",
                      "kind" : ""
                    }
                  ],
                  "name" : "index"
                }
              ],
              "key.doc.line" : "73",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectAtIndex:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMObject of the class contained by this RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "18",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)objectAtIndex:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nullable RLMObjectType)firstObject;",
              "key.doc.comment" : "Returns the first object in the results.\n\nReturns `nil` if called on an empty RLMResults.\n\n- returns: An RLMObject of the class contained by this RLMResults.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "82",
              "key.name" : "firstObject",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMObject of the class contained by this RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "27",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)firstObject"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nullable RLMObjectType)lastObject;",
              "key.doc.comment" : "Returns the last object in the results.\n\nReturns `nil` if called on an empty RLMResults.\n\n- returns: An RLMObject of the class contained by this RLMResults.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "91",
              "key.name" : "lastObject",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMObject of the class contained by this RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "27",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)lastObject"
            },
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "109",
              "key.name" : "MARK: Querying Results",
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (NSUInteger)indexOfObject:(nonnull RLMObjectType)object;",
              "key.doc.comment" : "\nGets the index of an object.\n\nReturns NSNotFound if the object is not found in this RLMResults.\n\n- parameter: object  An object (of the same type as returned from the objectClassName selector).",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An object (of the same type as returned from the objectClassName selector).",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "109",
              "key.doc.full_as_xml" : "",
              "key.name" : "indexOfObject:",
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)indexOfObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (NSUInteger)indexOfObjectWhere:(nonnull NSString *)predicateFormat, ...;",
              "key.doc.comment" : "Gets the index of the first object matching the predicate.\n\n- parameter: predicateFormat The predicate format string which can accept variable arguments.\n\n- returns:    Index of object or NSNotFound if the object is not found in this RLMResults.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate format string which can accept variable arguments.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicateFormat"
                }
              ],
              "key.doc.line" : "118",
              "key.doc.full_as_xml" : "",
              "key.name" : "indexOfObjectWhere:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Index of object or NSNotFound if the object is not found in this RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)indexOfObjectWhere:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (NSUInteger)indexOfObjectWithPredicate:(nonnull NSPredicate *)predicate;",
              "key.doc.comment" : "Gets the index of the first object matching the predicate.\n\n- parameter: predicate   The predicate to filter the objects.\n\n- returns:    Index of object or NSNotFound if the object is not found in this RLMResults.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate to filter the objects.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicate"
                }
              ],
              "key.doc.line" : "127",
              "key.doc.full_as_xml" : "",
              "key.name" : "indexOfObjectWithPredicate:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Index of object or NSNotFound if the object is not found in this RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)indexOfObjectWithPredicate:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)objectsWhere:\n        (nonnull NSString *)predicateFormat, ...;",
              "key.doc.comment" : "Get objects matching the given predicate in the RLMResults.\n\n- parameter: predicateFormat The predicate format string which can accept variable arguments.\n\n- returns:                An RLMResults of objects that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate format string which can accept variable arguments.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicateFormat"
                }
              ],
              "key.doc.line" : "136",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsWhere:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)objectsWhere:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)objectsWithPredicate:\n        (nonnull NSPredicate *)predicate;",
              "key.doc.comment" : "Get objects matching the given predicate in the RLMResults.\n\n- parameter: predicate   The predicate to filter the objects.\n\n- returns:            An RLMResults of objects that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate to filter the objects.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicate"
                }
              ],
              "key.doc.line" : "145",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsWithPredicate:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)objectsWithPredicate:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)\n    sortedResultsUsingProperty:(nonnull NSString *)property\n                     ascending:(BOOL)ascending;",
              "key.doc.comment" : "Get a sorted `RLMResults` from an existing `RLMResults` sorted by a property.\n\n- parameter: property    The property name to sort by.\n- parameter: ascending   The direction to sort by.\n\n- returns:    An RLMResults sorted by the specified property.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property name to sort by.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The direction to sort by.",
                      "kind" : ""
                    }
                  ],
                  "name" : "ascending"
                }
              ],
              "key.doc.line" : "155",
              "key.doc.full_as_xml" : "",
              "key.name" : "sortedResultsUsingProperty:ascending:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults sorted by the specified property.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)sortedResultsUsingProperty:ascending:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)sortedResultsUsingDescriptors:\n        (nonnull NSArray *)properties;",
              "key.doc.comment" : "Get a sorted `RLMResults` from an existing `RLMResults` sorted by an `NSArray`` of `RLMSortDescriptor`s.\n\n- parameter: properties  An array of `RLMSortDescriptor`s to sort by.\n\n- returns:    An RLMResults sorted by the specified properties.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An array of `RLMSortDescriptor`s to sort by.",
                      "kind" : ""
                    }
                  ],
                  "name" : "properties"
                }
              ],
              "key.doc.line" : "164",
              "key.doc.full_as_xml" : "",
              "key.name" : "sortedResultsUsingDescriptors:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults sorted by the specified properties.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)sortedResultsUsingDescriptors:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nullable id)minOfProperty:(nonnull NSString *)property;",
              "key.doc.comment" : "Returns the minimum (lowest) value of the given property\n\nNSNumber *min = [results minOfProperty:@\"age\"];\n\n- warning: You cannot use this method on RLMObject, RLMArray, and NSData properties.\n\n- parameter: property The property to look for a minimum on. Only properties of type int, float, double and NSDate are supported.\n\n- returns: The minimum value for the property amongst objects in an RLMResults.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property to look for a minimum on. Only properties of type int, float, double and NSDate are supported.",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                }
              ],
              "key.doc.line" : "185",
              "key.doc.full_as_xml" : "",
              "key.name" : "minOfProperty:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The minimum value for the property amongst objects in an RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)minOfProperty:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nullable id)maxOfProperty:(nonnull NSString *)property;",
              "key.doc.comment" : "Returns the maximum (highest) value of the given property of objects in an RLMResults\n\nNSNumber *max = [results maxOfProperty:@\"age\"];\n\n- warning: You cannot use this method on RLMObject, RLMArray, and NSData properties.\n\n- parameter: property The property to look for a maximum on. Only properties of type int, float, double and NSDate are supported.\n\n- returns: The maximum value for the property amongst objects in an RLMResults",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property to look for a maximum on. Only properties of type int, float, double and NSDate are supported.",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                }
              ],
              "key.doc.line" : "198",
              "key.doc.full_as_xml" : "",
              "key.name" : "maxOfProperty:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The maximum value for the property amongst objects in an RLMResults",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)maxOfProperty:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull NSNumber *)sumOfProperty:(nonnull NSString *)property;",
              "key.doc.comment" : "Returns the sum of the given property for objects in an RLMResults.\n\nNSNumber *sum = [results sumOfProperty:@\"age\"];\n\n- warning: You cannot use this method on RLMObject, RLMArray, and NSData properties.\n\n- parameter: property The property to calculate sum on. Only properties of type int, float and double are supported.\n\n- returns: The sum of the given property over all objects in an RLMResults.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property to calculate sum on. Only properties of type int, float and double are supported.",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                }
              ],
              "key.doc.line" : "211",
              "key.doc.full_as_xml" : "",
              "key.name" : "sumOfProperty:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The sum of the given property over all objects in an RLMResults.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "14",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)sumOfProperty:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nullable NSNumber *)averageOfProperty:(nonnull NSString *)property;",
              "key.doc.comment" : "Returns the average of a given property for objects in an RLMResults.\n\nNSNumber *average = [results averageOfProperty:@\"age\"];\n\n- warning: You cannot use this method on RLMObject, RLMArray, and NSData properties.\n\n- parameter: property The property to calculate average on. Only properties of type int, float and double are supported.\n\n- returns:    The average for the given property amongst objects in an RLMResults. This will be of type double for both\nfloat and double properties.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property to calculate average on. Only properties of type int, float and double are supported.",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                }
              ],
              "key.doc.line" : "225",
              "key.doc.full_as_xml" : "",
              "key.name" : "averageOfProperty:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "   The average for the given property amongst objects in an RLMResults. This will be of type double for both\nfloat and double properties.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "23",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)averageOfProperty:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "- (nonnull instancetype)init;",
              "key.doc.comment" : "-[RLMResults init] is not available because RLMResults cannot be created directly.\nRLMResults can be obtained by querying a Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "242",
              "key.name" : "init",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(im)init"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.parsed_declaration" : "+ (nonnull instancetype) new;",
              "key.doc.comment" : "+[RLMResults new] is not available because RLMResults cannot be created directly.\nRLMResults can be obtained by querying a Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "248",
              "key.name" : "new",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
              "key.usr" : "c:objc(cs)RLMResults(cm)new"
            }
          ],
          "key.name" : "RLMResults",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMResults.h",
          "key.usr" : "c:objc(cs)RLMResults"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
          "key.parsed_declaration" : "@interface RLMArray < RLMObjectType : RLMObject * >  : NSObject<RLMCollection,NSFastEnumeration> ",
          "key.doc.comment" : "RLMArray is the container type in Realm used to define to-many relationships.\n\nUnlike an NSArray, RLMArrays hold a single type, specified by the `objectClassName` property.\nThis is referred to in these docs as the “type” of the array.\n\nWhen declaring an RLMArray property, the type must be marked as conforming to a\nprotocol by the same name as the objects it should contain (see the\n`RLM_ARRAY_TYPE` macro). RLMArray properties can also use Objective-C generics\nif available. For example:\n\n    RLM_ARRAY_TYPE(ObjectType)\n    ...\n    @property RLMArray<ObjectType *><ObjectType> *arrayOfObjectTypes;\n\nRLMArrays can be queried with the same predicates as RLMObject and RLMResults.\n\nRLMArrays cannot be created directly. RLMArray properties on RLMObjects are\nlazily created when accessed, or can be obtained by querying a Realm.\n\n### Key-Value Observing\n\nRLMArray supports array key-value observing on RLMArray properties on RLMObject\nsubclasses, and the `invalidated` property on RLMArray instances themselves is\nkey-value observing compliant when the RLMArray is attached to a persisted\nRLMObject (RLMArrays on standalone RLMObjects will never become invalidated).\n\nBecause RLMArrays are attached to the object which they are a property of, they\ndo not require using the mutable collection proxy objects from\n`-mutableArrayValueForKey:` or KVC-compatible mutation methods on the containing\nobject. Instead, you can call the mutation methods on the RLMArray directly.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "62",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "@property(readonly, assign, nonatomic) NSUInteger count;",
              "key.doc.comment" : "Number of objects in the array.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "72",
              "key.name" : "count",
              "key.doc.column" : "52",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(py)count"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "@property(readonly, copy, nonatomic) NSString *_Nonnull objectClassName;",
              "key.doc.comment" : "The class name (i.e. type) of the RLMObjects contained in this RLMArray.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "77",
              "key.name" : "objectClassName",
              "key.doc.column" : "49",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(py)objectClassName"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic, nullable) RLMRealm *realm;",
              "key.doc.comment" : "The Realm in which this array is persisted. Returns nil for standalone arrays.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "82",
              "key.name" : "realm",
              "key.doc.column" : "53",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(py)realm"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "@property(readonly, getter=isInvalidated, nonatomic) BOOL invalidated;",
              "key.doc.comment" : "Indicates if an array can no longer be accessed.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "87",
              "key.name" : "invalidated",
              "key.doc.column" : "62",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(py)invalidated"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull RLMObjectType)objectAtIndex:(NSUInteger)index;",
              "key.doc.comment" : "Returns the object at the index specified.\n\n- parameter: index   The index to look up.\n\n- returns: An RLMObject of the class contained by this RLMArray.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The index to look up.",
                      "kind" : ""
                    }
                  ],
                  "name" : "index"
                }
              ],
              "key.doc.line" : "103",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectAtIndex:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMObject of the class contained by this RLMArray.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "18",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)objectAtIndex:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nullable RLMObjectType)firstObject;",
              "key.doc.comment" : "Returns the first object in the array.\n\nReturns `nil` if called on an empty RLMArray.\n\n- returns: An RLMObject of the class contained by this RLMArray.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "112",
              "key.name" : "firstObject",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMObject of the class contained by this RLMArray.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "27",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)firstObject"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nullable RLMObjectType)lastObject;",
              "key.doc.comment" : "Returns the last object in the array.\n\nReturns `nil` if called on an empty RLMArray.\n\n- returns: An RLMObject of the class contained by this RLMArray.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "121",
              "key.name" : "lastObject",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMObject of the class contained by this RLMArray.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "27",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)lastObject"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)addObject:(nonnull RLMObjectType)object;",
              "key.doc.comment" : "Adds an object to the end of the array.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: object  An RLMObject of the class contained by this RLMArray.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An RLMObject of the class contained by this RLMArray.",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "139",
              "key.doc.full_as_xml" : "",
              "key.name" : "addObject:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)addObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)addObjects:(nonnull id<NSFastEnumeration>)objects;",
              "key.doc.comment" : "Adds an array of objects at the end of the array.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: objects     An enumerable object such as NSArray or RLMResults which contains objects of the\n                   same class as this RLMArray.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An enumerable object such as NSArray or RLMResults which contains objects of the\n               same class as this RLMArray.",
                      "kind" : ""
                    }
                  ],
                  "name" : "objects"
                }
              ],
              "key.doc.line" : "149",
              "key.doc.full_as_xml" : "",
              "key.name" : "addObjects:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)addObjects:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)insertObject:(nonnull RLMObjectType)anObject atIndex:(NSUInteger)index;",
              "key.doc.comment" : "Inserts an object at the given index.\n\nThrows an exception when called with an index greater than the number of objects in this RLMArray.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: anObject  An object (of the same type as returned from the objectClassName selector).\n- parameter: index   The array index at which the object is inserted.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An object (of the same type as returned from the objectClassName selector).\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "anObject"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The array index at which the object is inserted.",
                      "kind" : ""
                    }
                  ],
                  "name" : "index"
                }
              ],
              "key.doc.line" : "161",
              "key.doc.full_as_xml" : "",
              "key.name" : "insertObject:atIndex:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)insertObject:atIndex:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)removeObjectAtIndex:(NSUInteger)index;",
              "key.doc.comment" : "Removes an object at a given index.\n\nThrows an exception when called with an index greater than the number of objects in this RLMArray.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: index   The array index identifying the object to be removed.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The array index identifying the object to be removed.",
                      "kind" : ""
                    }
                  ],
                  "name" : "index"
                }
              ],
              "key.doc.line" : "172",
              "key.doc.full_as_xml" : "",
              "key.name" : "removeObjectAtIndex:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)removeObjectAtIndex:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)removeLastObject;",
              "key.doc.comment" : "Removes the last object in an RLMArray.\n\n- warning: This method can only be called during a write transaction.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "179",
              "key.name" : "removeLastObject",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)removeLastObject"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)removeAllObjects;",
              "key.doc.comment" : "Removes all objects from an RLMArray.\n\n- warning: This method can only be called during a write transaction.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "186",
              "key.name" : "removeAllObjects",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)removeAllObjects"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)replaceObjectAtIndex:(NSUInteger)index\n                  withObject:(nonnull RLMObjectType)anObject;",
              "key.doc.comment" : "Replaces an object at the given index with a new object.\n\nThrows an exception when called with an index greater than the number of objects in this RLMArray.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: index       The array index of the object to be replaced.\n- parameter: anObject    An object (of the same type as returned from the objectClassName selector).",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The array index of the object to be replaced.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "index"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "An object (of the same type as returned from the objectClassName selector).",
                      "kind" : ""
                    }
                  ],
                  "name" : "anObject"
                }
              ],
              "key.doc.line" : "198",
              "key.doc.full_as_xml" : "",
              "key.name" : "replaceObjectAtIndex:withObject:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)replaceObjectAtIndex:withObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)moveObjectAtIndex:(NSUInteger)sourceIndex\n                  toIndex:(NSUInteger)destinationIndex;",
              "key.doc.comment" : "Moves the object at the given source index to the given destination index.\n\nThrows an exception when called with an index greater than or equal to the\nnumber of objects in this RLMArray.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: sourceIndex      The index of the object to be moved.\n- parameter: destinationIndex The index to which the object at `sourceIndex` should be moved.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The index of the object to be moved.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "sourceIndex"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The index to which the object at `sourceIndex` should be moved.",
                      "kind" : ""
                    }
                  ],
                  "name" : "destinationIndex"
                }
              ],
              "key.doc.line" : "211",
              "key.doc.full_as_xml" : "",
              "key.name" : "moveObjectAtIndex:toIndex:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)moveObjectAtIndex:toIndex:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (void)exchangeObjectAtIndex:(NSUInteger)index1\n            withObjectAtIndex:(NSUInteger)index2;",
              "key.doc.comment" : "Exchanges the objects in the array at given indexes.\n\nThrows an exception when either index exceeds the bounds of this RLMArray.\n\n- warning: This method can only be called during a write transaction.\n\n- parameter: index1 The index of the object with which to replace the object at index `index2`.\n- parameter: index2 The index of the object with which to replace the object at index `index1`.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The index of the object with which to replace the object at index `index2`.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "index1"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The index of the object with which to replace the object at index `index1`.",
                      "kind" : ""
                    }
                  ],
                  "name" : "index2"
                }
              ],
              "key.doc.line" : "223",
              "key.doc.full_as_xml" : "",
              "key.name" : "exchangeObjectAtIndex:withObjectAtIndex:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)exchangeObjectAtIndex:withObjectAtIndex:"
            },
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "239",
              "key.name" : "MARK: Querying an Array",
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (NSUInteger)indexOfObject:(nonnull RLMObjectType)object;",
              "key.doc.comment" : "\nGets the index of an object.\n\nReturns NSNotFound if the object is not found in this RLMArray.\n\n- parameter: object  An object (of the same type as returned from the objectClassName selector).",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An object (of the same type as returned from the objectClassName selector).",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "239",
              "key.doc.full_as_xml" : "",
              "key.name" : "indexOfObject:",
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)indexOfObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (NSUInteger)indexOfObjectWhere:(nonnull NSString *)predicateFormat, ...;",
              "key.doc.comment" : "Gets the index of the first object matching the predicate.\n\n- parameter: predicateFormat The predicate format string which can accept variable arguments.\n\n- returns:    Index of object or NSNotFound if the object is not found in this RLMArray.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate format string which can accept variable arguments.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicateFormat"
                }
              ],
              "key.doc.line" : "248",
              "key.doc.full_as_xml" : "",
              "key.name" : "indexOfObjectWhere:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Index of object or NSNotFound if the object is not found in this RLMArray.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)indexOfObjectWhere:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (NSUInteger)indexOfObjectWithPredicate:(nonnull NSPredicate *)predicate;",
              "key.doc.comment" : "Gets the index of the first object matching the predicate.\n\n- parameter: predicate   The predicate to filter the objects.\n\n- returns:    Index of object or NSNotFound if the object is not found in this RLMArray.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate to filter the objects.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicate"
                }
              ],
              "key.doc.line" : "257",
              "key.doc.full_as_xml" : "",
              "key.name" : "indexOfObjectWithPredicate:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Index of object or NSNotFound if the object is not found in this RLMArray.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)indexOfObjectWithPredicate:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)objectsWhere:\n        (nonnull NSString *)predicateFormat, ...;",
              "key.doc.comment" : "Get objects matching the given predicate in the RLMArray.\n\n- parameter: predicateFormat The predicate format string which can accept variable arguments.\n\n- returns:                An RLMResults of objects that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate format string which can accept variable arguments.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicateFormat"
                }
              ],
              "key.doc.line" : "266",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsWhere:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)objectsWhere:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)objectsWithPredicate:\n        (nonnull NSPredicate *)predicate;",
              "key.doc.comment" : "Get objects matching the given predicate in the RLMArray.\n\n- parameter: predicate   The predicate to filter the objects.\n\n- returns:            An RLMResults of objects that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate to filter the objects.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicate"
                }
              ],
              "key.doc.line" : "275",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsWithPredicate:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)objectsWithPredicate:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)\n    sortedResultsUsingProperty:(nonnull NSString *)property\n                     ascending:(BOOL)ascending;",
              "key.doc.comment" : "Get a sorted RLMResults from an RLMArray\n\n- parameter: property    The property name to sort by.\n- parameter: ascending   The direction to sort by.\n\n- returns:    An RLMResults sorted by the specified property.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property name to sort by.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The direction to sort by.",
                      "kind" : ""
                    }
                  ],
                  "name" : "ascending"
                }
              ],
              "key.doc.line" : "285",
              "key.doc.full_as_xml" : "",
              "key.name" : "sortedResultsUsingProperty:ascending:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults sorted by the specified property.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)sortedResultsUsingProperty:ascending:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull RLMResults<RLMObjectType> *)sortedResultsUsingDescriptors:\n        (nonnull NSArray *)properties;",
              "key.doc.comment" : "Get a sorted RLMResults from an RLMArray\n\n- parameter: properties  An array of `RLMSortDescriptor`s to sort by.\n\n- returns:    An RLMResults sorted by the specified properties.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "An array of `RLMSortDescriptor`s to sort by.",
                      "kind" : ""
                    }
                  ],
                  "name" : "properties"
                }
              ],
              "key.doc.line" : "294",
              "key.doc.full_as_xml" : "",
              "key.name" : "sortedResultsUsingDescriptors:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults sorted by the specified properties.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "35",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)sortedResultsUsingDescriptors:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull instancetype)init;",
              "key.doc.comment" : "-[RLMArray init] is not available because RLMArrays cannot be created directly.\nRLMArray properties on RLMObjects are lazily created when accessed, or can be obtained by querying a Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "312",
              "key.name" : "init",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)init"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "+ (nonnull instancetype) new;",
              "key.doc.comment" : "+[RLMArray new] is not available because RLMArrays cannot be created directly.\nRLMArray properties on RLMObjects are lazily created when accessed, or can be obtained by querying a Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "318",
              "key.name" : "new",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(cm)new"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (BOOL)isInvalidated;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "87",
              "key.name" : "isInvalidated",
              "key.doc.column" : "62",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMArray(im)isInvalidated"
            }
          ],
          "key.name" : "RLMArray",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
          "key.usr" : "c:objc(cs)RLMArray"
        },
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.category",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
          "key.parsed_declaration" : "@interface RLMArray (Swift)",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "352",
          "key.name" : "RLMArray(Swift)",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
          "key.usr" : "c:objc(cy)RLMArray@Swift"
        },
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
          "key.parsed_declaration" : "@interface RLMSortDescriptor : NSObject",
          "key.doc.comment" : "An RLMSortDescriptor stores a property name and a sort order for use with\n`sortedResultsUsingDescriptors:`. It is similar to NSSortDescriptor, but supports\nonly the subset of functionality which can be efficiently run by the query\nengine. RLMSortDescriptor instances are immutable.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "328",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) NSString *_Nonnull property;",
              "key.doc.comment" : "The name of the property which this sort descriptor orders results by.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "333",
              "key.name" : "property",
              "key.doc.column" : "43",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMSortDescriptor(py)property"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) BOOL ascending;",
              "key.doc.comment" : "Whether this descriptor sorts in ascending or descending order.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "338",
              "key.name" : "ascending",
              "key.doc.column" : "38",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMSortDescriptor(py)ascending"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)sortDescriptorWithProperty:\n                            (nonnull NSString *)propertyName\n                                         ascending:(BOOL)ascending;",
              "key.doc.comment" : "Returns a new sort descriptor for the given property name and order.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "343",
              "key.name" : "sortDescriptorWithProperty:ascending:",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMSortDescriptor(cm)sortDescriptorWithProperty:ascending:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.parsed_declaration" : "- (nonnull instancetype)reversedSortDescriptor;",
              "key.doc.comment" : "Returns a copy of the receiver with the sort order reversed.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "348",
              "key.name" : "reversedSortDescriptor",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
              "key.usr" : "c:objc(cs)RLMSortDescriptor(im)reversedSortDescriptor"
            }
          ],
          "key.name" : "RLMSortDescriptor",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMArray.h",
          "key.usr" : "c:objc(cs)RLMSortDescriptor"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
          "key.parsed_declaration" : "@interface RLMObject : RLMObjectBase",
          "key.doc.comment" : "In Realm you define your model classes by subclassing `RLMObject` and adding properties to be persisted.\nYou then instantiate and use your custom subclasses instead of using the `RLMObject` class directly.\n\n    \/\/ Dog.h\n    @interface Dog : RLMObject\n    @property NSString *name;\n    @property BOOL      adopted;\n    @end\n\n    \/\/ Dog.m\n    @implementation Dog\n    @end \/\/none needed\n\n### Supported property types\n\n- `NSString`\n- `NSInteger`, `int`, `long`, `float`, and `double`\n- `BOOL` or `bool`\n- `NSDate`\n- `NSData`\n- `NSNumber<X>`, where X is one of RLMInt, RLMFloat, RLMDouble or RLMBool, for optional number properties\n- `RLMObject` subclasses, so you can have many-to-one relationships.\n- `RLMArray<X>`, where X is an `RLMObject` subclass, so you can have many-to-many relationships.\n\n### Querying\n\nYou can query an object directly via the class methods: `allObjects`, `objectsWhere:`, and `objectsWithPredicate:`.\nThese methods allow you to easily query a custom subclass for instances of this class in the\ndefault Realm. To search in a Realm other than the default Realm use the interface on an RLMRealm instance.\n\n### Relationships\n\nSee our [Cocoa guide](http:\/\/realm.io\/docs\/cocoa\/latest) for more details.\n\n### Key-Value Observing\n\nAll `RLMObject` properties (including properties you create in subclasses) are\n[Key-Value Observing compliant](https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html),\nexcept for `realm` and `objectSchema`. There are several Realm-specific things\nto keep in mind when observing Realm objects:\n\n1. Unlike `NSMutableArray` properties, `RLMArray` properties do not require\n   using the proxy object returned from `-mutableArrayValueForKey:`, or defining\n   KVC mutation methods on the containing class. You can simply call methods on\n   the RLMArray directly and the changes will be observed by the containing\n   object.\n2. Standalone `RLMObjects` cannot be added to a Realm while they have any\n   observed properties.\n3. Modifying persisted `RLMObjects` in `-observeValueForKeyPath:ofObject:change:context:`\n   is problematic. Properties may change when the Realm is not in a write\n   transaction (for example, when `-[RLMRealm refresh]` is called after changes\n   are made on a different thread), and notifications sent prior to the change\n   being applied (when `NSKeyValueObservingOptionPrior` is used) may be sent at\n   times when you *cannot* begin a write transaction.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "87",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "- (nonnull instancetype)init;",
              "key.doc.comment" : "Initialize a standalone RLMObject\n\nInitialize an unpersisted instance of this object.\nCall addObject: on an RLMRealm to add standalone object to a realm.\n\n- see: [RLMRealm addObject:]:",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "102",
              "key.name" : "init",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(im)init"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "- (nonnull instancetype)initWithValue:(nonnull id)value;",
              "key.doc.comment" : "Initialize a standalone RLMObject with values from an NSArray or NSDictionary\n\nInitialize an unpersisted instance of this object.\nCall addObject: on an RLMRealm to add standalone object to a realm.\n\n- see: [RLMRealm addObject:]:",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "113",
              "key.name" : "initWithValue:",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(im)initWithValue:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull NSString *)className;",
              "key.doc.comment" : "Helper to return the class name for an RLMObject subclass.\n\n- warning: Do not override. Realm relies on this method returning the exact class\n         name.\n\n- returns:  The class name for the model class.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "124",
              "key.name" : "className",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The class name for the model class.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)className"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)createInDefaultRealmWithValue:(nonnull id)value;",
              "key.doc.comment" : "Create an RLMObject in the default Realm with a given value.\n\nCreates an instance of this object and adds it to the default Realm populating\nthe object with the given value.\n\nIf nested objects are included in the argument, `createInDefaultRealmWithValue:` will be called\non them.\n\n- parameter: value   The value used to populate the object. This can be any key\/value coding compliant\n               object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n               an NSArray with one object for each persisted property. An exception will be\n               thrown if any required properties are not present and no default is set.\n\nWhen passing in an NSArray, all properties must be present, valid and in the same order as the properties defined in the model.\n\n- see:   defaultPropertyValues",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The value used to populate the object. This can be any key\/value coding compliant\n             object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n             an NSArray with one object for each persisted property. An exception will be\n             thrown if any required properties are not present and no default is set.",
                      "kind" : ""
                    }
                  ],
                  "name" : "value"
                }
              ],
              "key.doc.line" : "144",
              "key.doc.full_as_xml" : "",
              "key.name" : "createInDefaultRealmWithValue:",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)createInDefaultRealmWithValue:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)createInRealm:(nonnull RLMRealm *)realm\n                            withValue:(nonnull id)value;",
              "key.doc.comment" : "Create an RLMObject in a Realm with a given object.\n\nCreates an instance of this object and adds it to the given Realm populating\nthe object with the given object.\n\nIf nested objects are included in the argument, `createInRealm:withValue:` will be called\non them.\n\n- parameter: realm   The Realm in which this object is persisted.\n- parameter: value   The value used to populate the object. This can be any key\/value coding compliant\n               object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n               an NSArray with one object for each persisted property. An exception will be\n               thrown if any required properties are not present and no default is set.\n               \n               When passing in an NSArray, all properties must be present, valid and in the same order as the properties defined in the model.\n\n- see:   defaultPropertyValues",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The Realm in which this object is persisted.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "realm"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The value used to populate the object. This can be any key\/value coding compliant\n             object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n             an NSArray with one object for each persisted property. An exception will be\n             thrown if any required properties are not present and no default is set.",
                      "kind" : ""
                    }
                  ],
                  "name" : "value"
                }
              ],
              "key.doc.line" : "165",
              "key.doc.full_as_xml" : "",
              "key.name" : "createInRealm:withValue:",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)createInRealm:withValue:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)createOrUpdateInDefaultRealmWithValue:(nonnull id)value;",
              "key.doc.comment" : "Create or update an RLMObject in the default Realm with a given object.\n\nThis method can only be called on object types with a primary key defined. If there is already\nan object with the same primary key value in the default RLMRealm its values are updated and the object\nis returned. Otherwise this creates and populates a new instance of this object in the default Realm.\n\nIf nested objects are included in the argument, `createOrUpdateInDefaultRealmWithValue:` will be\ncalled on them if have a primary key (`createInDefaultRealmWithValue:` otherwise).\n\nThis is a no-op if the argument is an RLMObject of the same type already backed by the target realm.\n\n- parameter: value   The value used to populate the object. This can be any key\/value coding compliant\n               object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n               an NSArray with one object for each persisted property. An exception will be\n               thrown if any required properties are not present and no default is set.\n\nWhen passing in an NSArray, all properties must be present, valid and in the same order as the properties defined in the model.\n\n- see:   defaultPropertyValues, primaryKey",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The value used to populate the object. This can be any key\/value coding compliant\n             object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n             an NSArray with one object for each persisted property. An exception will be\n             thrown if any required properties are not present and no default is set.",
                      "kind" : ""
                    }
                  ],
                  "name" : "value"
                }
              ],
              "key.doc.line" : "188",
              "key.doc.full_as_xml" : "",
              "key.name" : "createOrUpdateInDefaultRealmWithValue:",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)createOrUpdateInDefaultRealmWithValue:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull instancetype)createOrUpdateInRealm:(nonnull RLMRealm *)realm\n                                    withValue:(nonnull id)value;",
              "key.doc.comment" : "Create or update an RLMObject with a given object.\n\nThis method can only be called on object types with a primary key defined. If there is already\nan object with the same primary key value in the provided RLMRealm its values are updated and the object\nis returned. Otherwise this creates and populates a new instance of this object in the provided Realm.\n\nIf nested objects are included in the argument, `createOrUpdateInRealm:withValue:` will be\ncalled on them if have a primary key (`createInRealm:withValue:` otherwise).\n\nThis is a no-op if the argument is an RLMObject of the same type already backed by the target realm.\n\n- parameter: realm   The Realm in which this object is persisted.\n- parameter: value   The value used to populate the object. This can be any key\/value coding compliant\n               object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n               an NSArray with one object for each persisted property. An exception will be\n               thrown if any required properties are not present and no default is set.\n\nWhen passing in an NSArray, all properties must be present, valid and in the same order as the properties defined in the model.\n\n- see:   defaultPropertyValues, primaryKey",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The Realm in which this object is persisted.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "realm"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The value used to populate the object. This can be any key\/value coding compliant\n             object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n             an NSArray with one object for each persisted property. An exception will be\n             thrown if any required properties are not present and no default is set.",
                      "kind" : ""
                    }
                  ],
                  "name" : "value"
                }
              ],
              "key.doc.line" : "212",
              "key.doc.full_as_xml" : "",
              "key.name" : "createOrUpdateInRealm:withValue:",
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)createOrUpdateInRealm:withValue:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic, nullable) RLMRealm *realm;",
              "key.doc.comment" : "The Realm in which this object is persisted. Returns nil for standalone objects.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "217",
              "key.name" : "realm",
              "key.doc.column" : "53",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(py)realm"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) RLMObjectSchema *_Nonnull objectSchema;",
              "key.doc.comment" : "The ObjectSchema which lists the persisted properties for this object.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "222",
              "key.name" : "objectSchema",
              "key.doc.column" : "50",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(py)objectSchema"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "@property(readonly, getter=isInvalidated, nonatomic) BOOL invalidated;",
              "key.doc.comment" : "Indicates if an object can no longer be accessed.\n\nAn object can no longer be accessed if the object has been deleted from the containing `realm` or\nif `invalidate` is called on the containing `realm`.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "230",
              "key.name" : "invalidated",
              "key.doc.column" : "62",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(py)invalidated"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull NSArray *)indexedProperties;",
              "key.doc.comment" : "Return an array of property names for properties which should be indexed. Only supported\nfor string and int properties.\n- returns:    NSArray of property names.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "243",
              "key.name" : "indexedProperties",
              "key.doc.result_discussion" : [
                {
                  "Para" : "NSArray of property names.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "14",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)indexedProperties"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nullable NSDictionary *)defaultPropertyValues;",
              "key.doc.comment" : "Implement to indicate the default values to be used for each property.\n\n- returns:    NSDictionary mapping property names to their default values.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "250",
              "key.name" : "defaultPropertyValues",
              "key.doc.result_discussion" : [
                {
                  "Para" : "NSDictionary mapping property names to their default values.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "28",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)defaultPropertyValues"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nullable NSString *)primaryKey;",
              "key.doc.comment" : "Implement to designate a property as the primary key for an RLMObject subclass. Only properties of\ntype RLMPropertyTypeString and RLMPropertyTypeInt can be designated as the primary key. Primary key \nproperties enforce uniqueness for each value whenever the property is set which incurs some overhead.\nIndexes are created automatically for primary key properties.\n\n- returns:    Name of the property designated as the primary key.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "260",
              "key.name" : "primaryKey",
              "key.doc.result_discussion" : [
                {
                  "Para" : "Name of the property designated as the primary key.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "24",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)primaryKey"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nullable NSArray *)ignoredProperties;",
              "key.doc.comment" : "Implement to return an array of property names to ignore. These properties will not be persisted\nand are treated as transient.\n\n- returns:    NSArray of property names to ignore.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "268",
              "key.name" : "ignoredProperties",
              "key.doc.result_discussion" : [
                {
                  "Para" : "NSArray of property names to ignore.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "23",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)ignoredProperties"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull NSArray *)requiredProperties;",
              "key.doc.comment" : "Implement to return an array of property names that should not allow storing nil.\n\nBy default, all properties of a type that support storing nil are considered optional properties.\nTo require that an object in a Realm always have a non-nil value for a property,\nadd the name of the property to the array returned from this method.\n\nCurrently Object properties cannot be required. Array and NSNumber properties\ncan, but it makes little sense to do so: arrays do not support storing nil, and\nif you want a non-optional number you should instead use the primitive type.\n\n- returns:    NSArray of property names that are required.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "283",
              "key.name" : "requiredProperties",
              "key.doc.result_discussion" : [
                {
                  "Para" : "NSArray of property names that are required.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "14",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)requiredProperties"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull RLMResults *)allObjects;",
              "key.doc.comment" : "Get all objects of this type from the default Realm.\n\n- returns:    An RLMResults of all objects of this type in the default Realm.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "296",
              "key.name" : "allObjects",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of all objects of this type in the default Realm.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)allObjects"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull RLMResults *)objectsWhere:(nonnull NSString *)predicateFormat, ...;",
              "key.doc.comment" : "Get objects matching the given predicate for this type from the default Realm.\n\n- parameter: predicateFormat The predicate format string which can accept variable arguments.\n\n- returns:    An RLMResults of objects of the subclass type in the default Realm that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate format string which can accept variable arguments.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicateFormat"
                }
              ],
              "key.doc.line" : "305",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsWhere:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects of the subclass type in the default Realm that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)objectsWhere:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull RLMResults *)objectsWithPredicate:(nullable NSPredicate *)predicate;",
              "key.doc.comment" : "Get objects matching the given predicate for this type from the default Realm.\n\n- parameter: predicate   The predicate to filter the objects.\n\n- returns:    An RLMResults of objects of the subclass type in the default Realm that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate to filter the objects.",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicate"
                }
              ],
              "key.doc.line" : "315",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsWithPredicate:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects of the subclass type in the default Realm that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)objectsWithPredicate:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nullable instancetype)objectForPrimaryKey:(nullable id)primaryKey;",
              "key.doc.comment" : "Get the single object with the given primary key from the default Realm.\n\nReturns the object from the default Realm which has the given primary key, or\n`nil` if the object does not exist. This is slightly faster than the otherwise\nequivalent `[[SubclassName objectsWhere:@\"primaryKeyPropertyName = %@\", key] firstObject]`.\n\nThis method requires that `primaryKey` be overridden on the receiving subclass.\n\n- returns:    An object of the subclass type or nil if an object with the given primary key does not exist.\n- see:       -primaryKey",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "329",
              "key.name" : "objectForPrimaryKey:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An object of the subclass type or nil if an object with the given primary key does not exist.\n ",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "26",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)objectForPrimaryKey:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull RLMResults *)allObjectsInRealm:(nonnull RLMRealm *)realm;",
              "key.doc.comment" : "Get all objects of this type from the specified Realm.\n\n- parameter: realm   The Realm instance to query.\n\n- returns:        An RLMResults of all objects of this type in the specified Realm.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The Realm instance to query.",
                      "kind" : ""
                    }
                  ],
                  "name" : "realm"
                }
              ],
              "key.doc.line" : "344",
              "key.doc.full_as_xml" : "",
              "key.name" : "allObjectsInRealm:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of all objects of this type in the specified Realm.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)allObjectsInRealm:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull RLMResults *)objectsInRealm:(nonnull RLMRealm *)realm\n                                 where:(nonnull NSString *)predicateFormat, ...;",
              "key.doc.comment" : "Get objects matching the given predicate for this type from the specified Realm.\n\n- parameter: predicateFormat The predicate format string which can accept variable arguments.\n- parameter: realm           The Realm instance to query.\n\n- returns:    An RLMResults of objects of the subclass type in the specified Realm that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate format string which can accept variable arguments.\n",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicateFormat"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The Realm instance to query.",
                      "kind" : ""
                    }
                  ],
                  "name" : "realm"
                }
              ],
              "key.doc.line" : "354",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsInRealm:where:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects of the subclass type in the specified Realm that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)objectsInRealm:where:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nonnull RLMResults *)objectsInRealm:(nonnull RLMRealm *)realm\n                         withPredicate:(nullable NSPredicate *)predicate;",
              "key.doc.comment" : "Get objects matching the given predicate for this type from the specified Realm.\n\n- parameter: predicate   The predicate to filter the objects.\n- parameter: realm       The Realm instance to query.\n\n- returns:    An RLMResults of objects of the subclass type in the specified Realm that match the given predicate",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The predicate to filter the objects.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "predicate"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The Realm instance to query.",
                      "kind" : ""
                    }
                  ],
                  "name" : "realm"
                }
              ],
              "key.doc.line" : "364",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectsInRealm:withPredicate:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An RLMResults of objects of the subclass type in the specified Realm that match the given predicate",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "17",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)objectsInRealm:withPredicate:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.class",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "+ (nullable instancetype)objectInRealm:(nonnull RLMRealm *)realm\n                         forPrimaryKey:(nullable id)primaryKey;",
              "key.doc.comment" : "Get the single object with the given primary key from the specified Realm.\n\nReturns the object from the specified Realm which has the given primary key, or\n`nil` if the object does not exist. This is slightly faster than the otherwise\nequivalent `[[SubclassName objectsInRealm:realm where:@\"primaryKeyPropertyName = %@\", key] firstObject]`.\n\nThis method requires that `primaryKey` be overridden on the receiving subclass.\n\n- returns:    An object of the subclass type or nil if an object with the given primary key does not exist.\n- see:       -primaryKey",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "378",
              "key.name" : "objectInRealm:forPrimaryKey:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An object of the subclass type or nil if an object with the given primary key does not exist.\n ",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "26",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(cm)objectInRealm:forPrimaryKey:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "- (nonnull NSArray *)linkingObjectsOfClass:(nonnull NSString *)className\n                               forProperty:(nonnull NSString *)property;",
              "key.doc.comment" : "Get an `NSArray` of objects of type `className` which have this object as the given property value. This can\nbe used to get the inverse relatshionship value for `RLMObject` and `RLMArray` properties.\n\n- parameter: className   The type of object on which the relationship to query is defined.\n- parameter: property    The name of the property which defines the relationship.\n\n- returns:    An NSArray of objects of type `className` which have this object as thier value for the `property` property.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The type of object on which the relationship to query is defined.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "className"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The name of the property which defines the relationship.",
                      "kind" : ""
                    }
                  ],
                  "name" : "property"
                }
              ],
              "key.doc.line" : "389",
              "key.doc.full_as_xml" : "",
              "key.name" : "linkingObjectsOfClass:forProperty:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "An NSArray of objects of type `className` which have this object as thier value for the `property` property.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "14",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(im)linkingObjectsOfClass:forProperty:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "- (BOOL)isEqualToObject:(nonnull RLMObject *)object;",
              "key.doc.comment" : "Returns YES if another RLMObject points to the same object in an RLMRealm. For RLMObject types\nwith a primary, key, `isEqual:` is overridden to use this method (along with a corresponding\nimplementation for `hash`.\n\n- parameter: object  The object to compare to.\n\n- returns:    YES if the object represents the same object in the same RLMRealm.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The object to compare to.",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "400",
              "key.doc.full_as_xml" : "",
              "key.name" : "isEqualToObject:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "YES if the object represents the same object in the same RLMRealm.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(im)isEqualToObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.parsed_declaration" : "- (BOOL)isInvalidated;",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "230",
              "key.name" : "isInvalidated",
              "key.doc.column" : "62",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
              "key.usr" : "c:objc(cs)RLMObject(im)isInvalidated"
            }
          ],
          "key.name" : "RLMObject",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObject.h",
          "key.usr" : "c:objc(cs)RLMObject"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
          "key.parsed_declaration" : "@interface RLMObjectSchema : NSObject <NSCopying>",
          "key.doc.comment" : "This class represents Realm model object schemas persisted to Realm in an RLMSchema.\n\nWhen using Realm, RLMObjectSchema objects allow performing migrations and\nintrospecting the database's schema.\n\nObject schemas map to tables in the core database.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "34",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.parsed_declaration" : "@property(readonly, copy, nonatomic) NSArray *_Nonnull properties;",
              "key.doc.comment" : "Array of persisted RLMProperty objects for an object.\n\n- see: RLMProperty",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "41",
              "key.name" : "properties",
              "key.doc.column" : "48",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.usr" : "c:objc(cs)RLMObjectSchema(py)properties"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) NSString *_Nonnull className;",
              "key.doc.comment" : "The name of the class this schema describes.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "46",
              "key.name" : "className",
              "key.doc.column" : "43",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.usr" : "c:objc(cs)RLMObjectSchema(py)className"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic, nullable) RLMProperty *primaryKeyProperty;",
              "key.doc.comment" : "The property which is the primary key for this object (if any).",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "51",
              "key.name" : "primaryKeyProperty",
              "key.doc.column" : "56",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.usr" : "c:objc(cs)RLMObjectSchema(py)primaryKeyProperty"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.parsed_declaration" : "- (nullable RLMProperty *)objectForKeyedSubscript:\n        (nonnull id<NSCopying>)propertyName;",
              "key.doc.comment" : "Retrieve an RLMProperty object by name.\n\n- parameter: propertyName The property's name.\n\n- returns: RLMProperty object or nil if there is no property with the given name.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The property's name.",
                      "kind" : ""
                    }
                  ],
                  "name" : "propertyName"
                }
              ],
              "key.doc.line" : "60",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectForKeyedSubscript:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "RLMProperty object or nil if there is no property with the given name.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "27",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.usr" : "c:objc(cs)RLMObjectSchema(im)objectForKeyedSubscript:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.parsed_declaration" : "- (BOOL)isEqualToObjectSchema:(nonnull RLMObjectSchema *)objectSchema;",
              "key.doc.comment" : "Returns YES if equal to objectSchema",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "65",
              "key.name" : "isEqualToObjectSchema:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
              "key.usr" : "c:objc(cs)RLMObjectSchema(im)isEqualToObjectSchema:"
            }
          ],
          "key.name" : "RLMObjectSchema",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMObjectSchema.h",
          "key.usr" : "c:objc(cs)RLMObjectSchema"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
          "key.parsed_declaration" : "@interface RLMSchema : NSObject <NSCopying>",
          "key.doc.comment" : "This class represents the collection of model object schemas persisted to Realm.\n\nWhen using Realm, RLMSchema objects allow performing migrations and\nintrospecting the database's schema.\n\nSchemas map to collections of tables in the core database.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "34",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.parsed_declaration" : "@property(readonly, copy, nonatomic) NSArray *_Nonnull objectSchema;",
              "key.doc.comment" : "An NSArray containing RLMObjectSchema's for all object types in this Realm. Meant\nto be used during migrations for dynamic introspection.\n\n- see: RLMObjectSchema",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "42",
              "key.name" : "objectSchema",
              "key.doc.column" : "48",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.usr" : "c:objc(cs)RLMSchema(py)objectSchema"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.parsed_declaration" : "- (nullable RLMObjectSchema *)schemaForClassName:(nonnull NSString *)className;",
              "key.doc.comment" : "Returns an RLMObjectSchema for the given class name in this RLMSchema.\n\n- parameter: className   The object class name.\n- returns:            RLMObjectSchema for the given class in this RLMSchema.\n\n- see:               RLMObjectSchema",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The object class name.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "className"
                }
              ],
              "key.doc.line" : "52",
              "key.doc.full_as_xml" : "",
              "key.name" : "schemaForClassName:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "RLMObjectSchema for the given class in this RLMSchema.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "31",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.usr" : "c:objc(cs)RLMSchema(im)schemaForClassName:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.parsed_declaration" : "- (nonnull RLMObjectSchema *)objectForKeyedSubscript:\n        (nonnull id<NSCopying>)className;",
              "key.doc.comment" : "Look up an RLMObjectSchema for the given class name in this Realm. Throws if there\nis no object of type className in this RLMSchema instance.\n\n- parameter: className   The object class name.\n- returns:            RLMObjectSchema for the given class in this Realm.\n\n- see:               RLMObjectSchema",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The object class name.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "className"
                }
              ],
              "key.doc.line" : "63",
              "key.doc.full_as_xml" : "",
              "key.name" : "objectForKeyedSubscript:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "RLMObjectSchema for the given class in this Realm.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "22",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.usr" : "c:objc(cs)RLMSchema(im)objectForKeyedSubscript:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.parsed_declaration" : "- (BOOL)isEqualToSchema:(nonnull RLMSchema *)schema;",
              "key.doc.comment" : "Returns YES if schema are equal",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "68",
              "key.name" : "isEqualToSchema:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
              "key.usr" : "c:objc(cs)RLMSchema(im)isEqualToSchema:"
            }
          ],
          "key.name" : "RLMSchema",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMSchema.h",
          "key.usr" : "c:objc(cs)RLMSchema"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h" : {
      "key.substructure" : [
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.enum",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
          "key.parsed_declaration" : "enum RLMPropertyType : int32_t {}",
          "key.doc.comment" : "Property types supported in Realm models.\n\nSee [Realm Models](http:\/\/realm.io\/docs\/cocoa\/latest\/#models)",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "27",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeInt = 0",
              "key.doc.comment" : "Integer type: NSInteger, int, long, Int (Swift)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "33",
              "key.name" : "RLMPropertyTypeInt",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeInt"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeBool = 1",
              "key.doc.comment" : "Boolean type: BOOL, bool, Bool (Swift)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "35",
              "key.name" : "RLMPropertyTypeBool",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeBool"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeFloat = 9",
              "key.doc.comment" : "Float type: float, Float (Swift)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "37",
              "key.name" : "RLMPropertyTypeFloat",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeFloat"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeDouble = 10",
              "key.doc.comment" : "Double type: double, Double (Swift)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "39",
              "key.name" : "RLMPropertyTypeDouble",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeDouble"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeString = 2",
              "key.doc.comment" : "String type: NSString, String (Swift)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "46",
              "key.name" : "RLMPropertyTypeString",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeString"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeData = 4",
              "key.doc.comment" : "Data type: NSData",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "48",
              "key.name" : "RLMPropertyTypeData",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeData"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeAny = 6",
              "key.doc.comment" : "Any type: id, **not supported in Swift**",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "50",
              "key.name" : "RLMPropertyTypeAny",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeAny"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeDate = 7",
              "key.doc.comment" : "Date type: NSDate",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "52",
              "key.name" : "RLMPropertyTypeDate",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeDate"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeObject = 12",
              "key.doc.comment" : "Object type. See [Realm Models](http:\/\/realm.io\/docs\/cocoa\/latest\/#models)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "59",
              "key.name" : "RLMPropertyTypeObject",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeObject"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.enumcase",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.parsed_declaration" : "RLMPropertyTypeArray = 13",
              "key.doc.comment" : "Array type. See [Realm Models](http:\/\/realm.io\/docs\/cocoa\/latest\/#models)",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "61",
              "key.name" : "RLMPropertyTypeArray",
              "key.doc.column" : "5",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
              "key.usr" : "c:@E@RLMPropertyType@RLMPropertyTypeArray"
            }
          ],
          "key.name" : "RLMPropertyType",
          "key.doc.column" : "26",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
          "key.usr" : "c:@E@RLMPropertyType"
        },
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.typedef",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
          "key.parsed_declaration" : "typedef enum RLMPropertyType RLMPropertyType",
          "key.doc.comment" : "Property types supported in Realm models.\n\nSee [Realm Models](http:\/\/realm.io\/docs\/cocoa\/latest\/#models)",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "27",
          "key.name" : "RLMPropertyType",
          "key.doc.column" : "26",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMConstants.h",
          "key.usr" : "c:RLMConstants.h@T@RLMPropertyType"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  },
  {
    "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h" : {
      "key.substructure" : [
        {
          "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "40",
          "key.name" : "MARK: Realm Migrations",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h"
        },
        {
          "key.kind" : "sourcekitten.source.lang.objc.decl.class",
          "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
          "key.parsed_declaration" : "@interface RLMMigration : NSObject",
          "key.doc.comment" : "\nRLMMigration is the object passed into a user defined RLMMigrationBlock when updating the version\nof an RLMRealm instance.\n\nThis object provides access to the RLMSchema current to this migration.",
          "key.doc.full_as_xml" : "",
          "key.doc.line" : "40",
          "key.substructure" : [
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) RLMSchema *_Nonnull oldSchema;",
              "key.doc.comment" : "Get the new RLMSchema for the migration. This is the schema which describes the RLMRealm before the\nmigration is applied.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "46",
              "key.name" : "oldSchema",
              "key.doc.column" : "44",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.usr" : "c:objc(cs)RLMMigration(py)oldSchema"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.property",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.parsed_declaration" : "@property(readonly, nonatomic) RLMSchema *_Nonnull newSchema;",
              "key.doc.comment" : "Get the new RLMSchema for the migration. This is the schema which describes the RLMRealm after applying\na migration.",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "52",
              "key.name" : "newSchema",
              "key.doc.column" : "44",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.usr" : "c:objc(cs)RLMMigration(py)newSchema"
            },
            {
              "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.doc.full_as_xml" : "",
              "key.doc.line" : "69",
              "key.name" : "MARK: Altering Objects during a Migration",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.parsed_declaration" : "- (void)enumerateObjects:(nonnull NSString *)className\n                   block:(nonnull RLMObjectMigrationBlock)block;",
              "key.doc.comment" : "\nEnumerates objects of a given type in this Realm, providing both the old and new versions of each object.\nObjects properties can be accessed using keyed subscripting.\n\n- parameter: className   The name of the RLMObject class to enumerate.\n\n- warning:   All objects returned are of a type specific to the current migration and should not be casted\n           to className. Instead you should access them as RLMObjects and use keyed subscripting to access\n           properties.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The name of the RLMObject class to enumerate.",
                      "kind" : ""
                    }
                  ],
                  "name" : "className"
                }
              ],
              "key.doc.line" : "69",
              "key.doc.full_as_xml" : "",
              "key.name" : "enumerateObjects:block:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.usr" : "c:objc(cs)RLMMigration(im)enumerateObjects:block:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.parsed_declaration" : "- (nonnull RLMObject *)createObject:(nonnull NSString *)className\n                          withValue:(nonnull id)value;",
              "key.doc.comment" : "Create an RLMObject of type `className` in the Realm being migrated.\n\n- parameter: className   The name of the RLMObject class to create.\n- parameter: value       The value used to populate the created object. This can be any key\/value coding compliant\n                   object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n                   an NSArray with one object for each persisted property. An exception will be\n                   thrown if any required properties are not present and no default is set.\n\n                   When passing in an NSArray, all properties must be present, valid and in the same order as the properties defined in the model.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The name of the RLMObject class to create.\n ",
                      "kind" : ""
                    }
                  ],
                  "name" : "className"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The value used to populate the created object. This can be any key\/value coding compliant\n             object, or a JSON object such as those returned from the methods in NSJSONSerialization, or\n             an NSArray with one object for each persisted property. An exception will be\n             thrown if any required properties are not present and no default is set.",
                      "kind" : ""
                    }
                  ],
                  "name" : "value"
                }
              ],
              "key.doc.line" : "82",
              "key.doc.full_as_xml" : "",
              "key.name" : "createObject:withValue:",
              "key.doc.column" : "15",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.usr" : "c:objc(cs)RLMMigration(im)createObject:withValue:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.parsed_declaration" : "- (void)deleteObject:(nonnull RLMObject *)object;",
              "key.doc.comment" : "Delete an object from a Realm during a migration. This can be called within `enumerateObjects:block:`.\n\n- parameter: object  Object to be deleted from the Realm being migrated.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "Object to be deleted from the Realm being migrated.",
                      "kind" : ""
                    }
                  ],
                  "name" : "object"
                }
              ],
              "key.doc.line" : "89",
              "key.doc.full_as_xml" : "",
              "key.name" : "deleteObject:",
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.usr" : "c:objc(cs)RLMMigration(im)deleteObject:"
            },
            {
              "key.kind" : "sourcekitten.source.lang.objc.decl.method.instance",
              "key.doc.file" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.parsed_declaration" : "- (BOOL)deleteDataForClassName:(nonnull NSString *)name;",
              "key.doc.comment" : "Deletes the data for the class with the given name.\nThis deletes all objects of the given class, and if the RLMObject subclass no longer exists in your program,\ncleans up any remaining metadata for the class in the Realm file.\n\n- parameter:  name The name of the RLMObject class to delete.\n\n- returns: whether there was any data to delete.",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The name of the RLMObject class to delete.",
                      "kind" : ""
                    }
                  ],
                  "name" : "name"
                }
              ],
              "key.doc.line" : "100",
              "key.doc.full_as_xml" : "",
              "key.name" : "deleteDataForClassName:",
              "key.doc.result_discussion" : [
                {
                  "Para" : "whether there was any data to delete.",
                  "kind" : ""
                }
              ],
              "key.doc.column" : "9",
              "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
              "key.usr" : "c:objc(cs)RLMMigration(im)deleteDataForClassName:"
            }
          ],
          "key.name" : "RLMMigration",
          "key.doc.column" : "12",
          "key.filepath" : "\/Users\/jp\/Projects\/realm-cocoa\/Realm\/RLMMigration.h",
          "key.usr" : "c:objc(cs)RLMMigration"
        }
      ],
      "key.diagnostic_stage" : ""
    }
  }
]
